00) css3
0)  tips
1)  font
2)  text
3)  width, height
4)  border i kolory
5)  margin, padding
6)  background (images)
7)  units, sizes
8)  media queries
9)  scrollbar w tabeli
10) scrollbar - width
11) zebra
12) szukanie koloru
13) wyświetlanie tylko n początkowych liter
14) przycinanie zbyt długiego tekstu 3-ma kropkami
20) shorthands properties (DRY)
31) block vs inline
32) webP

40) combinators
41) selektory atrybutów
42) pseudoelementy (z podwójnym dwukropkiem)
43) pseudoselektory (z dwukropkiem)
44) box model (border-size) i box-shadow
45) specificity
46) filter
47) variables
48) vendor prefixes
49) @supports
50) polyfill
51) BEM
52) columns
53) calc
54) gradient (linear i radial)
55) transform
56) centrowanie

69) Sass - indeks
70) Sass - map-get
71) Sass - instalacja
72) Sass - tips
73) Sass - hello world
74) Sass - variables
75) Sass - variables scope
76) Sass - variables scope - !global
77) Sass - variable !default
79) Sass - nesting
80) Sass - nested properties

81) Sass - import 1
82) Sass - import 2
83) Sass - math
84) Sass - funkcje wbudowane
85) Sass - extend
86) Sass - placeholder
87) Sass - mixin (include)
88) Sass - funkcje
89) Sass - ampersand
92) Sass - przykład

101) Flexbox - tips
102) Flexbox - hello world
103) Flexbox - flex-grow
104) Flexbox - flex-shrink
105) Flexbox - flex-wrap
106) Flexbox - flex-basis
107) Flexbox - flex i flex-flow (skróty)
108) Flexbox - justify-content
109) Flexbox - flex-direction a flex-flow
110) Flexbox - align-items
111) Flexbox - ustawianie w pionie i poziomie

120) Grid - hello world
121) Grid - grid-auto-rows i columns
122) Grid - repeat
123) Grid - start i end

124) Grid - minmax
125) Grid - rozmieszczanie elementów
126) Grid - nazwane obszary
127) Grid - auto-fill i auto-fit


_________________________________________________________________________________
00) CSS3

  medium.com/beginners-guide-to-mobile-web-development/whats-new-in-css-3-dcd7fa6122e1
  webreference.com/authoring/css3/index-2.html
  webreference.com/authoring/css3/2.html
  lifewire.com/css2-vs-css3-3466978
  tutorialzine.com/2013/10/12-awesome-css3-features-you-can-finally-use

  CSS koncepty
    #1. Specificity
    #2. Box model
    #3. Display
    #4. Pozycjonowanie

  CSS3
    #1.  selektory (atrybutów, kombinatory, pseudoelementy, pseudoselektory)
    #2.  colors
    #3.  border radius
    #4.  box shadow
    #5.  text shadow
    #6.  web fonts
    #7.  columns
    #8.  calc
    #9.  variables
    #10. filter
    #11. flexBox

    #12. Multiple background images
    #13. Media queries
    #14. Tranforms
    #15. Animations
    #16. Gradients (linear, radial)

_________________________________________________________________________________
0) tips

    a) sandboksy:
        w3schools.com
        cssdesk.com

    b) best practices
        by Pete Hunt (Facebook) https://youtu.be/VkTCL6Nqm6Y?t=1270

        1) unikalne nazwy klas: zamiast .avatar - .igUserProfileAvatar

        2) zero kaskadowości: reguły/selektory nie są nadpisywane

        3) zero nadpisywania (tu nie ma kaskadowości, a jednak mogą się nakładać):
            <div class = 'one two three'>
            propertki się nie nakładają

        4) selektory 1-klasowe
            .header {} - ok
            .header .profile {} - źle

    c) kolejność grup reguł w css
         Leć od najbardziej ogólnych do najbardziej szczegółowych:
           #main {}
           #mail li {}

_________________________________________________________________________________
1) font

    quackit.com/css/tutorial/css_font.cfm
    https://flaviocopes.com/css-system-fonts/

    Font systemowy, nie wymagający ściagania go z neta (szybszy)

    a) font-family:

      body {
        font-family: system-ui
      }

      .. a jeśli są błedy, to:

      body {
        font-family: -apple-system, system-ui, BlinkMacSystemFont,
        'Segoe UI', Roboto, 'Oxygen', 'Helvetica Neue', Ubuntu, Arial, sans-serif;
      }

    b) font-size: 30px;
    c) font-size-adjust: 0.58;  // jeśli secondary font ma mniejszą wysokość
    e) font-style: italic       // normal or oblique
    f) font-weight: bold        // normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900
    g) font-variant: small-caps // normal or inherit
    h) font-stretch: normal;   //  ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded  | expanded  | extra-expanded  | ultra-expanded

    @font-face {
      font-family: "AnonymousPro;

      src: url("anonymousPro-Regular.woff2"),   // najlepsza kompresja 80% wsparcia
           url("anonymousPro-Regular."woff"),   // fallback, dobra kompresja 95% wsparcia
           url("anonymousPro-Regular.ttf")      // fallback, standard 95% wsparcia

      font-weight: 700;
    }

_________________________________________________________________________________
2) text

    quackit.com/css/tutorial/css_text.cfm

    a) text-align: center  // right, left, justify
    b) text-transform: capitalize  // lowercase, uppercase, inherit
    c) text-decoration: underline  // overline, line-through, none
    d) text-indent: 5em;  // wcięcie 1-szej linii tekstu w paragrafie
    e) text-shadow: 2px 2px 8px red;  // horizontal, vertical, blur, color
    f) text-overflow: ellipsis;  // wychodzący poza width tekst zastąpią '...'
                                 // muszą być: white-space: nowrap; overflow: hidden;
    g) white-space: pre;   // normal  nowrap
    h) letter-spacing: 1px;
    i) word-spacing: 10px;
    j) direction: rtl;  // ltr
    k) skracanie tekstu: width: 3ch; overflow: hidden;
_________________________________________________________________________________
3) width, height

    line-height: 4;  // 4em, 400%
    min-width, min-height
    max-width, max-height
_________________________________________________________________________________
4) border (radius) i kolory

    border: 1px solid red
    border-radius: 15px   // 20%

    kolory: 16 podstawowych, 130 rozszerzonych (css3)
    formaty: #RRGGBB, #RGB, rgb(R, G, B), rgb(R%, G%, B%), hsl(H, S%, L%)

_________________________________________________________________________________
5) margin, padding

    margin: 10px 20px 30px 40px   // top right bottom left
    margin: 10px 20px 30px       // top left_right bottom
    margin: 10px 20px           // horizontal vertical
    margin: 10px               // all

    padding - jak wyżej

_________________________________________________________________________________
6) background (images)

     <div obrazek>Raz Dwa Trzy Cztery Pięć Sześć Siedem Osiem</div>

     [obrazek] {
       width: 400px;  /* 100% */
       height: 400px;
       border: 3px solid green;

       background: url('https://unsplash.it/300/300'); /* red */
       background-size: 60px;  /* 5 x 5 obrazków | 100% | cover | contain */
       background-repeat: repeat-x; /* 5 obrazków w poziomie */
       background-repeat: repeat-y; /* 5 obrazków w pionie */
       background-repeat: no-repeat; /* 1 obrazek */
     }

_________________________________________________________________________________
7) unit sizes

    px, em, rem, %, ch
    vw - viewport width
    vh - viewport height

    em jest wielkością czcionki relatywną do wielkości czcionki direct parenta
    rem - do root'a (html)

    % odnosi się do rozmiaru parenta
    vh i vw - do całego viewporta (razem z ew scrollbarem)

    Który wybrać ?
      font-size (root element)        % lub nic
      font-size, padding, margin      rem
      border                          px
      width, height                   % lub vw / vh
      top, bottom, left, right        %

_________________________________________________________________________________
8) media queries - różne ustawienia dla różnych wielkości ekranów (w tym mobilnych)

    /* Smartphones (portrait and landscape) ----------- */
    @media only screen
    and (min-device-width : 320px)
    and (max-device-width : 480px) {
    /* Styles */
    }

    /* Smartphones (landscape) ----------- */
    @media only screen
    and (min-width : 321px) {
    /* Styles */
    }

    /* Smartphones (portrait) ----------- */
    @media only screen
    and (max-width : 320px) {
    /* Styles */
    }

    /* iPads (portrait and landscape) ----------- */
    @media only screen
    and (min-device-width : 768px)
    and (max-device-width : 1024px) {
    /* Styles */
    }

    /* iPads (landscape) ----------- */
    @media only screen
    and (min-device-width : 768px)
    and (max-device-width : 1024px)
    and (orientation : landscape) {
    /* Styles */
    }

    /* iPads (portrait) ----------- */
    @media only screen
    and (min-device-width : 768px)
    and (max-device-width : 1024px)
    and (orientation : portrait) {
    /* Styles */
    }

    /* Desktops and laptops ----------- */
    @media only screen
    and (min-width : 1224px) {
    /* Styles */
    }

    /* Large screens ----------- */
    @media only screen
    and (min-width : 1824px) {
    /* Styles */
    }

    /* iPhone 4 ----------- */
    @media
    only screen and (-webkit-min-device-pixel-ratio : 1.5),
    only screen and (min-device-pixel-ratio : 1.5) {
    /* Styles */
    }
_________________________________________________________________________________
9) scrollbar w tabeli

    Opakuj <table> ..</table> w diva w którym ograniczysz mu wysokość i ustawisz overflow.
    Jeśli nie ustawisz wysokości, div będzie miał taką wysokość, by wyświetlić
    wszystkie rowy, a więc overflow nie będzie potrzebny i się nie odpali

    <div style = "overflow: scroll; height: 500px;">

      <table style="text-align: left;  }">
        <tr ><td>pm_tl: </td><td >  {{ clickedProject.pm_tl }} </td></tr>
      </table>

    </div>
_________________________________________________________________________________
10) scrollbar - width

      http://stackoverflow.com/questions/18961998/css-scrollbar-width-and-round-effect

      Chyba tylko dla webkita  (chrom)

      ::-webkit-scrollbar {
          width: 1em;
          height: 1em
      }
_________________________________________________________________________________
11) zebra

      Even lepszy, bo odd traktuje nagłówki jako rów i zmienia jego kolor

      tr:nth-child(even) {
        background-color: #97C03D;
      }
_________________________________________________________________________________
12) szukanie koloru

      Posługując się addonem do chroma Colorzilla, znajdź kolor najbliższy szukanemu
      Pozostaje go tylko rozjaśnić lub zaciemnić

      Colorzilla > wklej jego kod do okna '#: 000000' > radio 'S'  ( saturation )

      I dawaj nieco mniejsze / wieksze wartości aż kolor będzie ok
      Wtedy skopiuj zawartość ww okna '# ...' i wklej do sublajma

      np. Szukając szarego do zebry,  znalazłem  #F9EBEA
      Zmieniłem saturation na ciut większą i wyszło  #f7e2e1
_________________________________________________________________________________
13) wyświetlanie tylko n początkowych liter

    .limit {
      width: 3ch;
      overflow: hidden;
    }

    <div class="limit">
      <a href="">1234567</a>
    </div>

    <div style="width: 6ch; overflow: hidden">
      <a href="">1234567890</a>
    </div>


_________________________________________________________________________________
20) shorthands properties (DRY)

    Tuba - HelloRoman: Jak pisać dobry CSS
    https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties

    a) margin
        Kolejność: góra, prawo, dół, lewo (clockwise)
        margin: 10px 20px 30px   // góra = 10, dół = 30, boki = 30

    b) background-image

        Zamiast:
          background-size: cover;
          background-repeat: no-repeat;
          background-image: url('http://..);

        Lepiej:
          background: cover no-repeat url('http://..)

     c) font

        Zamiast:
          font-style: italic;
          font-weight: bold;
          font-size: .8em;
          line-height: 1.2;
          font-family: Arial, sans-serif

       Lepiej:
          font: italic bold .8em/1.2 Arial, sans-serif;

    d) border

        Zamiast:
          border-width: 1px;
          border-style: solid;
          border-color: #000;

        Lepiej:
          border: 1px solid #000;

_________________________________________________________________________________
31) block vs inline elements

    codeburst.io/block-level-and-inline-elements-the-difference-between-div-and-span-2f8502c1f95b
    bitdegree.org/learn/css-display

    a) inline: span, anchor <a>, image
    b) block: div, p, h1-6, ul, ol, li
    c) inline-block: element blokowy (np div) ustawiający się w rząd (jak inline)

    Inline element:
      1) nie zawiera znaku nowej linii
      2) zabiera tylko miejsce na zawarty w nim tekst lub obrazek

    Block element:
      1) zawiera znak nowej linii przed i po nim
      2) zabiera całą szerokość jednej lub wielu linii
      3) można mu nadać height, width, padding i margin

    Inline-block:
      1) układa się w rzędzie (jak inline)
      2) ale można go stylować jak block (height, width, margin, padding)
      3) w tym zawijać (wrap) tekst który się nie mieści

_________________________________________________________________________________
32) display

      a) inline
      b) block
      c) inline-block
      d) flex
      e) none
_________________________________________________________________________________
33) webP

    Format webP jest o 25% lepszy lossless, a lossy 66% i więcej
    Ale obsługuje go tylko 75% przeglądarek (bez Safari, IE i starszych Edgów)

    Poniższe ściąga webP, a jeśli browser go nie obsługuje to jpeg'a

    <picture>
      <source srcset="img/awesomeWebPImage.webp" type="image/webp">
      <source srcset="img/creakyOldJPEG.jpg" type="image/jpeg">
      <img src="img/creakyOldJPEG.jpg" alt="Alt Text!">
    </picture>

    css-tricks.com/using-webp-images/
_________________________________________________________________________________
40) Combinators

      Udemy - Schwartzmuller: Complete Guide to CSS #20 Combinators

      1) div,  p = div lub p (wszystkie divy i wszystkie p)
      2) div   p = descendant (all children)
      3) div > p = child (direct children)
      4) div ~ p = general sibling (all)
      5) div + p = adjacent sibling (1st)

    -------- index.html --------------------------------

      <!DOCTYPE html>
      <html lang="en">
      <head>
        <link rel="stylesheet" href="style.css">
      </head>
      <body>

      <div>
        <p class='foo'>To jest 2</p>
      </div>

      </body>
      </html>

    -------- style.css --------------------------------

      body { color: white; max-width: 10em; }


      /* 1) paragraf lub div
            <div>
              <p>To jest 1</p>
            </div>
      */
      div, p { background: red; }


      /* 2) Descendant - child ale nie nie musi być bezpośredni
            <div>
              <div>1. Not Applied</div>
              <p>2.   Applied</p>
              <div>3. Not Applied</div>
              <article>
                <p>4. Applied</p>
              </article>
              <p>5. Applied</p>
            </div>
      */
      /* div p.foo { background: green; } */


      /* 3) Child (direct)
            <div>
              <div>1. Not Applied</div>
              <p>2.   Applied</p>
              <div>3. Not Applied</div>
              <article>
                <p>4. Not Applied</p>
              </article>
              <p>5. Applied</p>
            </div>
      */
      /* div > p { color: red; } */


      /* 4) Adjacent sibling - mają tego samego parenta i następują zaraz po sobie
            <h2>1. Not applied</h2>
            <p>2.  Applied</p>

            <h2>3. Not applied</h2>
            <h2>4. Not applied</h2>
            <p>5.  Applied</p>
            <p>6.  Not Applied</p>
      */
      /* h2 + p { color: red; } */


      /* 5) General sibling - mają tego samego parenta i następują po sobie (niekoniecznie zaraz)
            <h2>1. Not applied</h2>
            <p>2.  Applied</p>

            <h2>3. Not applied</h2>
            <h2>4. Not applied</h2>
            <p>5.  Applied</p>
            <p>6.  Applied</p>
      */
      /* h2 ~ { color: red; } */

_________________________________________________________________________________
41) Selektory atrybutów

    Tuba: Selektory atrybutów w CSS 3

    CSS3 wprowadził do selektorów, namiastkę regexa: ^, $, *, ~
    oraz atrybut data-*

  --------------------------------------------------------------

    <h2 dupa>Dupa</h2>
    <input dupa>

    [dupa] { border: 3px solid brown }        // oba tagi
    input[dupa] { border: 3px solid brown; }  // tylko 2gi tag

  --------------------------------------------------------------

    <a href="kupa">Kupa</a>
    <a href="siku">Siku</a>

    /* [href='kupa'] { color: yellow; } */   // dokładna nazwa
    /* [href*='up'] { color: yellow; } */    // zawiera 'up
    /* [href^='ku'] { color: yellow; } */    // zaczyna sie na 'ku'
    [href$='pa'] { color: yellow; }          // kończy sie na 'pa'

_________________________________________________________________________________
42) Pseudoelementy (z podwójnym dwukropkiem)

    Udemy - Schwartzmuller: Complete Guide to CSS #42 Pseudo Classes and Pseudo Elements

    Wybierają część elementu:
      after, before, first-letter, first-line

    before i after - dodają treść do elementu, a więc muszą zawierać propertkę 'content' z nią

    a) ::before   ::after   ::first-letter  ::first-line

        <p>Raz Dwa Trzy Cztery Pięć Sześć Siedem </p>

        p:hover::before { content: 'Dupa' }
        p:hover::after { content: 'Dupa' }
        p::first-letter { color: orange; }
        p::first-line { color: green; }

    b) :hover::after

        <p>Dyski <span data-tooltip="Solid State Drive">SSD</span> są bardzo szybkie</p>

        [data-tooltip]:hover:after {
          content: attr(data-tooltip);
          min-width: 90px;
          background: rgba(50, 150, 150, 0.8);
          padding: 10px;
          border-radius: 10px;
          position: absolute;
          top: 20px;
          left: 40px;
          font-size: 12px;
          font-weight: bold;
          z-index: 1000;
        }

    c) ::before

        <a href='#' class='download'> Lekcja 1 </a>
        <a href='#' class='download'> Lekcja 2 </a>
        <a href='#' class='download'> Lekcja 3 </a>

        .download:before { content: url('../img/download.gif') }
        .download:hover:before { content: url('../img/download_hover.gif') }
_________________________________________________________________________________
43) Pseudoklasy (z dwukropkiem)

    Udemy - Schwartzmuller: Complete Guide to CSS #42 Pseudo Classes and Pseudo Elements

      Poprzedzane są dwukropkiem. Reagują na:
        1) stan elementu:
            hover, focus, active, visited, checked, disabled

        2) położenie elementu
            first-child, last-child, nth-child, only-child,

        3) zawartość
            empty, not

    a) :checked

        <input type="radio" id="a1"/><label for="a1">Radio box</label>
        input:checked +label { color: green; }

    b) :focus

        <input type="text" />
        input[type='text']:focus { border: 2px solid green; }

    c) :hover  :active  :visited

        <a href="#">Raz</a>
        a:hover { color: green;}
        a:active { color: orange;}  // klikinij i przytrzymaj
        a:visited { color: red;}

    d) :first-child

        <table>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>

        body { color: white; background: grey}

        td {
          height: 50px;
          width: 150px;
          border: 3px solid blue;
        }

        td:first-child {
          border: 3px solid red;
        }

    e) :nth-child

        <table>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>


        body { color: white; background: grey}

        td {
          height: 50px;
          width: 150px;
          border: 3px solid blue;
        }

        td:nth-child(3) { border: 3px solid red; }
        td:nth-child(2n) { border: 3px solid red; }    // 2gi i 4ty
        td:nth-child(2n-1) { border: 3px solid red; }  // 1szy i 3ci
        td:nth-child(even) { border: 3px solid red; }  // parzyste
        td:nth-child(odd) { border: 3px solid red; }  // nieparzyste

    f) :only-child

        <div>
          <div>Child 1</div>
        </div>

        <div>
          <div>Child 1</div>
          <div>Child 2</div>
        </div>

        body { color: white; background: grey}

        div:only-child {
          border: 3px solid red;
        }

    g) :empty

        <div>
          <p>1</p>
          <p></p>
          <p>3</p>
        </div>

        body { color: white; background: grey}

        p:empty {
          border: 3px solid red;
        }

    h) :not

        td:first-child:not { border: 3px solid red; }
_________________________________________________________________________________
44) Box model (box-sizing) i box-shadow

    box-sizing: border-box vs content-box

    margin - margines na zewnątrz boksa
    padding - margines wewnątrz boksa (między napisem a borderem)

    Przy domyślnym ustawieniu box-sizing: content-box, przy ustawieniach:
      width: 100
      padding: 10
      border: 5
    .. szerokość elementu wyniesie: 100 + 2*10 + 2*5 = 130

   Przy ustawieniu box-sizing: border-box
   szerokość elementu wyniesie: 100 - 2*10 - 2*5 = 70

   Ponieważ zależnie od tego, czy parent jest elementem blokowym, czy inlinowym,
   box-sizing bywa nadpisywany, dlatego warto na szczycie pliku css umieścić

   * {
     box-sizing: border-box
   }

  box-shadow: 3px 5px 10px black
  box-shadow: 3px 5px 10px 15px black
  box-shadow: 3px 5px 10px 15px black inset   // x, y, blur, objętość, kolor, wewnątrz

_________________________________________________________________________________
45) Specificity

      Udemy: Shwartzmuller - The Complete Guide\02 Basics of CSS 17 i 18

      Hierarchia ważności (specyficzności), od najwyższego

      1) inline style
      2) id
      3) klasy
      4) <tagi> i ::pseudoselektory
      5) * - wszystkie elementy

      Style dziedziczone (inherited) jako mające niższą specyficzność,
      są nadpisywane leżącymi bliżej elementu

      Dodanie kombinatora (kolejnego elementu do selektora, np p .cool {})
      zwiększa jego specyficzność

      'element.style {}' - w devtoolsach to inline style, więc nadpisuje wszystko
_________________________________________________________________________________
46) filter

      <div>Raz Dwa Trzy Cztery Pięć Sześć Siedem Osiem</div>

      div {
        width: 400px;
        height: 400px;
        background: url('https://unsplash.it/id/237/400/400');

        filter: blur(5px);
        filter: brightness(0.5);
        filter: contrast(120%);
        filter: sepia(260%);
        filter: saturate(360%) blur(3px) contrast(120%);
      }

_________________________________________________________________________________
47) variables

      Support = 88%, bo w IE nie działa

      <h2>Raz dwa trzy</h2>
      <h3>Cztery pięć sześć</h3>

      :root {
        --dark-green: #0e4f1f;
        --redish: #ff1b68
      }

      h2 { color: var(--dark-green) }
      h3 { color: var(--redish) }

_________________________________________________________________________________
48) vendor prefixes

    Wersje z vendor prefiksami, to wersje wczesne, nie całkowicie zgodne ze standardem
    Gdy firma zrobi wersję zgodną, vendor prefiksa będzie można pominąć

    .container {
      display: -webkit-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;          // domyślny powinien być na końcu listy
    }

    Pakiet autoprefixer wykrywa elementy wymagające prefixów i dodaje je
    Webpack ma loadera z autoprefixerem
    Jest też online prefixer: autoprefixer.github.io
_________________________________________________________________________________
49) @supports

    Warunkowe wykonanie, jeśli browser wspiera daną funkcję

    body { }

    @supports (display: grid) {
      // jeśli browser wspiera grida, to wykona ten kod, jeśli nie - pominie go
    }
_________________________________________________________________________________
50) polyfill

    Javascriptowy pakiet pozwalający starszej przeglądarce wykonać jakąś funkcjonalność
    dla której nie ma nawet vendor prefiksów. Np jest polyfill dla rem'a

_________________________________________________________________________________
51) BEM

    Block__Element--Modifier - konwencja nazywania klas by uniknąć konfliktów

    manu-main__item--size-big
    main-header__brand
    button__--success

_________________________________________________________________________________
52) column

      div {
        width: calc(100% - 200px);
        height: 300px;
        background: green;
        box-shadow: 3px 5px 10px black;
        margin: auto;
        padding: 15px;

        columns: 3;  /* działa też column-count: 3; */
        column-gap: 50px;
        column-rule: 1px solid black;
      }

      <div>
        To wcale nie wymagało wielkiego charakteru
        nasza odmowa niezgoda i upór
        mieliśmy odrobinę koniecznej odwagi
        lecz w gruncie rzeczy była to sprawa smaku
        Tak smaku w którym są włókna duszy i chrząstki sumienia

        Kto wie gdyby nas lepiej i piękniej kuszono
        słano kobiety różowe płaskie jak opłatek
        lub fantastyczne twory z obrazów Hieronima Boscha
        lecz piekło w tym czasie było jakie
        mokry dół zaułek morderców barak
        nazwany pałacem sprawiedliwości

        Samogonny Mefisto w leninowskiej kurtce
        posyłał w teren wnuczęta Aurory
        chłopców o twarzach ziemniaczanych
        bardzo brzydkie dziewczyny o czerwonych rękach

        Zaiste ich retoryka była aż nazbyt parciana
        (Marek Tulliusz obracał się w grobie)
        łańcuchy tautologii parę pojęć jak cepy
        dialektyka oprawców żadnej dystynkcji w rozumowaniu
        składnia pozbawiona urody koniunktiwu

      </div>
_________________________________________________________________________________
53) calc

    Działania arytmetyczne z udziałem procentów jak i pikseli.
    Przed i po operatorze arytmetycznym musi być spacja

    <div></div>
    <div></div>
    <div></div>

    div {
      display: inline-block;
      background: green;
      box-shadow: 3px 5px 10px black
      height: 100px;

      width: calc(100% / 3 - 4px);
    }

_________________________________________________________________________________
54) gradient (linear i radial)

    <div id='grad'>444</div>

    #grad {
      height: 100px;
      width: 300px;
      background: linear-gradient(to right, red , yellow, green);
      background: radial-gradient(circle, red, yellow, green);
    }

_________________________________________________________________________________
55) transform

Robi efekty przejścia po hover, focus.
W treści polecenia transform trzeba podać o zmiane jakiej właściwości, chodzi.

Dodatkowe parametry, każdego transition, to czas trwania, opóźnienie, rodzaj przejścia.
Jeśli zmienić ma się kilka właściwości, rozdziela się je przecinkiem:

transition: background-color 0.75s 0s ease-in-out, /* duration, delay */
opacity 0.75s 0s ease-in-out;

-------- index.html -------------------------------------------------------------------------

  <button>KlikMi</button>

-------- style.css ---------------------------------------------------------------------------

  body { background: url("https://unsplash.it/id/1/200/200"); }

  button {
    width: 320px;
    height: 80px;
    background: hsl(10, 100%, 50%);
    font-size: 2.3rem;
    color: white;
    font-family: 'Montserrat';
    border: none;
    border-bottom: 7px solid hsl(10, 100%, 45%);
    padding-top: 5px;
    opacity: 1;

    transition: background-color 0.75s 0s ease-in-out, /* duration, delay */
                opacity 0.75s 0s ease-in-out;
  }

  button:hover {
    background: hsl(40, 100%, 50%);
    opacity: 0.7;
  }

_________________________________________________________________________________
56) centrowanie

      freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689/

      5 sposobów:
        1) text-align
        2) margin: auto
        3) transform: translate
        4) calc
        5) flexbox
        6) css grid

      ------- 1) text-align ----------------------------------------

          1) musi być kontener z text-align: center
          2) box musi mieć display: inline-block

            <div id=container>
              <div class='box'>1</div>
            </div>

            #container {
              text-align: center;
            }

            .box {
              width: 200px;
              height: 200px;
              background: green;

              display: inline-block;
            }

      ------- 2) margin: auto ----------------------------------------

          1) bez kontenera
          2) margin: auto
          3) display: block, albo bez displaya, bo domyślny to block

            <div class='box'>1</div>

            .box {
              width: 200px;
              height: 200px;
              background: green;

              margin: 0 auto;
            }

      ------- 3) calc ----------------------------------------

            50% - pół szerokości boksa

            <div class='box'>1</div>

            .box {
              width: 200px;
              height: 200px;
              background: green;

              position: absolute;
              top: calc(50% - 100px);   // 100px = połowa szerokości boksa
              left: calc(50% - 100px);  // 100px = połowa wysokości boksa
            }

      ------- 4) transform: translate ----------------------------------------

            <div class='box'>1</div>

            .box {
              width: 200px;
              height: 200px;
              background: green;

              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%)   // -50% * 200 = -100px
            }


      ------- 5) flexbox ----------------------------------------

              1) html, body i container mają mieć height: 100%
              2) container - display:flex, justify-content i align-items: center

            <div id=container>
              <div class='box'>1</div>
            </div>

            html, body, #container {
              height: 100%;
            }

            #container {
              display: flex;
              justify-content: center;
              align-items: center;
            }

            .box {
              width: 200px;
              height: 200px;
              background: green;
            }

      ------- 6) css grid ----------------------------------------

          <div class='box'>1</div>

          body {
            display: grid;
            place-items: center;
            height: 100vh;
          }

          .box {
            width: 200px;
            height: 200px;
            background: green;
          }

_________________________________________________________________________________
69) Sass - index

    Udemy - Schwartzmuller: Complete Guide to CSS #281, #282, #283

    1) zmienne
    2) @import
    3) @extend (placeholder %)
    4) @mixin (@include, @content)
    5) math
    6) komentowanie //
    7) !default !global
    8) dyrektywy funkcyjne
    9) wbuodwane funkcje (lighten, darken)

    Vue:
      <style lang="scss" scoped>
         @import 'main.scss'
      </style>

________________________________________________________________________________________________________________
70) Sass - map-get

    $colors: (main: #521751, secondary: #fa923f)          //  list map
    $border-default: 0.05rem solid map-get($colors, main)

________________________________________________________________________________________________________________
71) Sass - instalacja

    a) vs code - live sass compiler
    b) vs code - live server
    c) stwórz index.html i style.scss jak w p.3
    4) w dolnej belce kliknij na 'Watch Sass' (compiler)
    5) i na 'Go Live' (server)
    6) zrób jakąś zmianę w kodzie i obserwuj zmiany
    7) jeśli zmiany nie widać na ekranie, zrestartuj ikonkę Watch Sassa

________________________________________________________________________________________________________________
72) Sass - tips

    a)  https://scotch.io/tutorials/getting-started-with-sass
    b)  znacznik komentarza (jak w js)   //
    c)  http://www.sassmeister.com  -  sandbox / playground (jak jsbin)

    d) jeśli zmiany nie widać na ekranie:
         i) sprawdź czy są błędy w zakładce 'Problems' i 'Output'
        ii) zrestartuj ikonkę Watch Sassa

_______________________________________________________________________________________________________________
73) Sass - hello world

      a) wbij poniższe
      b) klik w 'Watch Sass' na dolnej belce
      c) klik w 'Go Live' na dolnej belce

 -  -  -  -  -  -  -  -  -  - a) index.html  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    <body>
      <div class="shape" id="shape1">  <h1> 1 </h1> </div>
      <div class="shape" id="shape2">  <h1> 2 </h1> </div>
      <div class="shape" id="shape3">  <h1> 3 </h1> </div>
      <div class="shape" id="shape4">  <h1> 4 </h1> </div>
    </body>

 -  -  -  -  -  -  -  -  -  - b) style.scss  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    $display: inline-block;
    $width: 200px;
    $height: 200px;
    $color1: red;
    $margin: 16px;

    .shape {
      display: $display;
      width: $width;
      height: $height;
      background: $color1;
      margin: $margin;
    }

________________________________________________________________________________________________________________
74) Sass - variables

    Patrz 3) Hello World

    $color1: blue;
    $margin: 16px;

    .shape {
      display:inline-block;
      width:200px;
      height:200px;
      background: $color1;
      margin: $margin;
    }

________________________________________________________________________________________________________________
75) Sass - variables scope

    Zmienna lokalna nadpisuje globalną.
    W przykładzie poniżej, w body będzie green, a w shape3 - red

    $newColor: red;

    body {
      $newColor: green;
      background: $primaryColor;
    }

    #shape3 {
      color: $newColor;
    }
________________________________________________________________________________________________________________
76) Sass - variables scope - !global

    !global - zmienia zmienną z lokalnej na globalną

    Teraz, shape3 będzie green

    @import 'colors.scss';
    $margin: 16px;
    $primaryColor: red;

    body {
      $primaryColor: green !global;
      background: $primaryColor;
    }

    #shape3 {
      color: $primaryColor;
    }
________________________________________________________________________________________________________________
77) Sass - variable !default

    !default ustala wartość domyślną zmiennej.
    Jeśli przed nią lub po niej zostanie zadeklarowana inna, ta inna nadpisze domyślną

    $firstValue: 1em;
    $firstValue: 2em !default;  // wygra 1em,  mimo że 2em jest póżniej

    font-size: $firstValue;
________________________________________________________________________________________________________________
79) Sass - nesting

    Nie zagnieżdżaj głębiej, niż do 4 poziomów  ( zalecenie sass'aków )
    Zamiast:

      .container { width: 100%; }
      .container h1 { color: red; }

    Lepiej:
      .container {
          width: 100%;
          h1 {
            color: red;
          }
      }
________________________________________________________________________________________________________________
80) Sass - nested properties

      Zamiast tradycyjnych:

        font-size: 2rem;
        font-family: helvetica;
        font-weight: 400;

      .. można użyć:

      font: {
        size: 1rem;
        family: georgia;
        weight: 400
      }

________________________________________________________________________________________________________________
81) Sass - import 1

    Plik importowany powinien zaczynać się underscorem '_'
    Dzięki temu, nie zostanie on skompilowany nim włączy się go do
    pliku głównego

    Importuje się go przez:
      @import './styles/colors.scss';

    .. a jeśli leży w tym samym katalogu to przez:
      @import 'colors', 'mixins', 'functions'   - pomijając ścieżkę i rozszerzenie

    Po imporcie, wszystkie zdefiniowane w nim zmienne są dostępne z poziomu pliku głównego

    index.html jak z 3) Hello World

    -------------------- colors.scss ----------------------------------

    $color1: blue;
    $color2: yellow;

    -------------------- style.scss ----------------------------------

    @import 'colors.scss';
    $margin: 16px;

    .shape {
      display:inline-block;
      width:200px;
      height:200px;
      background: $color1;
      margin: $margin;
    }

    #shape1,  #shape4  {
      background: $color2;
    }
________________________________________________________________________________________________________________
82) Sass - import 2

    Można zagnieżdżać importy tworząc z nich hierarchię:

    -------- index.html -------------------------------------------

      <div>111</div>
      <div>222</div>
      <div class='hi'>333</div>

    -------- style.scss -------------------------------------------

      @import 'typo.scss';

      body { color: white; background: grey}

      div {
        width: 200px;
        height: 200px;
        background: green;
        box-shadow: 3px 5px 10px black;
        padding: 15px;
      }

    -------- typo.scss --------------------------------------------

      @import 'colors.scss';

      .hi {
        font-size: 1.4rem;
        font-weight: bold;
        color: $malinowy;
      }

    -------- colors.scss --------------------------------------------

      $malinowy: yellow;

________________________________________________________________________________________________________________
83) Sass - math

    4 działania artymetyczne, modulo (%), równość (==) i nierówność (!=)

    $shape-width: 100%;

    #shape1 { width: $shape-width;  }
    #shape2 { width: $shape-width / 4; }

    UWAGA 1
      Przy dzieleniu gdzie nie uczestniczą zmienne, działanie musi być ujęte w nawias,
      by nie gryzło się ze skróconą notacją css'owa np:

        $fontDiff: (14px/16px);

    UWAGA 2
      Nie można mieszać jednostek (w css'owym calc - można !)

      $container-width: 100% - 20px;  // zamiast tego użyj css'owej funkcji calc
________________________________________________________________________________________________________________
84) Sass - wbudowane funkcje

      sass-lang.com/documentation/Sass/Script/Functions.html

      Mnóstwo funkcji: koloru, stringowe, matematyczne, listy, mapy

      $buttonColor: yellow;
      $buttonDark: darken($buttonColor, 20%);
      $buttonLight: lighten($buttonDark, 10%);
________________________________________________________________________________________________________________
85) Sass - extend

     Służy dziedziczeniu

     ---------- index.html ------------------------------------------

     <div  id="shape5"><h1> 5 </h1></div>

     ---------- style.css -------------------------------------------

    .shape {
        display:inline-block;
        width:200px;
        height:200px;
        margin: 20px;
        background: $color1;
    }

    #shape5 {
      @extend .shape;
      border: 5px solid white;
    }

________________________________________________________________________________________________________________
86) Sass - placeholder

      Analogia do klasy abstrakcyjnej
      Blok o nazwie poprzedzonej '%' jest placeholderem tzn, że on sam nie jest kompilowany do css'a
      Kompilowane są za to bloki (klasy, id, selectory) które z niego dziedziczą

      %input-style {
        border-radius: 3px;
        color: #555;
        font-size: 17px;
        padding: 10px 20px;
        display: inline-block;
        outline: 0;
      }

      .input {
        @extend %input-style;
        border: 4px solid #ddd;
      }

      .error-input {
        @extend %input-style;
        border:4px solid #e74c3c;
      }
________________________________________________________________________________________________________________
87) Sass - mixin (include)

     Udemy - Schwartzmuller: Complete Guide to CSS #287 Mixins

     Mixin to css'owy odpowiednik funkcji - zwracającej powtarzający się kod
     Może być w tym samym pliku, lub importowane z pliku zewn

    ---------- index.html -------------------------------------

      <div class='pierwszy'>aj</div>
      <div class='drugi'>waj</div>

    ---------- style.scss -------------------------------------

      @mixin shape($width, $height, $color) {
        width: $width;
        height: $height;
        background: $color;
        @content;
      }

      .pierwszy {
        @include shape(200px, 200px, green);
      }

      .drugi {
        @include shape(300px, 300px, blue) {
          color: white;
        }
      }

________________________________________________________________________________________________________________
88) Sass - funkcje

    ---------- style.css --------------------------

      @import 'functions';

      $size: 1rem;

      font: {
        size: double($size);
        family: georgia;
        weight: normal;
      }

    ---------- _functions.scss --------------------

      @function double($size) {
        @return $size * 2
      }

________________________________________________________________________________________________________________
89) Sass - ampersand

    <a href="#">1111</a>

   --- style.css --------------------

    a {
      display: block;
      text-decoration: none;
      width: 100px;
      height: 100px;
      border: 1px solid red;
      background: green;
    }

   --- standard --------------------

    a:hover { color: yellow }
    a:active { color: orange }

   --- ampersand  --------------------

    a {
      display: block;
      text-decoration: none;
      width: 100px;
      height: 100px;
      border: 1px solid red;
      background: green;

      &:hover { color: yellow }
      &:active { color: orange }
    }

_________________________________________________________________________________
92) Sass - przykład

      Tuba - Learn Sass In 20 Minutes   Sass Crash Course

    --- index.html -----------------------------------------------

      <!DOCTYPE html>
      <html lang="en">
      <head>
        <link rel="stylesheet" href="style.css">
      </head>
      <body>

      <header>
        <h1>Header</h1>
        <button>Header Button</button>
      </header>

      <div class="footer">
        <button>Footer Button</button>
        <h1>Our footer info</h1>
      </div>


    --- style.scss -----------------------------------------------

      @import 'variables', 'mixins', 'functions';

      #header {
        @include egg(lighten($color1, 16),30vh);

        font: {
          size: double($size);
          family: georgia;
          weight: normal;
        }

        button {
          background: yellow;
          &::before {
            content: 'BIFOREK '
          }
          &::after {
            content: ' AFTEREK '
          }
          &:hover {
            background:lightblue;
          }
        }
      }

      #footer {
        @include egg(darken($color2, 17), 50vh)
      }

    --- _variables.scss ------------------------------------------

      $size: 1rem;
      $color1: orange;
      $color2: lightgreen;

    --- _mixins.scss ------------------------------------------

      %kura {
        display: flex;
        justify-content: center;
        align-items: center;
      }

      @mixin egg($background, $height) {
        @extend %kura;
        background: $background;
        height: $height;
      }

    --- _functions.scss ------------------------------------------

      @function double($size) {
        @return $size * 2
      }
_________________________________________________________________________________


_________________________________________________________________________________


_________________________________________________________________________________




_________________________________________________________________________________________________________
101) Flexbox - tips

    a) każdą linię kończ średnikiem
    b) znacznik komentarza:  //

_________________________________________________________________________________________________________
102) Flexbox - hello world

    CSS Flexbox Tutorial #1, 2
    https://www.youtube.com/watch?v=Y8zMYaD1bz0&list=PL4cUxeGkcC9i3FXJSUfmsNOx8E7u6UuhG

 -  -  -  -  -  -  -  -  a) index.html  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Flexbox</title>
    <link rel="stylesheet" type="text/css" href="style.css">
  </head>
  <body>

    <div class='container'>
      <div class='box one'>1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. At aperiam facere, odio enim et architecto. Facilis facere, vero laboriosam esse mollitia obcaecati non? Tenetur ipsum dignissimos ex, rerum modi totam!</div>
      <div class='box two'>2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. At aperiam facere, odio enim et architecto. Facilis facere, vero laboriosam esse mollitia obcaecati non? Tenetur ipsum dignissimos ex, rerum modi totam!</div>
      <div class='box three'>3. Lorem ipsum dolor sit amet, consectetur adipisicing elit. At aperiam facere, odio enim et architecto. Facilis facere, vero laboriosam esse mollitia obcaecati non? Tenetur ipsum dignissimos ex, rerum modi totam!</div>
    </div>

    </body>
</html>

 -  -  -  -  -  -  -  -  b) styles.css  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

body {
  background:grey;
  color: white;
}

.container {
  display: flex;
  justify-content: space-evenly;
  border: 1px solid white;
  /* height: 100vh; */
  padding: 5px;
}

.box {
  /* height: 200px; */
  width: 200px;
  border: 1px solid black;
  padding: 15px;
}

.one {
  background: red;
}

.two {
  background: green;
}

.three {
  background: blue;
}

_________________________________________________________________________________________________________
103) Flexbox - flex-grow

    CSS Flexbox Tutorial #3

    Służy do wypełniania całej szerokości kontenera
    Jeśli nie chcesz by boksy wypełniały całą szerokość ekranu, nie używaj flex-grow,
    a tylko nadaj im szerokości (width)

    Dodając zmienną flex-grow: cyfra - zmienia proporcje między boksami

    Np w przypadku 3 boksów, dodanie do kolejnych:

      1, 1, 1 - spowoduje zajęcie przez każdego boksa 1/3 szerokości ekranu

      1, 2, 3 - odpowiadnio: 1/6, 2/6 i 3/6

      1, 2 i nic  - 3-cia kolumna weźmie szerokość minimalną lub z .box  { min-width: 100ps },
                    2-ga zabierze 2/3 pozostałej szerokości kolumny, a 3-cia 1/3,   itd ..

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
body {
  background:grey;
  color: white;
}

.container {
  display: flex;
  border: 1px solid white;
  padding: 25px;
}

.box {
  border: 1px solid white;
  padding: 25px;
}

.one {
  background: red;
  flex-grow: 1;
}

.two {
  background: green;
  flex-grow: 2;
}

.three {
  background: blue;
  flex-grow: 3;
}
_________________________________________________________________________________________________________
104) Flexbox - flex-shrink

    Analogicznie do ww flex-grow,  flex-shrink oznacza szybość z jaką
    kurczony jest dany box. Im większa wartość  - tym szybciej

    Odpal devtoolsy (F12) i kurcz i rozszerzaj główne okno

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
body {
  background:grey;
  color: white;
}

.container {
  display: flex;
  border: 1px solid white;
  padding: 25px;
}

.box {
  height: 200px;
  width: 200px;
  border: 1px solid white;
  padding: 25px;
}

#one { background: red;  flex-shrink: 1 }
#two { background: green;  flex-shrink: 1 }
#three { background: blue;  flex-shrink: 4 }
_________________________________________________________________________________________________________
105) Flexbox - flex-wrap

    flex-wrap: wrap
      zrzuca w dół, przestający się mieścić na ekranie box

    flex-wrap: wrap-reverse
      wrzuca go na górę

    UWAGA !
      W klasie reactowej,  zamiast flex-wrap,  ma być flexWrap

    Trzeba go umieścić w kontenerze boksów
    Nie wiem tylko, dlaczego tego wrapa robi przy przekroczniu 750px szerokości ekranu,
    a nie 600  ( width: 200 * 3 )
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

.flex-container  {
    display: flex;
    background: #fff;
    flex-wrap: wrap-reverse;
}

.box  {
  height: 100px;
  width: 500px;
}

.one {
  background: red;
}

.two {
  background: green;
}

.three {
  background: blue;
}

_________________________________________________________________________________________________________
106) Flexbox - flex-basis

    Przy stopniowym zwijaniu szerokości okna, gdy nawet 1 kolumna
    się już nie mieści, flex-basis nie pokazuje scrolla u dołu.
    min-width - pokazuje
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

.flex-container  {
  display: flex;
  background: #fff;
  flex-wrap: wrap;
}

.box  {
  height: 100px;
  // min-width: 500px;
  flex-basis: 500px;
}

.one {
  background: red;
}

.two {
  background: green;
}

.three {
  background: blue;
}
_________________________________________________________________________________________________________
107) Flexbox - flex i flex-flow (skróty)

    a) flex
        Skrócony zapis 3 podst parametrów fleksa
        2gi i 3ci parametr (shrink i basis) są opcjonalne
        Default is:  0 1 auto

            flex: 1 0 200px   // grow shrink basis
            flex: 1          //  grow  = shrink = 1,  basis = 0

    b) flex-flow
        Skrót od flex-direction i flex-wrap

_________________________________________________________________________________________________________
108) Flexbox - justify-content

    Justowanie elementów w rzędzie, na przykładzie pozycji menu:
    Domyślna wartość justify-content, to:  flex-start  - wyrównanie do lewej

    Pełna lista:  flex-start
                  flex-end
                  center
                  space-between
                  space-around

 ------------------  style.css ----------------------------------

.container {
  display: flex;
  justify-content: space-between; /* flex-start | flex-end | center | space-between | space-around; */
}

.box {
  height: 100px;
  width: 100px;
}

.one {
  background: red;
}

.two {
  background: green;
}

.three {
  background: blue;
}

_________________________________________________________________________________________________________
109) Flexbox - flex-direction a flex-flow

    Wyróżnia się main axis (główną oś - dłuższą ) i cross (krótszą)
    Zamiast main i cross, chciałoby się rzec: x i y.

    I przy flex-flow: row się to sprawdza, ale przy flex-flow: column jest na odwrót,
    stąd zamniast x i y, używa się main i cross

    justify-content działa na main axis

    Majstrując flowem, zmieniasz oś wyświetlanych boxów: z rzędu na kolumne i wizawi

    Pomajstruj poniższymi 2 zmiennymi i obejrzyj efekty

    flex-flow: column-reverse;     // row,  row-reverse,  column,  column-reverse
    justify-content: flex-start;     // flex-end,  center

    Flow to skrót flex-direction i flex-wrap. Default = row nowrap

    flex-flow: row wrap; = flex-wrap: wrap;
                           +  flex-direction: row;

 -  -  -  -  -  -     styles.css  -  - -  -  -  -  -  -  -   -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    .container {
      display: flex;
      flex-flow: row-reverse;
      justify-content: flex-start;
      /* flex-start | flex-end | center | space-between | space-around; */
    }

    .box {
      height: 100px;
      width: 100px;
    }

    .one {
      background: red;
    }

    .two {
      background: green;
    }

    .three {
      background: blue;
    }

_________________________________________________________________________________________________________
110) Flexbox - align-items

    Wyróżnia się main axis (główną oś - dłuższą) i cross (krótszą)
    Tak jak justify-content działa na oś dłuższą (najczęściej poziomą)
    align-items działa na oś krótszą (najczęściej pionową)

    flex-flow: row - domyślne ustawienie gdzie główną jest oś pozioma i działa justify-content
    flex-flow: column - główną jest oś pionowa i działa align-items

    Pomajstruj poniższymi 2 zmiennymi i obejrzyj efekty

    flex-flow: row;
    justify-content: flex-end;  // flex-start, center, space-around, space-between

    i

    flex-flow: column;
    align-items: flex-end; // flex-start, center, baseline, stretch

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    <div class='container'>
      <div class='box' id='one'>1.</div>
      <div class='box' id='two'>2.</div>
      <div class='box' id='three'>3.</div>
    </div>

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    body {
      background:grey;
      color: white;
    }

    .container {
      display: flex;
      flex-flow: column;
      border: 1px solid white;
      height: 90vh;
      padding: 15px;
      /* justify-content: flex-start;   */
      align-items: stretch;
    }

    .box {
      border: 1px solid white;
      padding: 25px;
    }

    #one { background: red; }
    #two { background: green; }
    #three { background: blue; }

_________________________________________________________________________________________________________
111) Flexbox - pozycjonowanie w pionie i poziomie

    Trzeba ustawić wysokość kontenera, np height: 60vh
    oraz użyć justify-content i align-items

    <div class='container'>
      <div class='box' id='one'>1.</div>
      <div class='box' id='two'>2.</div>
      <div class='box' id='three'>3.</div>
    </div>

  ----------------------------------------------------

    body {
      background:grey;
      color: white;
    }

    .container {
      display: flex;
      height: 60vh;
      border: 1px solid white;
      padding: 15px;
      justify-content: space-evenly;
      align-items: center;
    }

    .box {
      height: 100px;
      width: 100px;
      border: 1px solid white;
      padding: 25px;
    }

    #one { background: red; }
    #two { background: green; }
    #three { background: blue; }

_________________________________________________________________________________________________________
120) Grid - hello world

    Kurs: CSS Grid by Overment - #1. Wprowadzenie

    display: grid;                    // inicjuje grida
    grid-template-columns: 1fr 1fr;   // ilość kolumn i proporcję ich wzajemnej szerokości
    grid-template-rows: 200px 100px;  // ilość rzędów
    grid-gap: 5px;                    // marginesy między nimi

    ---------- index.html ----------------------------------

    <link rel="stylesheet" href="style.css">

    <div class="container">
      <div class="box">1</div>
      <div class="box">2</div>
      <div class="box">3</div>
      <div class="box">4</div>
      <div class="box">5</div>
      <div class="box">6</div>
      <div class="box">7</div>
      <div class="box">8</div>
      <div class="box">9</div>
      <div class="box">10</div>

    </div>

    ---------- style.css ----------------------------------

      body {
        background:grey;
        color: white;
      }

      .box {
        background: orange;
      }

      .container {
        background:darkgrey;
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        grid-template-rows: 200px 100px;
        grid-gap: 5px;
      }

_________________________________________________________________________________________________________
121) Grid - grid-auto-rows i columns

    Dzięki dodaniu auto-rows, ustala się sekwencję wysokości kolejnych wierszy

    Czyli, w poniższym przykładzie:
      1-szy wiersz będzie miał 300px wysokości
      2-gi 200px
      3-ci 100px
      4-ty 200px
      5-ty-100px itd

    .container {
      display: grid;
      min-height: 700px;
      grid-template-columns: 1fr;
      grid-template-rows: 300px;

      grid-auto-rows: 200px 100px;
    }
_________________________________________________________________________________________________________
122) Grid - repeat

    Kurs: CSS Grid by Overment - #1. Wprowadzenie

    Zamiast pisać:
      grid-template-columns: 1fr 1fr 1fr;

    można
      grid-template-columns: repeat(3, 1fr);

    albo
      grid-template-columns: repeat(3, 1fr 100px);
_________________________________________________________________________________________________________
123) Grid - start i end

      Rozszerzenie rozmiaru pierwszej komórki, do długości dwu
      i szerokości dwu komórek

      a) dodaj klasę 'item1' do 1-go diva

      b) zdefiniuj klasę 'item1' (pomajstruj poniższymi wartościami):
          .item1 {
            grid-column-start: 1;
            grid-column-end: span 2;

            grid-row-start: 1;
            grid-row-end: span 2;
          }

         Zamiast ww, można użyć formy skróconej:
           grid-column: 1 / span 2;
           grid-row: 1 / span 2;

      -----------------------------------------------------------

      <div class="container">
        <div class="item item1">1</div>
        <div class="item">2</div>
        <div class="item">3</div>
        <div class="item">4</div>
        <div class="item">5</div>
        <div class="item">6</div>
        <div class="item">7</div>
        <div class="item">8</div>
        <div class="item">9</div>
      </div>

      -------- styles.css -------------------------------------

        body {
          background: darkgrey;
          color: white;
        }

        .item {
          background: orange;
          margin: 5px;
          border: 1px solid #000;
        }

        .container {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          grid-template-rows: 80px;
        }

        .item1 {
          grid-column-start: 1;
          grid-column-end: span 2;

          grid-row-start: 1;
          grid-row-end: span 2;
        }

_________________________________________________________________________________________________________
124) Grid - minmax

    Kurs: CSS Grid by Overment - #1. Wprowadzenie

    grid-template-rows: minmax(200px, auto);  // Minimalna szerokość = 300, a maksymalna = auto, czyli taka,
                                              // by pomieściła zawarte w niej elementy (coś jak min-height)

    Dla ilustracji, wklej do któregoś diva lorem ipsum, a zobaczysz,
    że wysokość diva się zwiększy, by pomieścić cały tekst

    Funkcję minmax można łączyć z funkcją repeat:

    grid-template-rows: repeat(minmax(300px, auto))

_________________________________________________________________________________________________________
125) Grid - rozmieszczanie elementów

    Kurs: CSS Grid by Overment - #2. Rozmieszczanie obszarów

    Wyobraźmy sobie szachownicę, czyli grida 8 na 8

    .box4 {
      grid-column: 1 / 8;   // kolumna: od 1 do 8,
      grid-row: 1 / 1;     //  rów: od 1 do 1, czyli 1-szy
    }

     .. lub krócej:

    .box4 {
      grid-column: 1 / 8;
      grid-row: 1;
    }

     .. lub jeszcze krócej:

    .box4 {
      grid-column: 1 / 8;   // grid-row: 1 - jest domyślny, więc można go pominąć
    }

     .. lub podając szerokość paska:

    .box4 {
      grid-column: 1 / span 8;
    }

    .box3 {
      grid-column: span 4 / 9;
      grid-row: span 2 / 7
    }

    Ww oznacza:
      szeroki na 4 kolumny, kończący się na 8-mej (nie dochodzi 9-tej)
      wysoki na 2 rowy, kończący się na 6-tej (nie dochodzi 7-mej)

    ----------- index.html ----------------------------------------

    <div class='container'>
      <div class='box box1'>1.</div>
      <div class='box box2'>2.</div>
      <div class='box box3'>3.</div>
      <div class='box box4'>4.</div>
    </div>

    ----------- style.css ----------------------------------------

    body {
      background:grey;
      color: white;
    }

    .container {
      display: grid;
      background: #222;
      border: 1px solid white;
      width: 500px;
      height: 500px;
      grid-template-columns: repeat(8, 1fr);
      grid-template-rows: repeat(8, 1fr);
    }

    .box {
      background: green;
      border: 1px solid white;
    }

    .box1 { grid-column: 1 / 9 }
    .box2 { grid-column: 2 / span 2; grid-row: 3 / span 4; }
    .box3 { grid-column: span 4 / 9; grid-row: span 2 / 7; }
    .box4 { grid-column: 1 / 8; grid-row: 8; }

_________________________________________________________________________________________________________
126) Grid - nazwane obszary

    Kurs: CSS Grid by Overment - #3. Nazwane obszary

    Między kropkami musi być spacja:
       ". . . . . . . ."

    -------- index.html ---------------------------------------

    <div class="container">
      <header class="box">HEADER</header>
      <main class="box">CONTENT</main>
      <aside class="box">SIDEBAR</aside>
      <footer class="box">FOOTER</footer>
    </div>

    -------- style.css ---------------------------------------

    body { font-size: 1.2rem; font-family: sans-serif; }

    .container {
        background: #222;
        width: 500px;
        height: 500px;
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-template-rows: repeat(8, 1fr);
        grid-template-areas:
          "header header header header header header header header"
          ". . . . . . . ."
          "content content content content content . sidebar sidebar"
          "content content content content content . sidebar sidebar"
          "content content content content content . sidebar sidebar"
          "content content content content content . sidebar sidebar"
          ". . . . . . . ."
          "footer footer footer footer footer footer footer footer"
    }

    .box {
      background: orange;
    }

    header { grid-area: header }
    main { grid-area: content }
    aside { grid-area: sidebar }
    footer { grid-area: footer }

_________________________________________________________________________________________________________
127) Grid - auto-fill i auto-fit

      Po zamianie ilości kolumn z 10 na auto-fill, wciśnij F12
      i zminiejszaj szerokość okna. Kwadraty zaczną się stackować
      zjeżdżając jeden po drugim linię niżej

      Po użyciu minmax, auto-fit rozciągnie kwadraty na całą dostępna szerokość


      <div class="container">
        <div class="box box1">1</div>
        <div class="box box2">2</div>
        <div class="box box3">3</div>
        <div class="box box4">4</div>
        <div class="box box4">5</div>
      </div>


      body {
        background: grey;
        color: white;
      }

      .container {
        background: darkgrey;
        height: 200px;

        display: grid;
        grid-template-columns: repeat(10, 100px);  // zamień 10 na 'auto-fill'
        // grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));  // odkomentuj go, komentując powyższy
        grid-template-rows: repeat(2, 1fr);
        grid-gap: 5px;
      }

      .box {
        background: orange;
      }

_________________________________________________________________________________________________________
128) Grid - nazwane linie frakcji

    Definiujemy nazwy linii:
      grid-template-columns: [pierwsza] 1fr [druga] 1fr [trzecia] 1fr [czwarta] 1fr [piata];
        .. a potem używamy ich do określenie rozmiaru obszaru
      grid-column: druga / czwarta;

    body {
      background: darkgrey;
      color: white;
    }

    .item {
      background: orange;
      border: 3px solid grey;
    }

    .container {
      min-height: calc(100vh - 60px);
      display: grid;
      grid-template-columns: [pierwsza] 1fr [druga] 1fr [trzecia] 1fr [czwarta] 1fr [piata];
      grid-auto-rows: 1fr;
      /* grid-gap: 10px; */
    }

    .item1 {
      grid-column: druga / czwarta;
    }
_________________________________________________________________________________________________________
129) Grid - grid-auto-flow

      Kierunek wyświetlania boksów: row (domyślny) albo column
_________________________________________________________________________________________________________
130) Grid - justify-content i align-content

      Oglądaj w devtoolsach i kliku w ikonkę w lewym górnym

      Tak jak we flexboksie, ww pozycjonują boksy używając b bliskich
      fleksboksowi wartości:

      start, end, center, space-around i space-between

      ------ style.css --------------------------------

      body {
        background: darkgrey;
        color: white;
      }

      .item {
        background: orange;
        border: 3px solid grey;
      }

      .container {
        min-height: calc(100vh - 60px);
        display: grid;
        grid-template-columns: 200px 100px 100px;
        grid-template-rows: 100px 80px;
        grid-auto-flow: row;

        justify-content: center;
        align-content: center;
      }

_________________________________________________________________________________________________________
131) Grid - justify-items i align-items

      Oglądaj w devtoolsach i kliku w ikonkę w lewym górnym

      justify-items: stretch (domyślny) / start / end
      align-items: stretch (domyślny)   / start / end

      stretch wypełnia całą komórkę

      justify-items: start robi z boksa pionową kreskę na początku komórki
      justify-items: end - na końcu komórki

      align-items: start robi z boksa poziomą kreskę na początku komórki
      align-items: end - na końcu komórki

      ------ style.css --------------------------------

        body {
          background: darkgrey;
          color: white;
        }

        .item {
          background: orange;
          border: 3px solid grey;
        }

        .container {
          min-height: calc(100vh - 60px);
          display: grid;
          grid-template-columns: 200px 100px 100px;
          grid-template-rows: 100px 80px;
          grid-auto-flow: row;
          justify-content: center;
          align-content: center;

          justify-items: stretch;
          align-items: end;
        }
_________________________________________________________________________________________________________
132) Grid - środkowanie tekstu w komórce

      Tylko w poziomie:
        text-align: center

      W pionie i w poziomie:
        margin: auto;

     .item {
        /* text-align:center; */
        margin: auto;
     }

_________________________________________________________________________________________________________
133) Grid - pozycjonowanie całego grida

      UWAGA !
        Żeby się pozbyć marginesów top i left, ustaw
          body {
            margin: 0;
          }

      Ująć frajera w diva i pogonić flexboksem

      -------- index.html -----------------------------------

      <div class="flexbox">
        <div class="container">
          <div class="item item1">1</div>
          <div class="item">2</div>
          <div class="item">3</div>
          <div class="item">4</div>
          <div class="item">5</div>
          <div class="item">6</div>
        </div>
      </div>

      -------- style.css -----------------------------------

      body {
        background: darkgrey;
        color: white;
        margin: 0;
      }

      .item {
        background: orange;
        border: 3px solid grey;
      }

      .flexbox {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
      }

      .container {
        /* min-height: calc(100vh - 60px); */
        display: grid;
        grid-template-columns: 200px 100px 100px;
        grid-template-rows: 100px 80px;
        grid-auto-flow: row;
      }
_________________________________________________________________________________________________________
134) Grid -

      -------- index.html -----------------------------------

      <div class="container">
        <div class="item footer">Footer</div>
        <div class="item content">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ipsam magnam nihil eum eaque provident vitae fuga quidem laboriosam sit vel quis ducimus consequuntur voluptate adipisci cupiditate voluptatibus aspernatur, velit placeat.</div>
        <div class="item header">Header</div>
        <div class="item nav">Nav: Home, About, Contact</div>
        <div class="item sidebar">Sidebar: <br> Latest articles</div>
      </div>

      -------- style.css -----------------------------------

        body {
          background: darkgrey;
          color: white;
          margin: 0;
        }

        .container {
          border: 1px solid red;
          height: 100vh;
          display: grid;

          grid-template-areas:
            "header  header "
            "nav     sidebar"
            "content sidebar"
            "footer  footer";

          grid-template-columns: 3fr 1fr 2fr;
          grid-template-rows: 100px 1fr 200px 10%;

          /* grid-column-gap: 5px;
          grid-row-gap: 5px; */

          /* grid-gap: 10px 10px; */

          grid-gap: 10px;
        }

        .item {
          background: orange;
          border: 1px solid #000;
        }

        .footer {
          grid-area: footer;
        }

        .content {
          grid-area: content;
        }

        .header {
          grid-area: header;
        }

        .nav {
          grid-area: nav;
        }

        .sidebar {
          grid-area: sidebar;
        }

_________________________________________________________________________________________________________
135) Grid -

_________________________________________________________________________________________________________
136) Grid -



















