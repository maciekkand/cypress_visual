0)  Instalacja i best practices
00) Clean Code
01) Tips & gotchas
02) VPSy
03) yarn - intro
04) yarn - komendy
05) npm - komendy
06) require (module.exports)
07) modules: plik CONSTANTS

11) request
12) request  - opakowany w promisa
13) request  - opakowany w promisa: multiple requests
14) fetch
15) https
16) axios
17) axios - multiple requests

18a) fs - writeFileSync, readFileSync
18b) fs - readFile (async)
19)  fs - watchFile

20) http
21) http - routing

22) promise
23) settled promise
24) promise.all
25) promise.race
26) sekwencja promisów
27) async / await
28) async / await - try / catch z fetch'em

29) express - wbudowane middleware'y: static, express.json
30) express - custom middleware
31) express - get i send
32) express - status i sendStatus kody
33) express - query z parametrem
34) express - post, express.json, postman
35) express - express.urlencoded
36) express - walidacja requestów (joi)
37) express - put
38) express - delete, helmet, morgan

39) express - zmienne środowiskowe
40) express - config
41) express - modularyzacja (export / import)
42) express - cookie-parser
43) express - session
44) express - serwer proxy

46) HTTP, GET vs PUT
47) HTTP - kody błędów

47a) mongoose - tips
48)  mongoexport, mongoimport
49a) mongoose - proste query
49b) mongoose - schema, walidacja (required) i insertMany
50)  mongodb  - insertMany i try/catch
51)  mongoose - schema
52)  mongoose - operatory zapytań
53)  mongoose - RegEx i count
54)  mongoose - updateMany
55)  mongoose - deleteOne i deleteMany
56)  mongoose - walidacja
57)  mongoose - walidacja i operatory (min, max, enum)
58)  mongoose - walidacja asynchroniczna
59)  mongoose - walidacja: komunikaty błędów
59a) mongoose - joigoose (joi schema konwerter)


60) mongoose - walidacja: get i set
61) mongoose - referencing (populate)
62) mongoose - embedding (1 dokument)
63) mongoose - embedding tablicy dokumentów
64) mongoose - ObjectId

65) mongoose + express: modularyzacja
66) mongoose + express: post - troubleshooting
67) mongoose + express: post

68) mongoose + express: rejestracja nowego juzka, bcrypt
69) mongoose + express: autentykacja
70) mongoose + express: ustawianie hasła w zmiennej środowiskowej
71) mongoose + express: przesyłanie tokena w headerze
72) mongoose + express: refaktoring robienia tokena
73) mongoose + express: sprawdzenie tokena jako middleware
74) mongoose + express: role-based autoryzacja

75) node - error handling
76) node - error handling: try / catch jako middleware
77) node - error handling: express-async-errors
78) node - error logging: winston
79) node - error logging: błędy synchroniczne
80) node - refaktoring app.js

100) streams - pipe serwer
101) streams - pipe plik
102) streams - pipe serwer/plik
103) streams - pipe file upload
110) streams - readable
111) streams - writeable
112) streams
113) streams - createReadStream i createWriteStream
114) streams - writable
115) streams - readable

117) buffer
118) buffer - write, toString, toJSON, compare, equals, slice
120) events emitting

130) websockets - client pinging server
131) websockets - server pinging client
132) socket.io - barebone
133) socket.io - barebone html

140) child_process
141) child_process - spawn
142) child_process - fork

150) cluster

160) skrypt
161) skrypt - uruchamianie
162) skrypt - cmd line arguments
163) skrypt - scraper GoogleTranslatora (choroby)
164) skrypt - matcher (vlookup 2 tabel)
165) skrypt - scraper gps > adres (google maps)
166) skrypt - scraper gps > adres (google maps) - pełny
167) cheerio - hello world
168) cheerio - program tv
169) skrypt - cheerio.js: memrise


170) Funkcje wbudowane - os
171) Argument linii komend
172) Node debugger (inspect)
173) encodeURIComponent i decodeURIComponent vs json
174) REPL
175) nextTick
176) query.parse
177) joi

180) API - Twitter: search
181) API - Twitter: stream

190) tools - json-server
191) tools - json-server - queries

192) tools - mock server: nock
193) tools - mock server: superagent-mocker
194) tools - mock server: httpster

195) tools - dev server: nodemon
196) tools - dev server: reload  ( html i css )
197) tools - inne

200) online tools - APIs
201) online tools - mocking webservices
202) online tools - free app platforms
203) online tools - coding challenge websites
204) online tools - free templatki html
205) online tools - inne
206) online-tools - Q&A (js, vue, github)
207) online-tools - website research

210) nvm dla windows
220) JS Standard Style by feross
222) Linux/ node Sysop:  How to deploy your node app on Linux, 2016
223) ASCII art z dowolnego zdjęcia
224) Kolorowanie komunikatów konsoli
225) Samouczki node'a z cmd  ( dosa )
227) Wersja silnika V8
228) Chrome DevTools debugger - node
229) npx

236) async / await
237) async / await - try / catch

240) async - map
241) async - parallel
242) async - waterfall
243) async - series

245) wget pakietu z npm'a

248) mockaroo.com     (skillBill)
249) mockaroo - GUI   (skillBill)

253) webtask - hello world
254) webtask.io - symulacja bazy danych (skillBill)
255) apka korek  ( webtask + mLab )

259) mLab - tips
260) mLab - hello world
261) mLab - queries przez http
262) mLab - insert / upsert przez API
263) mLab - delete przez http
264) mLab - linki

270) lodash - top 16
271) curl
280) CSP
281) helmet
282) helmet-csp
283) bcrypt

310) node + postgres
311) node + postgres: sql + navicat
312) diag - projekt
313) mac address
314) gitbash - aliasy
315) alasql - sql w js
316) hashcat - passwords cracking

320) deplojka lokalna (serve)
321) zeit now - micro i micro-dev (veturilki - firestore)
322) zeit now - micro i micro-dev (veturilki - mLab)
323) zeit now - hello weird
324) zeit now - jako proxy by nie ujawnić klucza api
325) zeit now - serwer proxy (by ukryć api key)
326) zeit-now - deplojka apki vue
327) zeit now - headery serwera

330) sendgrid - lokalnie
331) sendgrid - webtask

340) firebase - tips
341) firebase - instalacja
342) firebase - instalacja: pliki
343) firebase - authentication

344) firebase - firestore: get
345) firebase - firestore: where, orderBy i limit
346) firebase - firestore: onSnapshot
347) firebase - firestore: update
348) firebase - firestore: set
349) firebase - firestore: doc
350) firebase - firestore: add
351) firebase - firestore: typy danych
352) firebase - firestore: custom objects
353) firebase - firestore: timestamp
354) firebase - firestore: arrayUnion i arrayRemove
355) firebase - firestore: increment numeric value
356) firebase - firestore: admin (node app)
357) firebase - firestore (node app - wioturilki)

370) firebase - functions: tips
371) opencagedata - free geocoding api


_______________________________________________________________________
0) Instalacja

    a) ściągnąc i zainstalowac
    b) odpalic cmd, wjesc do katalogu gdzie chcesz pracowac
    c) wpisz node 1.js (zawierający tylko console.log('Hi all') )
    d) tekst powinien się wyświetlic

    https://blog.heroku.com/archives/2014/3/11/node-habits#2-declare-all-dependencies

    1.  mkdir mojaApka   &&  cd my-node-app  &&   npm init -y

    2.  Specify a start script
           package.json:
             "scripts": {  "start": "node index.js"  }
             "engines": { "node": "4.2.1" }

    3.   Keep dependencies out of git
            echo node_modules >> .gitignore
            git rm -r --cached node_modules
            git commit -am 'ignore node_modules

    4. Use .npmrc env variables to configure npm
            config set save=true               // zawsze przy instalowaniu modułu, rób --save
            config set save-exact=true  // nie pozwól uaktualnic pakietu

    5. Filenames
         Stick with lowercase  (win and osx are not case sensitive, but linux is)

    6.  Cluster your app
            To take advantage of multiple cores and memory beyond 1.5 GB,
            bake Cluster support into your app

    7. Keep track of outdated dependencies
            npm outdated

______________________________________________________________________
00) Clean Code

    1: You're responsible for code quality.

    2: Meaningful names

    3: Write code that expresses intent.

    4: Code should speak for itself. Less comments = less maintenance.

    5: Leave the code better than you found it.

    6: Single-responsibility prinicple (function does 1 thing well; less arguments = better function)
       classes: most methods use most of the class' properties.

    7: Tests (TDD).

    8: Work on big picture skeleton, then fill in the details later
        (interface first, implementation later)

    9: Independent components that can be used in different places

    10: Master your craft

______________________________________________________________________
01) Tips & gotchas

        https://www.toptal.com/nodejs/top-10-common-nodejs-developer-mistakes

      a) Postman - jeśli po send nic się nie dzieje, nagnieć niżej połozony baton 'Cancel Request

      b) Postman - jeśli nie widzisz pola do edycji json'ów, ustaw opcję PUT lub POST

      c) Postman - zapamiętasz obecne ustawienia klikając na Save, a potem tab Collections w prawym górnym

      d) Postman - jeśli w jsonie jest "2" jest castowane na

      e) Studio 3T - refresh: F5 lub ctrl + r

      f) Studio 3T - kasowanie rekordu/ów: F8 lub del

      g) Joi - plugin validate
                const result = validate(req.body)
                if(result.error) res.status(400).send(result.error.details[0].message)

      h) express - res.end() zwraca ekran w Postmanie (a nie 'Loading ...)

      i) Terminal - jeśli kod jest na pewno dobry, a wywala błąd,
                    zaznacz wszystko (ctrl+a), wytnij (ctrl+x) i wklej (ctrl+v)

      j) Studio 3T - można kopiować kolekcje między bazami
                     Stań na jej nazwie ctrl + c, stań na innej bazie i ctrl + v

      k) mongoose: DeprecationWarning: Custom inspection function on Objects
                   Downgrade node'a 10 do 9

      l) mock

          const arr = [
            { name: 'adam', age: 11, city: 'wwa'},
            { name: 'adam', age: 11, city: 'gda'},
            { name: 'adam', age: 11, city: 'gda'},
            { name: 'adam', age: 22, city: 'poz'},

            { name: 'jan', age: 11, city: 'wwa'},
            { name: 'jan', age: 11, city: 'poz'},
            { name: 'jan', age: 22, city: 'gda'},
            { name: 'jan', age: 22, city: 'gda'},

            { name: 'piotr', age: 33, city: 'poz'},
            { name: 'piotr', age: 33, city: 'poz'},
            { name: 'piotr', age: 33, city: 'gda'},
            { name: 'piotr', age: 22, city: 'gda'}
          ]

      m) Google oAuth2

          clientID: '627918100926-a3b18642lrgeifcmci8vlr61d1ga80rp.apps.googleusercontent.com',
          clientSecret: 'qZXqEPUMKPfR0HgaTRI8pUm5'

      n) interwiucha

          how to integrate certain modules with other systems.
          I want them to explain to me how certain systems, processes work
          How would you debug this ?
          clear ability to identify and resolve potential issues.

          data flow of a Node app
          streams and buffers
          asynchronous programming and asynchronous behavior
          security - helmet, Amazon/Google/Azure,
          performance - Amazon/Google/Azure, async
          scaling - Amazon/Google/Azure

      o) EADDRINUSE
          Po dostaniu takiego błędu, restartnij VS Code'a

      p) jest
          Wersja 22.4.4 jest po pierwsze szybsza od 23.6,
          a po drugie, wyświetla zawarty w teście console.log

      q) aliasy
          n = node app
          nn = nodemon app

______________________________________________________________________
02) VPSy

        a) ovh: 2G RAM / 20 GB SSD = 13.50 zł / mc
        b) aruba cloud:  1G RAM  =   4 zł / mc
            chcą nr tel, a jak im się nie podobają dane osobowe, to zawieszają konto

_______________________________________________________________________
03) yarn - intro

         youtube.com/watch?v=hMk_9RjX5KE
         yarnpkg.com/en/docs/usage

         Korzysta z package.json stworzonego przez npm'a,
         chyba że odpalisz yarn init - wtedy stworzy własny taki sam jak npm'owy
         ( oraz yarn.lock zawierający spis wszystkich dokładnych wersji plików dependency wraz z ich haszami SHA-1)

         Szybszy od npm'a, bo mimo że ciągnie z tych samych serwerów,
         ciągnie pare plików równolegle, a npm szeregowo
         Poza tym, yarn ma lokalnego kesza, więc nawet bez neta, zainstaluje pakiety

         Instalacja świeżego projektu z Reactem 15.4, webpackiem 2.2 i webpack-dev-server'em 2.2:
             npm i   -  170s
             yarn      -  104s  // 1-sza instalka 40% szybciej
             yarn      -  45s    // kolejne 75% szybciej

         Spójniejszy - tworzy plik yarn.lock. Dzięki temu, nie ma jak przy npm'ie ryzyka,
         że ktoś na postawie tego samego pliku package.json zainstaluje inne wersje pakietów, np
            "express": "^4.0.0"
           w chwili początkowej może oznaczać 4.0.5 a tydzień później 4.1.10
_______________________________________________________________________
04) yarn - komendy

         a) ściągnij i zainstaluj yarn.msi z:
                https://yarnpkg.com/en/docs/install

         b) yarn  --version
         c) mkdir nazwaProjektu && cd nazwaProjektu
         d) yarn init    // lub yarn init  -y    -  tworzy package.json i yarn.lock
         e) yarn add  webpack@2.2.0-rc.0 webpack-dev-server@2.2.0-rc.0  // bez --save czy --save-dev

         yarn                                 // lub yarn install - instaluje wszystkie pliki z package.json
         yarn global add pakiet  // ściąga go do kesza

         yarn list                      // listuje _wszystkie_ dependency bieżącego projektu
         yarn list --depth=0   // listuje topowe dependency bieżącego projektu

         yarn cache ls       // pokazuje wszystkie pakiety w keszu yarna
         yarn cache clean    // czyści kesz. Zapełni go najbliższa komenda yarn  ( yarn install )
         yarn cache dir      // lokalizacja kesza:  C:\Users\makn.MOBICAPL\AppData\Local\Yarn

         yarn upgrade-interactive  // gui listujące i uaktualniające starsze wersje pakietów
                                                   // yellow: packages installed at their package.json version,
                                                   // red: packages that don't even match the current package.json (e.g. not installed)

         yarn upgrade [package]  // uaktualnia go do najnowszej wersji ale zgodnie z package.json
         yarn upgrade [package]@[version]

         yarn self-update   // uaktualnia sam siebie

         yarn remove [package]

         yarn info react   // wypisuje wszystkie wersje pakietu z timestampami i fure innych info

         yarn why lodash //   - "babel-cli" depends on it
                                           - "webpack#async" depends on it ...

__________________________________________________________________________________________________________
05) npm - komendy

    a) npm list -g --depth 0   // lista wszystkich pakietów zainstalowanych globalnie (bez ich deps)

__________________________________________________________________________________________________________
06) require (module.exports)

      Zachodzą 2 przypadki przy eksporcie:
        a) gdy eksportowana jest tylko 1 funkcja
        b) gdy conajmniej dwie

      Najbezpieczniej używać składni:

        export:
          module.exports.nazwaFunkcji = nazwaFunkcji

        import:
          const nazwaPlikuZKtóregoByłExport = require(nazwaPlikuZKtóregoByłExport)
          nazwaPlikuZKtóregoByłExport.nazwaFunkcji()

    - a) 1 funkcja: export.js  ------------------------------------------------------

          function car() { return 'honda' }

          module.exports.car = car
          lub
          module.exports = car


    -- a) 1 funkcja: import.js  ------------------------------------------------------

          const app = require('./app')

          i)  app.car()
          ii) app()

    -- b) 2+ funkcje: export.js  ------------------------------------------------------

          const car = () => 'honda'
          const name = () => 'mike'

          module.exports.car = car
          module.exports.name = name

    -- b) 2+ funkcje: import.js  ------------------------------------------------------

          const { car, name } = require('./app')

          console.log(car())
          console.log(name())

_________________________________________________________________________________________________________
07) modules: plik CONSTANTS

    Przykład jak tworzyć plik ze stałymi i złożonymi z nich stringami

    ----------------------------------------------------------
    const CONSTANTS = {
      GDZIETURILO: 'http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL',

      MLAB: 'https://api.mlab.com/api/1/databases/',
      COLLECTION_NAME: 'wioturillo',
      STATIONS_LIST: 'wioturillo-lista',
      API_KEY: 'lalalala'
    }

    CONSTANTS.MLAB_PREFIX = CONSTANTS.MLAB + CONSTANTS.COLLECTION_NAME + '/collections/' + CONSTANTS.COLLECTION_NAME + '?',
    CONSTANTS.MLAB_LISTA = `${CONSTANTS.MLAB}${CONSTANTS.COLLECTION_NAME}/collections/${CONSTANTS.STATIONS_LIST}?`+ CONSTANTS.API_KEY

    module.exports.CONSTANTS = CONSTANTS

_________________________________________________________________________________________________________
11) request

        npmjs.com/package/request
        npmcompare.com/compare/axios,got,request,reqwest,superagent

        Najpopularniejsza biblioteka node'a, do ściągania danych z serwera
        Prosta, obsługuje https, redirecty, autentykację  ( w tym OAuth 1 ) ,
        custom headery ( user agent )  i streamy

        Dobrze nadaje się do pojedyńczego requesta
        Przy więcej niż 1 lepiej użyć axiosa, bo chodzi na promisach i ma prostszą składnię

        res - cała odpowiedź z serwera  ( łącznie z nagłówkami http )
        body - sama właściwa odpowiedź

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        const request = require ( 'request' )
        const url = 'http://jsonplaceholder.typicode.com/users/1'

        request ( url, function ( err, res, body ) {
            if ( err )  {
                console.log( err )
                return
            }
     
            console.log( body )

        } )

 -  -  -  -  -  -  -  -  -  -  -  -przykład streamu  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

        request ( url ).pipe ( fs.createWriteStream ( 'juzek.txt' ) )   // zapisuje do pliku

_________________________________________________________________________________________________________
12) request  - opakowany w promisa

      Opakowanie requesta w promisa.
      Porównaj to samo z axiosem  ( poniżej )

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
const request = require ( 'request' )
const url1 = 'http://jsonplaceholder.typicode.com/users/1'
const url2 = 'http://jsonplaceholder.typicode.com/users/2'

let get1 = function (  )  {
    return  new Promise ( function ( resolve, reject ) {
        request ( url1, function ( err, res, body ) {
            if ( err ) return reject ( err )
            resolve ( body )
        } )
    } )
    .then ( function ( res ) {
        console.log( JSON.parse ( res ).id )
    } )
}
_________________________________________________________________________________________________________
13) request  - opakowany w promisa: multiple requests

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
const request = require ( 'request' )
const url1 = 'http://jsonplaceholder.typicode.com/users/1'
const url2 = 'http://jsonplaceholder.typicode.com/users/2'

let get1 = function (  )  {
    return  new Promise ( function ( resolve, reject ) {
        request ( url1, function ( err, res, body ) {
            if ( err ) return reject ( err )
            resolve ( body )
        } )
    } )
    .then ( function ( res ) {
        console.log( JSON.parse ( res ).id )
    } )
}

let get2 = function (  )  {
    return  new Promise ( function ( resolve, reject ) {
        request ( url2, function ( err, res, body ) {
            if ( err ) return reject ( err )
            resolve ( body )
        } )
    } )
    .then ( function ( res ) {
        console.log( JSON.parse ( res ).id )
    } )
}

Promise.all (  [ get1 (  ), get2 (  ) ] )
    .then ( function (  ) {
        console.log( 'All finished' )
    } )

_________________________________________________________________________________________________________
14) fetch

      var fetchUrl = require("fetch").fetchUrl

      fetchUrl("http://jsonplaceholder.typicode.com/posts", function(error, meta, body) {
          console.log(body.toString())
      })

      Zamiast fragmentu /posts, można użyć któregoś z poniższych:

      /users  10 items
      /albums 100 items
      /posts  100 items
      /todos  200 items
      /comments   500 items
      /photos 5000 items

 -  -  -  - Pobieranie ilości veturilków na Wierzbnie  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    fetchUrl("http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL", function(error, meta, body) {
        var resp = body.toString()

        var stacja = resp.indexOf ( 'Wierzbno' )
        var bikes = resp.indexOf ( 'bikes=', stacja )

        console.log( resp.substr ( stacja, 43 )  )
        console.log( parseInt( resp.substr ( bikes + 7, 2 ) )  )
    })

_________________________________________________________________________________________________________
15) https

        Metoda ściągania danych z urla https-owego:

        var url = 'https://en.wikipedia.org/wiki/Abraham Lincoln'

        https.get(url, function(res) {
          var body = ''
          res.setEncoding('utf8')

          res.on('data', function(chunk) {
              body += chunk
          })

          res.on('end', function() {
              cb(body)
          })
_________________________________________________________________________________________________________
16) axios

      npmjs.com/package/axios

      Najpopularniejsza z opartych na promisach biblioteka node'a,
      do ściągania danych z serwera

      Działa w nodzie i w przeglądarce
      3-4 razy szybsza niż promise z requestem  ( w ms ) :

        iso-fetch: 21
        request: 15
        request z promisem: 8
        axios: 3
        fs: 2   ( odczyt z lokalnego pliku )

      Zwrócony z serwera res.data, jest już sparsowany na jsona
      Umie przerywać i kasować requesty

      -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      const axios = require ('axios')
      const url = 'http://jsonplaceholder.typicode.com/users/1'

      axios.get(url)
        .then (res => console.log (res.data.address))
        .catch (err => console.table (err))

      -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

      axios.delete accepts two parameters: `url` and optional `config`:

        axios.delete(url, { data: { foo: "bar" } })

      post, put, and patch accept 3 parameters: url, data and config

      axios.put(url, { foo: "bar" })

_________________________________________________________________________________________________________
17) axios - multiple requests

      Wykonanie kilku requestów i wykonanie dalszego kodu, dopiero kiedy
      wykonają się wszystkie

      Jeśli nie wykona się choć jeden - zostanie wyrzucony błąd

      -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      const axios = require ('axios')
      const url1 = 'http://jsonplaceholder.typicode.com/users/1'
      const url2 = 'http://jsonplaceholder.typicode.com/users/2'
      const url3 = 'http://jsonplaceholder.typicode.com/users/3'

      const get1 = () => axios.get(url1)
      const get2 = () => axios.get(url2)
      const get3 = () => axios.get(url3)

      axios.all([get1(), get2(), get3()])
        .then(axios.spread( (get1, get2, get3, get4, get5, get6) =>  {
          console.log('get1 = ', get1.data.id) // Leanne Graham
          console.log('get2 = ', get2.data.id) // Leanne Graham
          console.log('get3 = ', get3.data.id) // Ervin Howell
        }))
        .catch(err => console.log(err))

_________________________________________________________________________________________________________
18a) fs - writeFileSync, readFileSync

      const fs = require( 'fs' )
      const file = fs.openSync('./dupa.txt', 'a')

      fs.writeFileSync ( file, 'dupa')  // lub   fs.appendFileSync ( file, 'dupa' )

      console.log ( "Data written successfully !" )
      console.log ( "Let's read newly written data: ..." )

      const data = fs.readFileSync ( file )
      console.log ( "File read: " + data.toString ( ) )

      fs.closeSync ( file )
_________________________________________________________________________________________________________
18b) fs - readFile i readFileSync

       const fs = require('fs')

       const config = JSON.parse(fs.readFileSync('config.json'))

       fs.readFile('./server.js', (err, data) => { console.log(data) })  // dane binarne
       fs.readFile('./server.js', (err, data) => { console.log(data.toString() })  // dane utf8
       fs.readFile('./server.js', 'utf8', (err, data) => { console.log(data) })    // dane utf8
_________________________________________________________________________________________________________
19) fs - watchFile

    const fs = require('fs')

    fs.watchFile("config.json", function() {
      config = JSON.parse(fs.readFileSync("./config.json"))
      port = config.port
      console.log('Port = ' + port)
      server.close()
      server.listen(port, function() {
          console.log('NOW listening on port ' + port)
      })
    })
_________________________________________________________________________________________________________
20) http

      Tworzenie niskopoziomowego serwera http
      Express jest nakładką na http

      -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      const http = require('http')
      const fs = require('fs')
      const host = '127.0.0.1'
      const port = 3333

      const config = JSON.parse( fs.readFileSync('config.json') )
      host = config.host
      port = config.port

      const server = http.createServer(function(req, res) {
          console.log('req.url = ' + req.url)
          res.writeHead(200, {'Content-Type' : 'text/plain'})
          res.end('Dupa')
      })

      server.listen(port, host, function() {
          console.log('Listening on ' + host + ':' + port)
      })
      ----------------------
          config.json

              {
                  "port": 1338,
                  "host": "127.0.0.1"
              }
_______________________________________________________________________________________________________________
21) http - routing

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    var http = require('http')
    var fs = require('fs')
    var config = JSON.parse(fs.readFileSync('config.json'))
    var host = config.host
    var port = config.port

    var server = http.createServer(function(req, res) {
        console.log('req.url = ' + req.url )

        fs.readFile("./" + req.url, 'utf8', function(err, data) {
            if(err) {
                res.writeHead(400, { "Content-Type": "text/plain"})
                res.end('Sorry, file not found')
            }
            else {
                res.writeHead(200, { "Content-Type": "text/html"})
                res.end(data)
            }
        })
    })

    server.listen(port, host, function() {
        console.log('Słucham na ' + host + ' : ' + port)
    })
    ----------- hello.html ----------------

        <!DOCTYPE html>
        <html>
        <head>
            <title></title>
        </head>
        <body>
        <h2>Tu plik hello.html</h2>
        </body>
        </html>

    ----------- world.html ----------------

        <!DOCTYPE html>
        <html>
        <head>
            <title></title>
        </head>
        <body>
        <h2>Tu plik world.html</h2>
        </body>
        </html>

___________________________________________________________________________________
22) promise

    console.log(1)

    getUser(2).then(user => console.log(user))
              .catch(err => console.log(err))

    console.log(3)

    function getUser(id) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('Reading a user from db ..')
          resolve({ id: id, githubUsername: 'Mosh' })
          // reject(new Error('awaria !'))  // pending => rejected
        }, 0)
      })
    }

___________________________________________________________________________________
23) settled promise

    Na potrzeby unit testów często się ich używa

    const p = Promise.resolve({ id: 1 })
    p.then(result => console.log(result)) // { id: 1 }

    const q = Promise.reject(new Error('coś padło ..'))
    q.catch(err => console.log(err)) // Error: coś padło ..

___________________________________________________________________________________
24) promise.all

      Wykonanie czegoś, pod warunkiem, że oba promisy zostaną wykonane

      const p1 = new Promise(resolve => {
        setTimeout(() => {
          console.log('Async operation 1 ..')
          resolve(11)
        }, 1);
      })

      const p2 = new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('Async operation 2 ..')
          // resolve(12)
          reject(new Error('coś nawaliło ..'))
        }, 1);
      })

      Promise.all([p1, p2])
        .then(result => console.log(result))  // [ 11, 12 ]
        .catch(err => console.log('Wystapił eror: ',err))

___________________________________________________________________________________
25) promise.race

      Wykonanie czegoś, jak tylko któryś z promisów zostanie wykonany

      const p1 = new Promise(resolve => {
        setTimeout(() => {
          console.log('Async operation 1 ..')
          resolve('p1')
        }, 2)
      })

      const p2 = new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('Async operation 2 ..')
          resolve('p2')
        }, 1);
      })

      Promise.race([p1, p2])
        .then(result => console.log(result))
        .catch(err => console.log('Wystapił eror: ',err))

___________________________________________________________________________________
26) sekwencja promisów

      Przykład wykonywania promisów sekwencyjnie (szeregowo)

      fun_1()
        .then(fun_2())
        .then(fun_3())
        .catch(err => console.log(err));

      console.log(1)
      fun_1()
      console.log(3)

      function fun_1() {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve()
            console.log("fun_1")
          }, 0);
        });
      }

      function fun_2() {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve()
            console.log("fun_2")
          }, 0)
        })
      }

      function fun_3() {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve()
            console.log("fun_3")
          }, 0)
        })
      }

_________________________________________________________________________________________________________
27) async / await - sekwencyjnie

      Ładniejsza składnia promisów, robiąca wrażenie wykonywanej synchronicznie
      'await', musi być w funkcji poprzedzonej dekoratorem 'async'
      Axios zwraca promisa

    ---------------------------------------------

      const axios = require('axios')

      async function f1() {
        return axios.get('https://jsonplaceholder.typicode.com/posts/1')
          .then(res => {
          console.log(res.data.id)
        })
        .catch(err => console.log('Erroras:', err))
      }

      async function f2() {
        return axios.get('https://jsonplaceholder.typicode.com/posts/2')
          .then(res => {
          console.log(res.data.id)
        })
        .catch(err => console.log('Erroras:', err))
      }

      async function f3() {
        return axios.get('https://jsonplaceholder.typicode.com/posts/3')
          .then(res => {
          console.log(res.data.id)
        })
        .catch(err => console.log('Erroras:', err))
      }

      async function doAll() {
        await f1()
        await f2()
        await f3()
      }

      async function demo() {
        await doAll()
        console.log("4")
      }

      // demo()

      doAll()  // 1,2,3 - zawsze


_________________________________________________________________________________________________________
28) async / await - try / catch z fetch'em

      Obsługa błędów w async/await robiona przez blok trajkacza:

      yarn init -y && yarn add axios json-server

    ------------- app.js ----------------------------

      const axios = require('axios')

      function fun_1() {
        axios.get('https://jsonplaceholder.typicode.com/posts/1')
          .then(res => {
            console.log(res.data.id, res.data.title)
          })
          .catch(err => console.log('Erroras:', err))
      }

      function fun_2() {
        axios.get('https://jsonplaceholder.typicode.com/posts/2')
          .then(res => {
            console.log(res.data.id, res.data.title)
          })
          .catch(err => console.log('Erroras:', err))
      }

      function fun_3() {
        axios.get('https://jsonplaceholder.typicode.com/posts/3')
          .then(res => {
            console.log(res.data.id, res.data.title)
          })
          .catch(err => console.log('Erroras:', err))
      }

      async function x() {
        try {
          const a1 = await fun_1()
          const a2 = await fun_2()
          const a3 = await fun_3()
        }
        catch (err) {
          console.log('Wystapił błąd: ', err)
        }
      }

      x()
_______________________________________________________________________
29) express - wbudowane middleware'y: static, express.json

      Middleware express.static() - ustawia ścieżkę do plików, których treść
      ma być wyświetlana (np plik tekstowy czy html'owy)

      Jeśli juzek wpisze do adresu:
        http://localhost:3000/readme.txt

      .. serwer znajdzie ten plik w podkatalogu /public i wyświetli na ekranie

      ------------------------------------------------
        const express = require('express')
        const app = express()

        app.use(express.static('public'))
        app.use(express.json())  // użyj obu, jeśli nie wiadomo w jakiej formie przyjdą dane
        app.use(express.urlencoded({ extended: true }))
        app.get('/', (req, res) => res.send('dupa'))

        app.listen(3000)
      ------------------------------------------------

      Inny mware to express.json() i json.urlencoded(),
      które parsują przychodzące dane w formie json'a czy urlencoded

      Od wersji 4.16 (paź 17), jest on z powrotem wbudowany w expresa
      Nie trzeba więc ściągać osobno body-parsera
_______________________________________________________________________
30) express - custom middleware

      To funkcja, której wywołanie znajduje się w środku 'app.use()'

      Middlewary wykonywane są synchronicznie na samym starcie apki
      Każdy mware musi się kończyć komendą: next() - ktora powoduje przejście
      do kolejnego mwara.

      Dlatego ostatnim z argumentów funkcji mwarowej, jest next

        function mware(req, res, next) {
          try {
            (...)
            next()
          }
          catch(err => { ... })
        }

      Poniżej - dowód na synchroniczność mwarów:
      mimo 3-sekundowego setTimeouta w m2.js,
      zamiast spodziewanej kolejności: m1, m3, m2,
      kolejno odpalą się: m1, m2, m3

      Mwary odpalają się dopiero gdy juzek odpali którąkolwiek ze ścieżek
      Tak więc, przy braku ścieżki, czy nieuruchomionym serwerze,
      mwary się nie odpalą

      ------- app.js -----------------------------------------

        const m1 = require('./startup/m1')
        const m2 = require('./startup/m2')
        const m3 = require('./startup/m3')

        const express = require('express')
        const app = express()

        app.use(m1)
        app.use(m2)
        app.use(m3)

        app.get('/', (req, res) => { res.send('Helo Wierd !') })

        app.listen(3000)

      ------ /startup/m1 ------------------------------------------

        module.exports =  (req, res, next) => {
          console.log('m1')
          next()
        }

        module.exports = m1

      ------ /startup/m2 ------------------------------------------

        module.exports =  (req, res, next) => {
          setTimeout(() => {
            console.log('m2')
            next()
          }, 3000)
        }

      ------ /startup/m3 ------------------------------------------

        module.exports = (req, res, next) => {
         console.log('m3')
          next()
        }

_______________________________________________________________________
31) express - get i send

      Udemy - Node Complete Guide to Build RESTful APIs

      a) yarn init
      b) git init
      c) yarn add express
      d) zrob .gitignore:
          node_modules/
          coverage/

      -------------------------------------------------

      const express = require('express')
      const app = express()

      app.get('/', (req, res) => {
        res.send('Helo weird !')
      })

      // app.listen(3000)
      app.listen(3000, () => console.log('Serwer zaczął działać ..'))

_______________________________________________________________________
32) express - status i sendStatus

      HTTP status ranges in a nutshell:
        1xx: hold on (timeout, conn refused)
        2xx: here you go (ok)
        3xx: go away (redirect)
        4xx: you messed up (client error)
        5xx: I messed up (server error)

      401 Unauthorized - gdy nie został wysłany token
      403 Forbidden    - gdy jest token ale brak np admin = true

      res.status(403).end()
      res.status(400).send('Bad Request')
      res.status(404).sendFile('/absolute/path/to/404.png')

      res.sendStatus(200) // equivalent to res.status(200).send('OK')
      res.sendStatus(400) // equivalent to res.status(400).send('Bad request')
      res.sendStatus(403) // equivalent to res.status(403).send('Forbidden')
      res.sendStatus(404) // equivalent to res.status(404).send('Not Found')
      res.sendStatus(500) // equivalent to res.status(500).send('Internal Server Error')

      app.disable("x-powered-by");
      Disabling the x-powered-by option disables the setting of the header.
      Disabling this will make it a little harder for hackers.
_______________________________________________________________________
33) express - query z parametrem

      Odpal http://localhost:3000/0

      -----------------------------------------------------------
      const express = require('express')
      const app = express()

      const users = [
        { id: 0, name: 'jan', age: 11, city: 'wwa'},
        { id: 1, name: 'adam', age: 22, city: 'gda'}
      ]

      app.get('/:id', (req, res) => {
        const user = users.find(item => item.id === parseInt(req.params.id))
        user ? res.send(user) : res.status(404).send('Brak juzka o tym id')
      })

      app.listen(3000, () => console.log('Server on 3000 ...'))
_______________________________________________________________________
34) express - post, express.json, postman

      i) odpal poniższy kod: nodemon
          (domyslnie szuka index.js, więc można pominąć)

      a) ustaw vs code REST-client na:
          POST http://localhost:3000
          Content-Type: application/json
          Accept: application/json

          {
            "name": "ania1"
          }

      b) nagnieć batona Send

      c) w oknie poniżej wyswietli wynik

      --------- index.js --------------------------------

      const express = require('express')
      const app = express()

      app.use(express.json())  // musi być, by zparsować przychodzącego jsona

      const users = [
        { id: 0, name: 'jan', age: 11, city: 'wwa'},
        { id: 1, name: 'adam', age: 22, city: 'gda'}
      ]

      app.post('/add', (req, res) => {
        const user = {
          id: users.length,
          name: req.body.name,
          city: req.body.city
        }

        users.push(user)
        res.send(users)
      })

      app.listen(3000, () => console.log('Serwer na 3000 ..'))

_______________________________________________________________________
35) express - express.urlencoded

      Do parsowania danych wysyłanych z tabeli HTML batonem Submit,
      używa się middleware'a express.urlencoded

      i) odpal poniśzy kod: nodemon
          (domyslnie szuka index.js, więc można pominąć)

      a) ustaw vs code REST-client na:
          POST http://localhost:3000
          Content-Type: application/json
          Accept: application/json

          {
            "name": "ania1"
          }

      b) nagnieć batona Send

      c) w oknie poniżej wyswietli wynik

      ------------------------------------------------
      const express = require('express')
      const app = express()

      app.use(express.urlencoded({
        extended: true
      }))

      const courses = [
        { id: 1, name: 'math' },
        { id: 2, name: 'physics' },
        { id: 3, name: 'music' }
      ]

      app.post('/add', (req, res) => {
        const course = {
          id: courses.length + 1,
          name: req.body.name
        }

        courses.push(course)
        res.send(courses)
      })

      app.listen(3000)

_______________________________________________________________________
36) express - walidacja requestów (joi)

      Do walidacji przychodzących parametrów requesta, uzywa się Joi
      Patrz też 177)

      yarn add joi

      a) ustaw vs code REST-client na:
          POST http://localhost:3000
          Content-Type: application/json
          Accept: application/json

          {
            "name": "ania1"
          }

      b) nagnieć batona Send

      c) w oknie poniżej wyswietli wynik:
           "name" length must be at least 3 characters long

        albowiem min długość stringa = 3
          name: Joi.string().min(3).max(5).required()

  ------------------------------------------------------------

      const Joi = require('joi')
      const express = require('express')
      const app = express()

      app.use(express.json())

      const users = [
        { name: 'jan', age: 11, city: 'wwa'},
        { name: 'adam', age: 22, city: 'gda'}
      ]

      const schema = {
        name: Joi.string().min(3).required()
      }

      app.post('/add', (req, res) => {
        const isValid = Joi.validate(req.body, schema)
        if (isValid.error) return res.send(isValid.error.details[0].message)

        const user = {
          id: users.length + 1,
          name: req.body.name
        }

        users.push(user)
        res.send(users)
      })

      app.listen(3000, () => console.log('*** Serwer na 3000 ***'))

_______________________________________________________________________
37) express - put

      a) ustaw vs code REST-client na:
          PUT http://localhost:3000/put/2
          Content-Type: application/json
          Accept: application/json

          {
            "name": "śmonda"
          }

      b) nagnieć batona Send

      c) w oknie poniżej wyswietli wynik:
           { id: 123, name: 'math' },

      ---------------------------------------------------
      const joi = require('joi')
      const express = require('express')
      const app = express()

      app.use(express.json())

      const courses = [
        { id: 1, name: 'math' },
        { id: 2, name: 'physics' },
        { id: 3, name: 'music' }
      ]

      const schema = {
        id: joi.any(),
        name: joi.string().min(3).required()
      }

      app.put('/put/:id', (req, res) => {
        const course = courses.find(course => course.id === parseInt(req.params.id))
        if (!course) return res.status(404).send('Nima kursu o takim id')

        const result = joi.validate(course, schema)
        if(result.error) return res.status(400).send(result.error.details[0].message)

        course.name = req.body.name
        res.send(courses)
      })

      app.listen(3000, () => console.log('*** Server na 3000 ***'))

_______________________________________________________________________
38) express - delete, helmet, morgan

      a) ustaw Postmana na
          DELETE
          http://localhost:3000/api/courses/1
          Body: dowolnie

      b) nagnieć batona Send

      c) w oknie poniżej lub chromie (localhost:3000) ogladaj wynik

      helmet - ustawia dodatkowe headery dla większego bezpieczeństwa

      morgan - loguje treść przychodzących requestów na ekran lub plik, np:
                GET /api/courses/ 200 74 - 10.441 ms

      ----------------------------------------------------------------
      const express = require('express')
      const app = express()
      const helmet = require('helmet')
      const morgan = require('morgan')

      app.use(helmet.frameguard("sameorigin")) // or  app.use(helmet.frameguard("deny")) - prevents clickjacking (iframe)
      app.use(helmet.noSniff())               // widząc kod js w pliku .txt, nie próbuj zgadywać, że jest to plik .js
      app.use(helmet.hidePoweredBy())         // wycina nagłówek x-powered-by, więc hakier nie wie że to express

      app.use(morgan('tiny'))  // combined, common, dev, short, lub tiny

      const courses = [
        { id: 0, name: 'math' },
        { id: 1, name: 'physics' },
        { id: 2, name: 'music' }
      ]

      app.get('/', (req, res) => res.send(courses))

      app.delete('/:id', (req, res) => {
        const course = courses.find(course => course.id === parseInt(req.params.id))
        if (!course) return res.status(404).send('Nima kursu o takim id')

        courses.splice(req.params.id, 1)
        res.send(courses)
      })

      app.listen(3000)

___________________________________________________________________________________
38a) express - morgan

      Dzięki pakietowi rotating-file-stream, można logi morgana zapisywać
      do pliku o zadanym interwale rotacji (tu: 1 dzień, potem nadpisywanie)

    -------------------------------------------------------------------

      const express = require('express')
      const helmet = require('helmet')
      const morgan = require('morgan')
      const fs = require('fs')
      const path = require('path')
      const rfs = require('rotating-file-stream')

      const app = express()

      app.use(morgan('tiny'))

      var logDirectory = path.join(__dirname, 'log')

      // ensure log directory exists
      fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)

      // create a rotating write stream
      var accessLogStream = rfs('access.log', {
        interval: '1d', // rotate daily
        path: logDirectory
      })

      // setup the logger
      app.use(morgan('combined', { stream: accessLogStream }))

      const courses = [
        { id: 0, name: 'math' },
        { id: 1, name: 'physics' },
        { id: 2, name: 'music' }
      ]


      app.get('/', (req, res) => res.send(courses))

      app.get('/:id', (req, res) => {
        console.log(req.params.id)
        const course = courses.find(course => course.id === parseInt(req.params.id))
        if (!course) return res.status(404).send('Nima kursu o takim id')

        courses.splice(req.params.id, 1)
        res.send(courses)
      })

      app.listen(3000, () => console.log('Serwer na 3000 ..'))

___________________________________________________________________________________
39) express - zmienne środowiskowe

    W gitBaszu, zmienne ustawia się komendą export, np
      export PORT=7000 (bez spacji wokół równasia)
      export PORT=  - kasuje zmienną z pamięci

    Z terminala czyta się je komendami:
      printenv - wyświetlane są wszystkie i
      printenv PORT - wyświetlana jest wartość konkretnej

    Z poziomu skryptu, do czytania służy komenda process.env:
      process.env.PORT

___________________________________________________________________________________
40) express - config

    // Udemy - Node Complete Guide to Build RESTful APIs: #5

    Najlepszy sposób ustawiania konfiguracji expressa - pakiet config
      yarn add config

    Podstawowym plikiem konfiguracyjnym jest: config/default.json
    Nadpisują go: config/development.json lub config/production.json
    Nazwa katalogu i nazwy plików muszą być j/w

    Jeśli istnieją wszystkie 3, a zmienna NODE_ENV nie jest ustawiona, domyślnym trybem
    jest 'development', więc zawartość tego pliku będzie wyświetlona


    a) stwórz w /config json'ów:
        default, development, production i custom-environment-variables

    b) w konsoli VSCode (lub ConEmu), wpisz:
         export NODE_ENV=development
           i odpal apkę:
         nodemon app

         Analogicznie, zmień NODE_ENV i ponownie odpal apke
           export NODE_ENV=development

         Serwer wyświetli zdefiniowane wyżej nazwy i mail-serwery

         Z ręki wbij:
           export export app_password=12345
         i odpal apkę

         Wyświetli się: Password = 12345

    c) wyświetlanie wartości zmiennych środowiskowych
        printenv NODE_ENV

    ---- /config/default.json ------------

      {
        "name": "My App"
      }

    ---- /config/development.json ------------

      {
        "name": "My App - Dev",
        "mail": {
          "host": "dev-mail-server"
        }
      }

    ---- /config/production.json ------------

      {
        "name": "My App - Prod",
        "mail": {
          "host": "prod-mail-server"
        }
      }

    ---- /config/custom-environment-variables.json -------

      {
        "mail": {
          "password": "app_password"
        }
      }

    ------------ /app.js ----------------------------------

    const config = require('config')
    const morgan = require('morgan')
    const express = require('express')

    const app = express()
    app.use(morgan('tiny'))

    console.log('\n*** App name = ', config.get('name'))
    console.log('\n*** Mail server = ', config.get('mail.host'))
    console.log('\n*** Password = ', config.get('mail.password'))

    if (app.get('env') === 'development') {
      app.use(morgan('tiny'))
      console.log('Włączam morgana ...');
    }

    app.listen(3000, console.log('\n*** Serwer na 3000 ..'))

___________________________________________________________________________________
41) express - modularyzacja (export / import)

      Udemy - Node Complete Guide to Build RESTful APIs: #5

       Modularyzacja apki expressa (dzielenie na moduły)
       Poniżej, wszystkie zapytania o 'cars', czyli:
         /cars i
         /cars/:id
       przeniosłem do pliku /routes/courses jako ścieżki względne
       do tej użytej w app.use('/cars)

       Tzn w cars.js pomijałem prefix '/cars' pełnej ścieżki

       W app.js zaimportowałem ten plik i użyłem w middlewarze:
          const cars = require('./routes/cars')

    ------------ /app.js ----------------------------------

      const express = require('express')
      const app = express()
      const cars = require('./routes/cars')

      app.use(express.json())
      app.use('/cars', cars)

      app.listen(3000)

    ------------ /routes/cars.js ----------------------------------

      const express = require('express')
      const router = express.Router()

      const cars = [
        { id: 1, name: 'abc' },
        { id: 2, name: 'def' },
        { id: 3, name: 'ghi' }
      ]

      router.get('/', (req, res) => {
        console.log(cars)
        res.send(cars)
      })

      router.put('/:id', (req, res) => {
        const car = cars.find(car => car.id === parseInt(req.params.id))
        if(!car) res.status(400).send('Kupsztal')

        car.name = req.body.name
        res.send(cars)
      })

      module.exports = router
_______________________________________________________________________________________________________________
42) express - cookie-parser

    yarn add cookie-parser

    ----------- app.js ----------------------------------------------

      const express      = require('express')
      const cookieParser = require('cookie-parser')

      const app = express()
      app.use(cookieParser())

      app.get('/', function(req, res) {
        console.log('Cookies: ', req.cookies)  // Cookies:  { Cho: 'Kim', Greet: 'Hello' }
      })

      app.listen(3000, () => console.log('Serwer na 3000..'))
    ------------------------------------------------------------------

    curl localhost:3000 --cookie "Cho=Kim;Greet=Hello"

_______________________________________________________________________________________________________________
43a) cookies

      Cookies are key/value pairs used by websites to store state information on the browser. Say you have a website (example.com), when the browser requests a webpage the website can send cookies to store information on the browser.

      Browser request example:

      GET /index.html HTTP/1.1
      Host: www.example.com
      Example answer from the server:

      HTTP/1.1 200 OK
      Content-type: text/html
      Set-Cookie: foo=10
      Set-Cookie: bar=20; Expires=Fri, 30 Sep 2011 11:48:00 GMT
      ... rest  of the response
      Here two cookies foo=10 and bar=20 are stored on the browser. The second one will expire on 30 September. In each subsequent request the browser will send the cookies back to the server.

      GET /spec.html HTTP/1.1
      Host: www.example.com
      Cookie: foo=10; bar=20
      Accept: */*
      SESSIONS: Server side cookies
      Server side cookies are known as "sessions". The website in this case stores a single cookie on the browser containing a unique Session Identifier. Status information (foo=10 and bar=20 above) are stored on the server and the Session Identifier is used to match the request with the data stored on the server.

      Examples of usage
      You can use both sessions and cookies to store: authentication data, user preferences, the content of a chart in an e-commerce website, etc...

      Pros and Cons
      Below pros and cons of the solutions. These are the first that comes to my mind, there are surely others.

      Cookie Pros:

      scalability: all the data is stored in the browser so each request can go through a load balancer to different webservers and you have all the information needed to fullfill the request;
      they can be accessed via javascript on the browser;
      not being on the server they will survive server restarts;
      RESTful: requests don't depend on server state
      Cookie Cons:

      storage is limited to 80 KB (20 cookies, 4 KB each)
      secure cookies are not easy to implement: take a look at the paper A secure cookie protocol

_______________________________________________________________________________________________________________
43b) express - session

      yarn add express express-session session-file-store

      Protokół http jest stateless, tzn nie utrzymuje stanu pomiędzy kolejnymi requestami juzka
      Rozwiązaniem problemu, jest ww biblioteka do tworzenia sesji
      Odbywa się to, przez wysłanie cookie juzkowi.

      Potem Juzek wysyłając dowolny request do serwera, z automatu załącza te przysłane cookie
      Serwer je odczytuje i dzięki temu wie że to ten sam juzek, co przed chwilą

      nodewebapps.com/2017/06/18/how-do-nodejs-sessions-work/

      I follow the rule, “cache (redis, memcache) first, then cookie, then then database”
      Cookie = 4kB

      const session = require('express-session')
      const FileStore = require('session-file-store')(session);
      const express = require('express')
      const app = express()

      app.use(session({
        secret: 'keyboard cat',  // salt do haszowania cookie
        resave: false,           // czy sesja powinna być uaktualniana, nawet jeśli user nie zrobił żadnej zmiany, tylko page refresh
        saveUninitialized: false, // tworzy cookie i sesję przy kazdym wejściu juzka, nawet jeśli się on nie loguje
        cookie: { maxAge: 10000 },
        store: new FileStore      // domyslnie tworzy katalog sessions a w nim pliki z cookami
      }))

      app.get('/', function(req, res){
        req.session.server = 'wwa'

        console.log(req.cookies)
        console.log(req.session)  /* Session {
                                      cookie:
                                      { path: '/',
                                        _expires: 2018-08-02T09:11:19.029Z,
                                        originalMaxAge: 10000,
                                        httpOnly: true },
                                      server: 'wwa' } */

        req.session.pageViews ? req.session.pageViews++ : req.session.pageViews = 1
        res.send(req.session)
      })

      app.listen(3000, () => console.log('Serwer na 3000 ..'))

_______________________________________________________________________________________________________________
44) express - serwer proxy

      a) node index.js

      b) vs code rest-client (plugin) - wysyłanie query mongodb do expressa
         Express dokłada do niego url serwera i jego api key i śle je
         do mLaba. Odbiera odpowiedź i wyświetla ją (programy TV)

        Zamiast rest-clienta, można całe zapytanie wkleić do chroma,
        albo wysłać curlem

    --------- index.js ----------------------------------

      const express = require('express')
      const axios = require ('axios')
      const urlPrefix = 'https://api.mlab.com/api/1/databases/tvui/collections/tvui1?s={timestamp:1}&q='
      const key = '&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI'

      const app = express()
      app.use(function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        next()
      })

      app.use(express.json())
      app.use(express.urlencoded({ extended: true }))

      app.listen (3000, () => console.log('Server on 3000..'))


      app.get('/', (req, res) => {
        console.log('\n****** GET *************\n')
        console.log('req.body.url = ' + req.body.url)

        const url = urlPrefix + req.body.url + key
        console.log('\n\nurl = ' + url + '\n\n')

        axios.get(url)
        .then(response => {
          console.log(response.data)
          res.send(response.data)
        })
        .catch(err => console.log('ERRORAS'))
      })

   ------ 2.js -------------------------------------------------

    ###
    GET http://localhost:3000
    Content-Type: application/json

    {
      "url": "{timestamp:{$gte:1550273400000},$and:[{timestamp:{$lte:1550361600000}},{$and:[{channel:{$in:['TVP 1','TVP 2']}}]}]}"
    }

_______________________________________________________________________________________________________________
46) HTTP, GET vs PUT

    To dwa najczęściej używane, spośród 7 poleceń protokołu HTTP ( GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS)

    Odpowiedź serwera składa się z headera (status + inne) i body (treść)

                                   GET           POST
    Request can be cached          Yes           No
    Request can be bookmarked      Yes           No
    Parameters in browser history  Yes           No
    Encoding                       urlencoded    urlencoded or multipart/form-data
    Visibility of data in URL      Yes           No
    Data type                      only ASCII    All (incl binary)
    Data length                    URL=2048      No
    Back button                    Harmless      Data will be resubmitted

_______________________________________________________________________________________________________________
47) HTTP - kody błędów

    HTTP to protokół komunikacji klient (browser) - serwer, oparty na zasadzie request - response (żądanie - odpowiedź)

    Najczęstsze kody błędów:
      1xx Information

      2xx Successful
        200 OK
        201 Created  - request ok, resource being created
        202 Accepted - request ok, processing not completed

      3xx Redirection
        301 Moved permanently - page moved to new URL
        302 Found - page moved temporarily to new URL

      4xx Client Error
        400 Bad request - bad request syntax
        401 Unauthorized - request ok, brak autoryzacji
        403 Forbidden - request ok, odmowa serwera
        404 Not Found - request ok, resource not found

      5xx Server Error
        500 Internal Server Error - catch all error msg
        501 Not Implemented - server doesnt recognize or has not implemented the method
        502 Bad Gateway - serwer robił jako gateway lub proxy i dostał invalid response z upstream serwera
        503 Service Unavailable	- server is currently overloaded or down

_______________________________________________________________________________________________________________
47a) mongoose - tips

    a) 'duplicate key error collection' - przy insertowaniu dokumentów
          mongo
          show tables  // users
          use users
          db.users.dropIndexes()
          exit

    b) ustawienie pola jako 'unique' tworzy na nim index
_______________________________________________________________________________________________________________
48) mongoexport, mongoimport

      a) ściągnij i zainstaluj mongodb, studio 3T (w obu Next > Next > OK))
      b) yarn add mongodb mongoose
      d) mongoimport --db nazwaDb --collection nazwaKolekcji --file plik.json --jsonArray
      e) mongodump -d nazwaBazy > nazwaBazy.json   // export całej bazy

      f) mongoexport -d nazwaBazy -c nazwaKolekcji > nazwaKolekcji.json
           otwórz plik dodaj nawias [ na początku, nawias ] na końcu i przecinek po każdej linii

      mongoimport --db users --collection users --file users.json --jsonArray

        [
          { "name":"adam",  "city":"wwa", "age": 12 },
          { "name":"ewa",   "city":"wro",  "age": 45 },
          { "name":"piotr", "city":"poz",  "age": 78 }
        ]
_______________________________________________________________________________________________________________
49a) mongoose - proste query

    ---------- data/users.json ---------------------------------------------------

      [
        { "name":"adam",  "city":"wwa", "age": 12 },
        { "name":"ewa",   "city":"wro",  "age": 45 },
        { "name":"piotr", "city":"poz",  "age": 78 }
      ]

      mongoimport --db users --collection users --file users.json --jsonArray

    ---------- index.js ---------------------------------------------------

      const mongoose = require('mongoose')
      const express = require('express')
      const app = express()

      app.listen(3000, () => console.log('Serwer na 3000..'))

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('DB connected !'))
        .catch(() => console.log('DB failed !'))

      const userSchema = mongoose.Schema()

      const userModel = mongoose.model('userModel', userSchema, 'users')

      app.get('/', async (req, res) => {

        const result = await userModel
          .find({})
          .select({ _id: 0 })

        res.send(result)
      })

_______________________________________________________________________________________________________________
49b) mongoose - schema, walidacja i insertMany

      http://mongoosejs.com/docs/

      UWAGA !
        W mongoose nie ma polecenia save dla > 1 dokumentu, dlatego lepiej
        dla _każdej_ ilości dokumentów użyć natywnego polecenia mongodb - insertMany:

          nazwaModelu.insertMany ([{...}, {...}])

      Do każdej operacji prócz query (czyli insertMany, updateMany),
      musi być wypełniona schema (przy query i delete, może być pusta)

      Jeśli kolekcja courses nie istnieje, to metoda
      mongoose.connect('mongodb://localhost/courses') ją stworzy

      Po wykonaniu poniższego kodu sprawdź w 3T Studio, czy kolekcja i dokument się zapisały

      Tworząc model, zawsze jako ostatni, 3-ci parametr podawaj nazwę tabeli
        const Course = mongoose.model('Course', courseSchema, 'courses')

      W przeciwnym razie, mongoose, będzie używał tej gupiej konwencji
      single / plural (nie chcesz wiedzieć)

    -----------------------------------------------------------------

      a) stwórz plik data/users.json

      b) wklej do niego:

          [
            { "name":"adam","city":"wwa","age": 12 },
            { "name":"ewa","city":"wro","age": 45 },
            { "name":"piotr","city":"poz","age": 78 }
          ]

      c) zaimportuj go komendą:

          mongoimport --db users --collection users --file data/users.json --jsonArray

      d) stwórz plik index.js i odpal komendą

          nodemon (domyślnie odpala index.js)

      e) otwórz Studio 3T i oglądaj kolekcję users

    -----------------------------------------------------------------

      const express = require('express')
      const mongoose = require('mongoose')

      const app = express()

      mongoose.connect('mongodb://localhost/users')

      const userSchema = mongoose.Schema({
        name: String,
        city: String,
        age: Number
      })

      const userModel = mongoose.model('userModel', userSchema, 'users')

      const users = { name: 'jan', age: 11, city: 'wwa'}

      app.get('/', async(req, res) => {
        await userModel.insertMany(users)

        const result = await userModel
          .find()
          .select({ _id: 0 })

        res.send(result)
      })

      app.listen(3000, () => console.log('Serwer na 3000 ..'))

_______________________________________________________________________________________________________________
50) mongodb - insertMany

      const mongoose = require('mongoose')
      const _ = require('lodash')

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('DB connected !'))
        .catch(err => console.log('DB failed !'))

      const userSchema  = mongoose.Schema({ name: String, age: Number })
      const userModel = mongoose.model('userModel', userSchema, 'users')

      async function user() {
        const user = [
          { name: 'DD', age: 77 },
          { name: 'EE', age: 88 }
        ]

        try {
          await userModel.insertMany(user)

          const res = await userModel
            .find({})
            .select({ _id: 0 })

          console.log(res)
        }
        catch(err) { console.log(err) }
      }

      user()

      async function reset() {
        try {
          await userModel.remove()
          console.log('DB wykasowana')
        }
        catch(err) { console.error(err) }
      }

      // reset()

_______________________________________________________________________________________________________________
51) mongoose - schema

      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/courses')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Spsuło siee ..'))

      const courseSchema = new mongoose.Schema({
        name: String,
        author: String,
        tags: [String],
        date: {
          type: Date,
          default: Date.now
        },
        isPublished: Boolean
      })

      const Course = mongoose.model('Course', courseSchema, 'courses')

      async function getCourses() {
        const courses = await Course
          .find({ author: 'Mosh', isPublished: true })
          .limit(2)
          .sort({ age: -1 })  // +1 rosnąco, -1 malejąco
          .select({name: 1, tags: 1, _id: 0})

        console.log(courses);
      }

      getCourses()

_______________________________________________________________________________________________________________
52) Mongoose - operatory zapytań

      UWAGA !!
        Mongo używa tej gupiej konwencji plural / singular.
        By to obejść, dodawaj 3-ci argument z nazwą kolekcji do mongoose.model:

          mongoose.model('Person', skima, 'ppl')

        Mongoose automatically looks for the plural version of your model name.

        For example, if you use
          const MyModel = mongoose.model('Ticket', mySchema);

        Then Mongoose will create the model for your 'tickets' collection,
        not your 'ticket' collection

        eq = equal
        ne = non equal
        gt = greater than
        gte = greater or equal
        lt = less than
        lte = less or equal
        in
        nin = non in
        or
        and

        Mongo: nazwa db = persons, nazwa kolekcji = ppl

    --------------------------------------------------------------
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/persons')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Spsuło siee ..'))

      const skima = new mongoose.Schema()

      const Person = mongoose.model('Person', skima, 'ppl')

      async function getPersons() {
        const ziutki = await Person
          .find({ name: 'ewa'})
          //.find({ age: { $gt: 30, $lt: 60 }})
          .or([{ city: 'lodz'}, { city: 'wwa'}])
          .find({ age: { $in: [ 30, 95]}})
          .select({ _id: 0, name: 1, city: 1, age: 1 })

        console.log(ziutki)
      }

      getPersons()

_______________________________________________________________________________________________________________
53) mongoose - RegEx, count i indeks

      .find({ name: /^e/ }) - zaczyna się od 'e'
      .find({ name: /e$/ }) - kończy się na 'e'
      .find({ name: /e$/i }) - kończy się na 'e': małe lub duże
      .find({ name: /.*e/i }) - 0+ znaków a potem 'e'

      .find({ name: 'adam'})
      .select({ _id: 0, name: 1, age: 1, city: 1})
      .count() // 4 - ilość dokumentów

      var animalSchema = new Schema({
        name: String,
        tags: { type: [String], index: true } // field level
      });

      animalSchema.index({ name: 1, type: -1 }); // schema level

_______________________________________________________________________________________________________________
54) mongoose - updateMany i updateOne

      https://coderwall.com/p/3publg/mongoose-s-update-does-not-behave-like-mongo-s-update

      'Mongoose's update does not behave like mongo's update'
      dlatego zamiast użyć pplModel, trzeba natywnego odwołania użyć:

        pplModel.collection.updateMany  lub pplModel.collection.update

      Operator:
        $set ustawia pole na podaną wartość
        $inc - zwiększa je o zadaną wartość (np $inc -1)

      Operatory updatowania:
        $currentDate	Sets the value of a field to current date, either as a Date or a Timestamp.
        $inc	        Increments the value of the field by the specified amount.
        $min	        Only updates the field if the specified value is less than the existing field value.
        $max	        Only updates the field if the specified value is greater than the existing field value.
        $mul	        Multiplies the value of the field by the specified amount.
        $rename	      Renames a field.
        $set	        Sets the value of a field in a document.
        $setOnInsert	Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.
        $unset	      Removes the specified field from a document.

      -------------------------------------------------------------
      const express = require('express')
      const mongoose = require('mongoose')

      const app = express()

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('DB connected !'))
        .catch(() => console.log('DB failed !'))

      const userSchema = mongoose.Schema({
        name: String,
        city: String,
        age: Number
      })

      const userModel = mongoose.model('userModel', userSchema, 'users')

      async function updateUsers() {
        await userModel.updateMany(
          { name: 'ewa' },
          { $set: { name: 'EWA', city: 'KRK' }, $inc: { age: -2 }}
        )
      }

      function showAll() {
        return userModel.find().select({ _id: 0 })
      }

      app.get('/', async(req, res) => {
        updateUsers()
        const result = await showAll()

        res.send(result)
      })

      app.listen(3000, () => console.log('Serwer na 3000 ..'))

_______________________________________________________________________________________________________________
55) mongoose - deleteOne i deleteMany

      deleteOne - wywala pierwszy rekord
      deleteMany - wszystkie

      -----------------------------------------------------
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/persons')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Sie spsuło: ', err))

      const pplSchema = new mongoose.Schema()
      const pplModel = mongoose.model('Ppl', pplSchema, 'ppl')

      async function deletePpl() {
        await pplModel.deleteMany({ name: 'adam'})  // lub deleteOne
        const ppl = await pplModel.find()
        console.log(ppl)
      }

      deletePpl()
_______________________________________________________________________________________________________________
56) mongoose - walidacja

      W schemie określane są warunki, jakie ma spełniać dana, np ma byc wymagana

        name: { type: 'String', required: true }

      ---------------------------------------------------------
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/persons')
        .then(() => console.log('DB Connected !'))
        .catch(err => console.log('DB failed !'))

      const pplSchema = new mongoose.Schema({
        name: {
          type: 'String',
          required: [ true, 'Wiadomość dla usera: name jest wymagany' ]
        },
        city: String,
        age: Number
      })

      const pplModel = mongoose.model('Ppl', pplSchema, 'ppl')

      async function createPpl() {
        const ppl = new pplModel({
          // name: 'mark',
          city: 'Wwa',
          age: 22
        })

        try {
          const result = await ppl.save()
          console.log(result)
        }
        catch (err) {
          console.log(err.message)
        }
      }

      createPpl()
_______________________________________________________________________________________________________________
57) mongoose - walidacja: funkcja walidująca i operatory (min, max, enum, unique.match)

      Pole 'wiek' jest wymagane, tylko dla 'wwa'
      Walidatory dla typu String: minlenght, maxlength, pattern, enum
      Walidatory dla typu Number: min, max

      Domyślnie, 1-sza wartość obiektu ma być unikalna (indeks)

      Custom validator:

        tags: {
          type: Array,
          validate: {
            validator: function(v) {
              return v && v.length > 1
            },
            message: 'Min 2 tags required'
          }
        }

      -------------------------------------------------
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/persons')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Spsuło siee ..'))

      const pplSchema = new mongoose.Schema({
        name: {
          type: 'String',
          required: true,
          minlength: 3,
          maxlength: 6,
          match: /a$/,
          unique: true
        },
        city: String,
        age: {
          type: Number,
          required: function() { return this.city === 'wwa'},
          min: 20,
          max: 40
        },
        color: {
          type: String,
          enum: ['red', 'green', 'blue']
        },
        tags: {
          type: Array,
          validate: {
            validator: function(v) {
              return v && v.length > 1
            },
            message: 'Min 2 tags required'
          }
        }
      })

      const pplModel = mongoose.model('Ppl', pplSchema, 'ppl')

      async function createPpl() {
        const ppl = new pplModel({
          name: 'basia',
          city: 'wwa',
          age: 22,
          color: 'red',
          tags: ['sky']
        })

        try {
          const result = await ppl.save()
          console.log(result)
        }
        catch (err) {
          console.log(err.message)
        }
      }

      createPpl()
_______________________________________________________________________________________________________________
58) mongoose - walidacja asynchroniczna

      Trzeba dodać 'isAsync: true' i callback'a do funkcji

      tags: {
          type: Array,
          validate: {
            isAsync: true,
            validator: function (v, callback) {
              setTimeout(() => {
                const result = v && v.length > 1
                callback(result)
              }, 3000);
            },
            message: 'Min 2 tags required'
          }
        }

      -------------------------------------------------

      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/persons')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Spsuło siee ..'))

      const pplSchema = new mongoose.Schema({
        name: {
          type: 'String',
          required: true,
          minlength: 3,
          maxlength: 6,
          // match /patter/
        },
        city: String,
        age: {
          type: Number,
          required: function () { return this.city === 'wwa' },
          min: 20,
          max: 40
        },
        color: {
          type: String,
          enum: ['red', 'green', 'blue']
        },
        tags: {
          type: Array,
          validate: {
            isAsync: true,
            validator: function (v, callback) {
              setTimeout(() => {
                const result = v && v.length > 1
                callback(result)
              }, 3000);
            },
            message: 'Min 2 tags required'
          }
        }
      })

      const pplModel = mongoose.model('Ppl', pplSchema, 'ppl')

      async function createPpl() {
        const ppl = new pplModel({
          name: 'basia',
          city: 'wwa',
          age: 22,
          color: 'red',
          tags: ['sky', 'lake']
        })

        try {
          const result = await ppl.save()
          console.log(result)
        }
        catch (err) {
          console.log(err.message)
        }
      }

      createPpl()

_________________________________________________________________________________________________________
59) mongoose - walidacja: komunikaty błędów

      By nie wyświetlać początkowego komunikatu:
        'pplModel validation failed:'

      użyj pętli:

        catch (err) {
          for(field in err.errors) {
            console.log(err.errors[field].message)
          }
        }

      --------------------------------------------------
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/persons')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Spsuło siee ..'))

      const pplSchema = new mongoose.Schema({
        name: {
          type: 'String',
          required: true,
          minlength: 3,
          maxlength: 6,
        },
        city: String,
        age: {
          type: Number,
          required: function () { return this.city === 'wwa' },
          min: 20,
          max: 40
        },
        color: {
          type: String,
          enum: ['red', 'green', 'blue']
        },
        tags: {
          type: Array,
          validate: {
            isAsync: true,
            validator: function (v, callback) {
              setTimeout(() => {
                const result = v && v.length > 1
                callback(result)
              }, 3000);
            },
            message: 'Min 2 tags required'
          }
        }
      })

      const pplModel = mongoose.model('Ppl', pplSchema, 'ppl')

      async function createPpl() {
        const ppl = new pplModel({
          name: 'basia',
          city: 'wwa',
          age: 2,
          color: 'red',
          tags: ['sky']
        })

        try {
          const result = await ppl.save()
          console.log(result)
        }
        catch (err) {
          // console.log(err.message)
          for(field in err.errors) {
            console.log(err.errors[field].message)
          }
        }
      }

      createPpl()  // Path `age` (2) is less than minimum allowed value (20).
                  // Min 2 tags required

_________________________________________________________________________________________________________
59a) mongoose - joigoose (joi schema konwerter)

      Walidacja pakietem joi jest lepsza niż mongoose'owa
      Ale mongoose.model oczekuje schemy mongoosowej
      Rozwiązaniem jest konwersja schemy joi'owej do mongoosowej:

        const userSchema = mongoose.Schema(joigoose.convert(joiSchema))

    ------------------------------------------------------------------

      const express = require('express')
      const mongoose = require('mongoose')
      const joi = require('joi')
      const joigoose = require('joigoose')(mongoose)
      const app = express()
      app.listen(3000, () => console.log('Serwer na 3000 ..'))

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('DB Connected !'))
        .catch(err => console.log('DB failed !'))

      const joiSchema = {
        name: joi.string().min(3).max(5).required(),
        city: joi.string().min(3).max(7).required(),
        age: joi.number().min(18).max(40).required()
      }

      const users = [
        { name: 'xowe1', age: 18, city: 'wwa' },
        { name: 'yoy1', age: 22, city: 'gda' }
      ]

      const userSchema = mongoose.Schema(joigoose.convert(joiSchema))
      const userModel = mongoose.model('userModel', userSchema, 'users')

      const showAll = () => userModel.find()

      app.get('/', async (req, res) => res.send(await showAll()))

      app.get('/insert', async (req, res) => {
        await userModel.insertMany(users)
        res.send(await showAll())
      })


_________________________________________________________________________________________________________
60) mongoose - walidacja: get i set

      Opcja 'get' powoduje, że jeśli np w bazie jest 15.8, to odczytane zostanie 16
      Analogicznie, 'set' powoduje, że przy zapisie do bazy 15.8 zostanie zapisane jako 16

      UWAGA:
        set działa, get - nie chce, nie wiem dlaczego

        age: {
          type: Number,
          required: function () { return this.city === 'wwa' },
          min: 20,
          max: 40,
          get: v => Math.round(v),
          set: v => Math.round(v)
        },

    --------------------------------------------------
    const mongoose = require('mongoose')

    mongoose.connect('mongodb://localhost/persons')
      .then(() => console.log('Connected !'))
      .catch(err => console.log('Spsuło siee ..'))

    const pplSchema = new mongoose.Schema({
      name: {
        type: 'String',
        required: true,
        minlength: 3,
        maxlength: 6,
      },
      city: String,
      age: {
        type: Number,
        required: function () { return this.city === 'wwa' },
        min: 20,
        max: 40,
        get: v => Math.round(v),
        set: v => Math.round(v)
      },
      color: {
        type: String,
        enum: ['red', 'green', 'blue']
      },
      tags: {
        type: Array,
        validate: {
          isAsync: true,
          validator: function (v, callback) {
            setTimeout(() => {
              const result = v && v.length > 1
              callback(result)
            }, 3000);
          },
          message: 'Min 2 tags required'
        }
      }
    })

    const pplModel = mongoose.model('Ppl', pplSchema, 'ppl')

    async function createPpl() {
      const ppl = new pplModel({
        name: 'basia',
        city: 'wwa',
        age: 20.8,
        color: 'red',
        tags: ['sky', 'lake']
      })

      try {
        const result = await ppl.save()
        console.log(result)
      }
      catch (err) {
        for(field in err.errors) {
          console.log(err.errors[field].message)
        }
      }
    }

    createPpl()
_________________________________________________________________________________________________________
61) mongoose - referencing (populate)

      9. Mongoose - Modeling Relationships Between Connected Data / 3. population

      Odpalaj kolejne funkcje pojedyńczo

        a) odpal createAuthor('Mosh', 'My bio', 'My Website')

        b) weź id utworzonego wyżej rekordu i wbij je do poniższej funkcji:
            createCourse('Node Course', '5b3f2bd6f70c580b2c6b5251')

        c) odpal listCourses()

      ------------------------------------------------------------------

      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/playground')
        .then(() => console.log('Connected to MongoDB...'))
        .catch(err => console.error('Could not connect to MongoDB...', err))

      const authorSchema = mongoose.Schema({
        name: String,
        bio: String,
        website: String
      })

      const AuthorModel = mongoose.model('AuthorModel', authorSchema, 'authors')

      async function createAuthor(name, bio, website) {
        const author = AuthorModel({ name, bio, website })
        const result = await author.save()
        console.log(result)
      }
      ////////////////////////////////////////////////////////////////////////////////////////

      const courseSchema = mongoose.Schema({
        name: String,
        author: {
          type: mongoose.Schema.Types.ObjectId,
          ref: 'AuthorModel'
        }
      })

      const CourseModel = mongoose.model('CourseModel', courseSchema, 'courses')

      async function createCourse(name, author) {
        const course = CourseModel({ name, author })
        const result = await course.save()
        console.log(result)
      }
      ////////////////////////////////////////////////////////////////////////////////////////

      async function listCourses() {
        const courses = await CourseModel
          .find()
          .populate('author', 'name -_id')
          .select('name author')

        console.log(courses)
      }

      createAuthor('Mosh', 'My bio', 'My Website')
      // createCourse('Node Course', '5b3f2bd6f70c580b2c6b5251')
      // listCourses()

      /*
      [{
        _id: 5b3f2bf1cbfef01098074906,
        name: 'Node Course',
        author: { name: 'Mosh' }
      }]
      */

_________________________________________________________________________________________________________
62) mongoose - embedding (1 dokument)

      Subdokument - dokument osadzony w innym:

        { _id: 5b3ba18293e37d33e4f80161,
          name: 'Node Course',
          author: {
            _id: 5 b3ba18293e37d33e4f80160,
            name: 'Mosh',
            bio: 'Mosiek bio',
            website: 'www.mosiek.com'
          }
        }

      -----------------------------------------------------------------------
      const mongoose = require('mongoose');

      mongoose.connect('mongodb://localhost/playground')
        .then(() => console.log('Connected to MongoDB...'))
        .catch(err => console.error('Could not connect to MongoDB...', err));

      const authorSchema = mongoose.Schema({
        name: String,
        bio: String,
        website: String
      })

      const Author = mongoose.model('Author', authorSchema, 'author')

      const Course = mongoose.model('Course', mongoose.Schema({
        name: String,
        author: authorSchema
      }), 'courses')

      async function createCourse(name, author) {
        const course = Course({ name, author })

        const result = await course.save()
        console.log(result)
      }

      async function listCourses() {
        const courses = await Course.find()
        console.log(courses)
      }

      createCourse('Node Course', new Author({
        name: 'Mosh',
        bio: 'Mosiek bio',
        website: 'www.mosiek.com'
      }))

_________________________________________________________________________________________________________
63) mongoose - embedding tablicy dokumentów

      ------------------------------------------------------------------------
      const mongoose = require('mongoose');

      mongoose.connect('mongodb://localhost/playground')
        .then(() => console.log('Connected to MongoDB...'))
        .catch(err => console.error('Could not connect to MongoDB...', err));

      const authorSchema = new mongoose.Schema({
        name: String,
        bio: String,
        website: String
      })

      const Author = mongoose.model('Author', authorSchema, 'author')

      const Course = mongoose.model('Course', new mongoose.Schema({
        name: String,
        authors: [authorSchema]  // tu zmień dodając nawiasy
      }), 'courses')

      async function createCourse(name, authors) {
        const course = new Course({ name, authors })

        const result = await course.save()
        console.log(result)
      }

      async function listCourses() {
        const courses = await Course.find()
        console.log(courses)
      }

      createCourse('Node Course', [
        new Author({ name: 'Mosh', bio: 'Mosiek bio', website: 'www.mosiek.com'}),
        new Author({ name: 'Icek', bio: 'Icek bio', website: 'www.icek.com'}),  // dodaj drugi dokument
      ])

_________________________________________________________________________________________________________
64) mongoose - ObjectId

    Niemal unikalne id dokumentu

    "_id" : ObjectId("5b3b43888af8c1afcc396039")

    24 cyfry = 12 bajtów:
      4 = timestamp
      3 = maszynaId
      2 = proces
      3 = licznik

    const id = new mongoose.Types.ObjectId()
    console.log(id.getTimestamp())        // 2018-07-03T18:11:57.000Z


    mongoose.Types.ObjectId.isValid(id)  // prosta walidacja
    yarn add joi-objectid               //  lepsza
_________________________________________________________________________________________________________
65) mongoose + express: modularyzacja

      Do podziału apki na moduły (pliki) przydaje się komenda middlewarowa:
        app.use('/mongo', mongo)

      Mówi ona: przy wybraniu ścieżki url/mongo, odpal zaimportowany moduł:
        const mongo = require('./mongo')

      W module, nie można użyć zmiennej app z modułu głównego,
      więc trzeba użyć użyć obiektu router:

        const router = express.Router()
        router.get('/', async (req, res) => { ... }

        module.exports = router

      ------------ /app.js------------------------------------------

      const express = require('express')
      const app = express()
      const mongo = require('./mongo')

      app.use('/mongo', mongo)

      app.get('/', (req, res) => res.send('Heja !!'))

      app.listen(3000)

      ------------ /mongo.js------------------------------------------

      const express = require('express')
      const router = express.Router()
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('DB connected !'))
        .catch(err => console.log('DB failed !'))

      const userSchema = mongoose.Schema()
      const userModel = mongoose.model('userModel', userSchema, 'users')

      router.get('/', async (req, res) => {
        const result = await userModel.find().select({ _id: 0})
        res.send(result)
      })

      router.get('/:id', async (req, res) => {
        const id = parseInt(req.params.id)

        const result = await userModel
          .find()
          .select({ _id: 0 })
          .skip(id)
          .limit(1)

        res.send(result)
      })

      module.exports = router

_________________________________________________________________________________________________________
66) mongoose + express: post - troubleshooting

      a) Zapis do bazy odbywa się przez app.post (a nie app.get)

      b) Przy zapisie wymagana jest wypełniona schema (przy app.get, może być pusta)

      c) Jeśli wysyłasz jsona, pamiętaj o m-warze app.use(express.json())

      d) Operacje na bazie wymagają async / awaita

      e) Ostatnią instrukcją w roucie, nie może być await, tzn:
          await user.save()
            ani
          const saved = await user.save()

      f) Dlatego trzeba użyć
           res.send(user)
         ostatecznie
           console.log(user)

    ---------- app.js -------------------------------------

      const mongoose = require('mongoose')
      const express = require('express')
      const app = express()

      app.use(express.json())

      app.listen(3000)

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('Connected !'))
        .catch((err) => console.log('Sie spsuo'))

      const userSchema = mongoose.Schema({
        name: String,
        age: Number
      })

      const userModel = mongoose.model('userModel', userSchema, 'users')

      app.post('/users', async (req, res) => {
        const user = userModel({
          name: req.body.name,
          age: req.body.age
        })

        try {
          const saved = await user.save()
          res.send(saved)
        }
        catch(err)  {
          console.error(err)
        }

        const saved = await user.save()
        res.send(user)
      })

_________________________________________________________________________________________________________
67) mongoose + express: post

     Ponieważ dane będą słane jsonem, trzeba dodać middlewaraka express.json()
     Operacja asynchroniczna, ponieważ zawsze może się wywalić, musi być ujęta w trajkacza

     --------- app.js -----------------------------------

        require('./startup/db')
        const users = require('./routes/users')
        const express = require('express')
        const app = express()

        app.use(express.json())
        app.use('/users', users)

        app.listen(3000)

     -------- /startup/db -------------------------------

        const mongoose = require('mongoose')

        mongoose.connect('mongodb://localhost/users')
          .then(() => console.log('Connected !'))
          .catch((err) => console.log('Sie spsuo'))

     -------- /routes/users -----------------------------

        const userModel = require('../models/user')
        const express = require('express')
        const router = express.Router()

        router.post('/', async (req, res) => {
          const user = userModel({
            name: req.body.name,
            age: req.body.age
          })

          /* Zamiast ww. można odkomentować ten
          const user = userModel({
            name: 'adolf',
            age: 666
          })
          */

          try {
            const saved = await user.save()
            res.send(saved)
          }
          catch(err) {
            console.error(err)
          }
        })

        module.exports = router

     -------- /models/user -----------------------------

        const mongoose = require('mongoose')

        const userSchema = mongoose.Schema({
          name: String,
          age: Number
        })

        const userModel = mongoose.model('userModel', userSchema, 'users')
        module.exports = userModel
_________________________________________________________________________________________________________
68) mongoose + express: rejestracja nowego juzka, bcrypt

    10. Authentication and Autorization / 7. Testing the Authentication.mp4

      UWAGA !
        Dla node'a 8, wersja bcrypt to 1.0.3

        VS Code debugging: vscode.txt > 10b) Debugger - node + frontend:
          a) nodemon

          b) vs code > klik w robala (debug)
                     > klik w dropdowna przy Debug
                     > Add configuration > Node
                     > z wyświetlonego dropdowna wybierz: Node.js Attach by Process
                     > jeśli wyświetli dropdowna z wyborem procesów do odpalenia,
                       to wybierz 'node index.js'

          c) ustaw breakpointa klikiem w guttera linii

          d) klik w zieloną strzałkę za słowem Debug

          h) chrome > F5 (refresh) lub Postman

        ----------------------------------------------------------

      a) mongoimport --db users --collection users --file users.json --jsonArray

      b) Postman:
          http://localhost:3000/api/users
          POST
          Body > raw > JSON
          {
            "name": "adam",
            "email": "adam@wp.plo",
            "password": "1234"
          }

      c) klik Send

    --------- users.json ------------------------------------

      [
        { "name":"adam","email":"adam@wp.pl","password": "123"},
        { "name":"ewa","email":"ewa@wp.pl","password": "456"},
        { "name":"piotr","email":"piotr@wp.pl","password": "789"}
      ]

    --------- index.js ---------------------------------------

      const express = require('express')
      const app = express()
      const users = require('./users')

      app.use(express.json())
      app.use('/users', users)

      app.get('/', (req, res) => res.send('Tu Główna !'))

      app.listen(3000, () => console.log('Serwer na 3000..'))

    --------- /user.js ------------------------------

      const joi = require('joi')
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Siespsuło: ', err))

      const userSchema = mongoose.Schema({ name: String, email: String, password: String })

      const userModel = mongoose.model('userSchema', userSchema, 'users')

      function validate(user) {
        const schema = {
          name: joi.string().min(3).max(50).required(),
          email: joi.string().min(3).max(50).required().email(),
          password: joi.string().min(3).max(255).required()
        }

        return joi.validate(user, schema)
      }

      exports.userModel = userModel
      exports.validate = validate

    --------- /users.js ---------------------------------------

      const _ = require('lodash')
      const bcrypt = require('bcrypt')
      const { userModel, validate } = require('./user')
      const express = require('express')
      const router = express.Router()

      router.post('/', async (req, res) => {
        const result = validate(req.body)
        if(result.error) return res.status(400).send(result.error.details[0].message)

        let user = await userModel.findOne({ email: req.body.email })
        if(user) return res.status(400).send('User already registered')

        user = _.pick(req.body, ['name', 'email', 'password'])

        const salt = await bcrypt.genSalt(10)
        const hashedPassword = await bcrypt.hash(user.password, salt)
        user.password = hashedPassword

        const savedUser = await userModel.insertMany(user)
        res.send(savedUser)
      })

      module.exports = router

_________________________________________________________________________________________________________
69) mongoose + express: autentykacja

      yarn add jsonwebtoken

      a) utworz nowego juzka jak w punkcie powyżej

      b) Postman
           POST
           http://localhost:3000/api/auth
           raw / JSON
           {
              "email": "hans@wp.pl",
              "password": "abcd"
           }

       c) baton Send
       d) zmien ww password i sprawdź, czy jedno działa a drugie nie

    ------------ app.js --------------------------------------------

      const express = require('express')
      const app = express()
      const auth = require('./routes/auth')

      app.use(express.json())
      app.use('/api/auth', auth)

      app.get('/', (req, res) => res.send('Siemanko'))

      app.listen(3000)

    ------------ routes/auth.js ------------------------------------

      const Joi = require('joi')
      const _ = require('lodash')
      const bcrypt = require('bcrypt')
      const { User, validate } = require('../models/user')
      const express = require('express')
      const router = express.Router()

      router.post('/', async (req, res) => {
        const result = validate(req.body)
        if (result.error) return res.status(400).send(result.error.details[0].message)

        let user = await User.findOne({ email: req.body.email })
        if (!user) return res.status(400).send('Invalid email or password')

        const isPasswordValid = bcrypt.compare(req.body.password, user.password)
        if (!isPasswordValid) return res.status(400).send('Invalid email or password')

        const token = await jwt.sign({ _id: user._id}, config.get('jwtPrivateKey'))

        res.send(token)
      })

      function validate(req) {
        const schema = {
          email: Joi.string().min(3).max(50).required().email(),
          password: Joi.string().min(3).max(255).required()
        }

        return Joi.validate(req, schema)
      }

      module.exports = router

_________________________________________________________________________________________________________
70) mongoose + express: ustawianie hasła w zmiennej środowiskowej

    Nie wolno trzymać zaklęć w kodzie.

    Lepiej wbić w terminalu:
      export jwtKey=dupa

    a potem odczytać to w kodzie, przez:
      console.log(process.env.jwtKey)

    printenv - listuje wszystkie zmienne środowiskowe
    printenv|grep jwtKey - listuje wszystkie zaczynające się od vat

    W nodzie, używa się do tego pakietu config (config.get('jwtKey'))

    Stwórz poniższe 2 pliki, a potem w konsoli, wbij:
      export jwtKey=dupa

    Jeśli nie ustawisz ww zmiennej, to po odpaleniu apki,
    poniższa funkcja wywali komunikat o błedzie i zakończy jej działanie:

      if(!config.get('jwtKey')) {
        console.error('FATAL ERROR: jwtKey is not defined')
        process.exit(1)
      }

    W /routes/users.js, zamiast stringa, zawołaj funkcję config:
        const token = await jwt.sign({ _id: user._id }, config.get('jwtKey'))  // bez prefiksu 'vidly_'


    -------------- /config/default.json ---------------------------

      {
        "jwtKey": ""
      }

    -------------- /config/custom-environment-variable.json -------

      {
        "jwtKey": "jwtKey"
      }

    --------- app.js --------------------------------------------

      const config = require('config')
      const express = require('express')
      const app = express()
      const users = require('./routes/users')
      const auth = require('./routes/auth')

      if(!config.get('jwtKey')) {
        console.error('FATAL ERROR: jwtKey is not defined')
        process.exit(1)
      }

      app.use(express.json())
      app.use('/api/users', users)
      app.use('/api/auth', auth)

      app.get('/', (req, res) => res.send('Siemanko'))

      app.listen(3000)

    --------- /routes/users.js --------------------------------------------

      const jwt = require('jsonwebtoken')
      const config = require('config')
      const _ = require('lodash')
      const bcrypt = require('bcrypt')
      const { User, validate } = require('../models/user')
      const express = require('express')
      const router = express.Router()

      router.post('/', async (req, res) => {
        const result = validate(req.body)
        if(result.error) return res.status(400).send(result.error.details[0].message)

        let user = await User.findOne({ email: req.body.email })
        if(user) return res.status(400).send('User already registered')

        user = _.pick(req.body, ['name', 'email', 'password'])

        const salt = await bcrypt.genSalt(10)
        const hashedPassword = await bcrypt.hash(user.password, salt)
        user.password = hashedPassword

        const token = await jwt.sign({ _id: user._id }, config.get('jwtKey'))

        const savedUser = await User(user).save()
        res.header('x-auth-token', token).send(savedUser)
      })

      module.exports = router
_________________________________________________________________________________________________________
71) mongoose + express: przesyłanie tokena w headerze

      --------- app.js --------------------------------------------

      const config = require('config')
      const express = require('express')
      const app = express()
      const users = require('./routes/users')
      const auth = require('./routes/auth')

      app.use(express.json())
      app.use('/api/users', users)
      app.use('/api/auth', auth)

      app.get('/', (req, res) => res.send('Siemanko'))

      app.listen(3000)

      --------- users.js --------------------------------------------

      const jwt = require('jsonwebtoken')
      const config = require('config')
      const _ = require('lodash')
      const bcrypt = require('bcrypt')
      const { User, validate } = require('../models/user')
      const mongoose = require('mongoose')
      const express = require('express')
      const router = express.Router()

      router.post('/', async (req, res) => {
        const result = validate(req.body)
        if(result.error) return res.status(400).send(result.error.details[0].message)

        let user = await User.findOne({ email: req.body.email })
        if(user) return res.status(400).send('User already registered')

        user = _.pick(req.body, ['name', 'email', 'password'])

        const salt = await bcrypt.genSalt(10)
        const hashedPassword = await bcrypt.hash(user.password, salt)
        user.password = hashedPassword

        const token = await jwt.sign({ _id: user._id }, config.get('jwtKey'))

        const savedUser = await User(user).save()
        res.header('x-auth-token', token).send(savedUser)
      })

      module.exports = router
_________________________________________________________________________________________________________
72) mongoose + express: refaktoring robienia tokena

      Token powinien być tworzony raz - jako metoda Schemy w pliku z nią:

      userSchema.methods.generateAuthToken = function() {
        const token = jwt.sign({ _id: this._id}, 'jwtKey')
        return token
      }

      .. a potem wołany przez:

      const foundUser = await User.findOne({ email: req.body.email })
      (...)
      const token = foundUser.generateAuthToken()
_________________________________________________________________________________________________________
73) mongoose + express: sprawdzenie tokena jako middleware

      Ponieważ tylko do niektórych stron konieczne jest uwierzytelnienie tokenem,
      zamiast użyć app.use() który działa globalnie dla całej apki a wiec dla każdej route'y
      lepiej wywołać metodę middlewarową w treści route'y:

        app.get('/', tokenCheck, (req, res) => res.send('Siemanko'))

      Sprawdź czy to działa Postmanem:

        1) http://localhost:3000/apis/users
            POST
            {
              "name": "jan",
              "email": "aa@aa.pl",
              "password": "abc
            }
            Send

        2) skopiuj z taba Headers lub z linii komend tokena

        3) http://localhost:3000
            GET
            Headers
              Key: x-auth-token
              Value: (najpierw pusty, potem jakiś fejkowy 123, potem wklej ww)
            Send

      --------------- app.js -------------------------------------

        // idź Postmanem na:
        //   1) POST /login - generowany jest jwt token
        //   2) GET  /      - Forbidden, jeśli brak tokena

        const express = require('express')
        const app = express()
        const login = require('./login')
        const tokenCheck = require('./tokenCheck')

        app.use(express.json())

        app.use('/login', login)

        app.get('/', tokenCheck, (req, res) => res.send('Główna'))

        app.listen(3000, () => console.log('Serwer na 3000 ..))

      --------------- /login.js -------------------------------------

        const jwt = require('jsonwebtoken')
        const express = require('express')
        const router = express.Router()

        router.post('/', async (req, res) => {
          const user = {
            name: req.body.name,
            email: req.body.email,
            password: req.body.password
          }

          await jwt.sign(user, 'secretKey', (err, token) => {
            if(err) return res.sendStatus(400)

            console.log('token', token)
            user.token = token
            res.header('x-auth-token', token).send(user)
          })

        })

        module.exports = router

      --------------- /tokencheck.js -------------------------------------

        const jwt = require('jsonwebtoken')

        function tokenCheck(req, res, next) {
          const token = req.header('x-auth-token')
          if(!token) return res.status(401).send('No token')

          const decoded = jwt.verify(token, 'secretKey')
          req.user = decoded
          next()
        }

        module.exports = tokenCheck
_________________________________________________________________________________________________________
74) mongoose + express: role-based autoryzacja

    Udemy - Node Complete Guide
    10. Authentication and Autorization
    17. Role-based authorization

    Generowanie tokena powinno być jako metoda Schemy

    Pierwszy argument, to tzw payload:
      { _id: this._id, isAdmin: this.isAdmin}
    .. drugi to zaklęcie definiowane poza kodem projektu, jako zmienna środowiskowa

      userSchema.methods.generateAuthToken = function() {
        const token = jwt.sign({ _id: this._id, isAdmin: this.isAdmin}, config.get('jwtKey'))
        return token
      }

    Wbicie ścieżki localhost:3000/api/users/me, spowoduje odpalenie pliku /routes/users
    i wykonanie route'y /me

    Zawarte w nawiasie [tokenCheck, admin], to middleware'y, które będą odpalone
    nim zostanie wykonana główna część route handlera

    app.js
      const users = require('./routes/users') (...)
      app.use('/api/users', users)

    /routes/users.js
      router.get('/me', [tokenCheck, admin], async (req, res) => {

    tokenCheck.js sprawdza, czy w headerze requesta jest pole 'x-auth-token'
      const token = req.header('x-auth-token')

    Jeśli nie ma, to wysyłany jest response 'Access denied' i wykonanie programu się kończy
    Jeśli jest, to token jest dekodowany i jego treść (_id, isAdmin i iat) są doklejane do requesta,
    jako req.user

    Kolejna instrukcja: next() - przekazuje sterowanie do kolejnego m'wara - admin
    sprawdza on czy w req.user jest pole isAdmin i czy jest ono = true
    Jeśli nie, to wysyłany jest response 'Access denied' i wykonanie się kończy

    Jeśli jest, to sterowanie wraca do głównej części route handlera router.get('/me')
    Na podstawie pola req.user._id znajdowany jest w db cały rekord usera
    i wysyłany jako response


    ------------------------------------------------------

    Sprawdź czy to działa Postmanem:

        1) http://localhost:3000/apis/users
            POST
            {
              "name": "jan",
              "email": "aa@aa.pl",
              "password": "abc
            }
            Send

        2) skopiuj z taba Headers lub z linii komend tokena

        3) http://localhost:3000
            GET
            Headers
              Key: x-auth-token
              Value: (najpierw pusty, potem jakiś fejkowy 123, potem wklej ww)
            Send

    ----------- app.js --------------------------------------

      const config = require('config')
      const express = require('express')
      const app = express()
      const users = require('./routes/users')
      const auth = require('./routes/auth')
      const tokenCheck = require('./middleware/tokenCheck')

      app.use(express.json())
      app.use('/api/users', users)
      app.use('/api/auth', auth)

      console.log("config.get('jwtKey' = ", config.get('jwtKey'))

      app.listen(3000)

    ----------- /models/user.js -----------------------------

      const config = require('config')
      const jwt = require('jsonwebtoken')
      const Joi = require('joi')
      const mongoose = require('mongoose')

      mongoose.connect('mongodb://localhost/users')
        .then(() => console.log('Connected !'))
        .catch(err => console.log('Siespsuło: ', err))

      const userSchema = mongoose.Schema({
        name: {
          type: String,
          required: true,
          minlenght: 3,
          maxlength: 50
        },
        email: {
          type: String,
          required: true,
          minlenght: 3,
          maxlength: 255,
          unique: true
        },
        password: {
          type: String,
          required: true,
          minlenght: 3,
          maxlength: 1024,
          unique: true
        },
        isAdmin: Boolean,
      })

      userSchema.methods.generateAuthToken = function() {
        const token = jwt.sign({ _id: this._id, isAdmin: this.isAdmin}, config.get('jwtKey'))
        return token
      }

      const User = mongoose.model('User', userSchema, 'users')

      function validate(user) {
        const schema = {
          name: Joi.string().min(3).max(50).required(),
          email: Joi.string().min(3).max(50).required().email(),
          password: Joi.string().min(3).max(255).required(),
          isAdmin: Joi.boolean()
        }

        return Joi.validate(user, schema)
      }

      exports.User = User
      exports.validate = validate


    ----------- /routes/users.js ----------------------------

      const tokenCheck = require('../middleware/tokenCheck')
      const admin = require('../middleware/admin')
      const _ = require('lodash')
      const bcrypt = require('bcrypt')
      const { User, validate } = require('../models/user')
      const express = require('express')
      const router = express.Router()

      router.post('/', async (req, res) => {
        let user = req.body
        const isUserValid = validate(user)

        if (isUserValid.error) return res.status(400).send(isUserValid.error.details[0].message)

        // Czy jest już taki email lub password
        const takenEmail = await User.findOne({ email: user.email })
        const takenPassword = await User.findOne({ password: user.password })
        if(takenEmail || takenPassword) return res.status(400).send('Zły email lub hasło')

        const salt = await bcrypt.genSalt(10)
        const hashed = await bcrypt.hash(user.password, salt)
        user.password = hashed

        let savedUser = await User(user).save()
        console.log('savedUser = ', savedUser)

        const token = savedUser.generateAuthToken()
        console.log('token = ', token)

        res.header('x-auth-token', token).send(savedUser)
      })

      router.get('/me', [tokenCheck, admin], async (req, res) => {
        console.log('\nusers: req.user.isAdmin = ', req.user.isAdmin)

        const user = await User.findById(req.user._id)
        console.log('users: user = ', user)

        res.send(user)
      })

      module.exports = router


    ----------- /middleware/tokenCheck.js -------------------

      const jwt = require('jsonwebtoken')
      const config = require('config')

      function tokenCheck(req, res, next) {
        const token = req.header('x-auth-token')
        if(!token) return res.status(401).send('Access denied. No token provided')

        try {
          console.log('\ntokenCheck: jwtKey = ', config.get('jwtKey'))
          console.log('\ntokenCheck token = ', token)

          const decoded = jwt.verify(token, config.get('jwtKey'))
          console.log('\ntokenCheck: decoded = ', decoded)
          req.user = decoded
          next()
        }
        catch(ex) {
          console.log('tokenCheck ex: ', ex)
          res.status(401).send('Invalid token')
        }
      }

      module.exports = tokenCheck


    ----------- /middleware/admin.js ------------------------

      module.exports = function(req, res, next) {
        console.log('\nTu middleware: admin !')
        if(!req.user.isAdmin) return res.status(403).send('Access denied')
        next()
      }

_________________________________________________________________________________________________________
75) node - error handling

    Ponieważ async/ await, nie ma wbudowanej obsługi błedów,
    musisz mu ją zapewnić ujmując awaity w trajkacza

    Dzięki niemu, apka nie wywali się po jakiejś awarii, lecz będzie działać dalej

    By się przekonać czy obsługa błędów działa, wbij throw Error('costam'):

    router.post('/', async (req, res) => {
      try {
        throw Error('Frołnięty eroras !')

        const takenPassword = await User.findOne({ password: user.password })
        const hashed = await bcrypt.hash(user.password, salt)
        let savedUser = await User(user).save()

        res.header('x-auth-token', token).send(savedUser)
      }
      catch(ex) {
        console.log('users / catchu = ', ex.message)
        res.status(500).send('Coś siem spsuło')
      }
    })

_________________________________________________________________________________________________________
76) node - error handling: try / catch jako middleware

    a) do app.js dodaj:

        const error = require('./middleware/error')
        (..)
        app.use(error)  // jako ostatni z app.use'ków

    b) users.js - do sygnatury route'y dodaj na końcu 'next

        router.post('/', async (req, res, next) => {

    c) .. i dodaj jego wywołanie po catch'u:

        catch (ex) {
          next(ex.message)
        }

    d) stwórz mware z obsługą błędu - /middleware/error.js
       W jego sygnaturze, umieść na pczątku 'err' a na końcu 'next'

         module.exports = function(err, req, res, next) {

    ---------------- app.js -----------------------------

      const express = require('express')
      const app = express()
      const users = require('./routes/users')
      const auth = require('./routes/auth')
      const error = require('./middleware/error')

      app.use(express.json())
      app.use('/api/users', users)
      app.use('/api/auth', auth)
      app.use(error)

      app.listen(3000)

    ---------------- /routes/users.js -------------------

    router.post('/', async (req, res, next) => {

      try {
        throw Error('Frołnięty eroras !')

        const takenEmail = await User.findOne({ email: user.email })
        const salt = await bcrypt.genSalt(10)
      }
      catch (ex) {
        next(ex.message)
      }
    })

    ---------------- /middleware/error.js -------------------

    module.exports = function(err, req, res, next) {

      // Log the exception
      console.log('siem spsuło: ', err)
      res.status(500).send('Coś siem spsuło: '+ err)
    }

_________________________________________________________________________________________________________
77) node - error handling: express-async-errors

      Przyjemniejszą alternatywą dla trajkacza jest ww pakiet
      Ale jak jego nazwa wskazuje, działa tylko w sytuacjach asynchronicznych,
      czyli przy route'ach lub innych async/await'ach

      Tak więc w app.js które nie jest async, nie pomoże

      Wystarczy go zaimportować w głównej app.js
      Nie trzeba używać trajkacza, a efekt jest ten sam

      yarn add express-async-errors

      ---------------- app.js -----------------------------

      require('express-async-errors')
      const express = require('express')
      const app = express()
      const users = require('./routes/users')
      const auth = require('./routes/auth')

      app.use(express.json())
      app.use('/api/users', users)
      app.use('/api/auth', auth)

      app.listen(3000)

    ---------------- /routes/users.js -------------------

    router.post('/', async (req, res, next) => {
      throw Error('Frołnięty eroras !')
      const takenEmail = await User.findOne({ email: user.email })
      const salt = await bcrypt.genSalt(10)
    })

_________________________________________________________________________________________________________
78) node - error logging: winston

      Udemy - Node Complete Guide to Build RESTful APIs
        11. Handling and Logging Errors  #6. Logging Errors

      yarn add winston winston-mongodb

      Error levele do:
        error
        warn
        info
        verbose
        debug
        silly

      Loguje się je, dodając jako ostatni z app.use:
        app.use(error)

      .. i tworząc mware error.js, jak poniżej

      Teraz by go odpalić, wystarczy ustawić w Postmanie
      POST lub GET na ścieżkę: localhost/api/users

    ---------------- app.js -----------------------------

      require('express-async-errors')
      const winston = require('winston')
      const config = require('config')
      const express = require('express')
      const app = express()
      const users = require('./routes/users')
      const auth = require('./routes/auth')
      const error = require('./middleware/error')

      app.use(express.json())
      app.use('/api/users', users)
      app.use('/api/auth', auth)
      app.use(error)

      console.log("config.get('jwtKey' = ", config.get('jwtKey'))

      app.listen(3000)

    ---------------- /middleware/error.js -------------------

      const winston = require('winston')
      require('winston-mongodb')

      const logger = winston.createLogger({
        transports: [
          new winston.transports.Console(),
          new winston.transports.File({ filename: 'logs.log' }),
          new winston.transports.MongoDB({ db: 'mongodb://localhost/users' })
        ]
      })

      module.exports = function(err, req, res, next) {
        logger.error(err.stack)

        console.log('siem spsuło: ', err)
        res.status(500).send('Coś siem spsuło: '+ err.message + err)
      }

    ---------------- /routes/users.js -------------------

      router.post('/', async (req, res, next) => {
        throw Error('Frołnięty eroras !')
        const takenEmail = await User.findOne({ email: user.email })
        const salt = await bcrypt.genSalt(10)
      })

_________________________________________________________________________________________________________
79) node - error logging: błędy synchroniczne

    Jeśli trafi się błąd inny niż opisany w punkcie 77),
    to nie zostanie ww metodą wyłapany

    Może to być promise bez catcha (unhandled rejection) albo
    dowolny inny np zerwanie połaczenia z db (uncaughtException)

    W tym celu, w głównym pliku trzeba je wyłapać przez process.on()
    przechwytując po nazwie błedu zwracanego przez padnięty proces

    Następnie, proces trzeba ubić, bo jest w stanie unclean
    Po ubiciu, dzięki menadżerowi procesów (np pm2, forever)
    apka zostanie odpalona ponownie

    UWAGA !
      Ubijaj proces tylko przy błędzie synchronicznym

    ---------------- app.js -----------------------------

      const winston = require('winston')
      require('winston-mongodb')
      const express = require('express')
      const app = express()

      app.use(express.json())

      const logger = winston.createLogger({
        level: 'warn',
        format: winston.format.json(),
        transports: [
          new winston.transports.Console(),
          new winston.transports.File({
            filename: 'logs.log'
          }),
          new winston.transports.MongoDB({
            db: 'mongodb://localhost/users'
          })
        ]
      })

      process.on('unhandledRejection', ex => {
        console.log('WE GOT AN UNHANDLED REJECTION !')
        winston.error(ex.message, ex)
        process.exit(1)
      })

      process.on('uncaughtException', ex => {
        console.log('WE GOT AN UNCAUGHT EXCEPTION !')
        winston.error(ex.message, ex)
        process.exit(1)
      })

      throw Error('Something failed during startup !')

      app.listen(3000)

_________________________________________________________________________________________________________
80) node - refaktoring app.js

      Z głównego pliku app.js, warto przenieść część kodu gdzie indziej
      Zrób katalog /startup a w nim podkatalogi z przeniesionym kodem
      a potem zaimportuj go w app.js

      Struktura katalogów końcowej apki:

        app.js

          /config
            custom-environment-variables.json
            default.json
            development.json
            production.json

          /middleware
            admin.js
            error.js
            tokenCheck.js

          /models
            user.js

          /public
            readme.txt

          /routes
            auth.js
            courses.js

          /startup
            config.js
            db.js
            logging.js
            routes.js

      Pakiety (package.json):
        bcrypt: 2.0.1,
        config: 1.30.0,
        debug: 3.1.0,
        express: 4.16.3,
        express-async-errors: 3.0.0,
        express-jwt: 5.3.1,
        fawn: 2.1.5,
        fetch: 1.1.0,
        global: 4.3.2,
        helmet: 3.12.1,
        joi: 13.4.0,
        jsonwebtoken: 8.3.0,
        lodash: 4.17.10,
        mongodb: 3.1.0,
        mongoose: 5.1.7,
        morgan: 1.9.0,
        winston: 3.0.0,
        winston-mongodb: 4.0.0-rc1


    ------ /app.js ------------------------------------------

      const express = require('express')
      const app = express()

      require('./startup/logging')()
      require('./startup/routes')(app)
      require('./startup/db')()
      require('./startup/config')()

      app.listen(3000)

    ------ /startup/logging.js ------------------------------

      const winston = require('winston')
      require('winston-mongodb')
      require('express-async-errors')


      module.exports = function() {
        const logger = winston.createLogger({
          level: 'info',
          format: winston.format.json(),
          transports: [
            new winston.transports.Console({ colorize: true, prettyPrint: true}),
            new winston.transports.File({ filename: 'logs.log' }),
            new winston.transports.MongoDB({ db: 'mongodb://localhost/errors' })
          ]
        })

        process.on('uncaughtException', ex => {
          console.log('WE GOT AN UNCAUGHT EXCEPTION !')
          logger.error(ex.message, ex)
          process.exit(1)
        })

        process.on('unhandledRejection', ex => {
          console.log('WE GOT AN UNHANDLED REJECTION !')
          logger.error(ex.message, ex)
          process.exit(1)
        })
      }

    ------ /startup/routes.js -------------------------------

      const express = require('express')
      const users = require('../routes/users')
      const auth = require('../routes/auth')

      module.exports = function(app) {
        app.use(express.json())
        app.use('/api/users', users)
        app.use('/api/auth', auth)
      }

    ------ /startup/db.js -------------------------------

      const mongoose = require('mongoose')
      const winston = require('winston')

      module.exports = function() {
        mongoose.connect('mongodb://localhost/users')
          .then(() => winston.info('Connected !'))
      }

    ------ /startup/config.js -------------------------------

      const config = require('config')

      module.exports = function() {
        const jwtKey = config.get('jwtKey')

        if(jwtKey) {
          console.log('jwtKey = ', jwtKey)
        }
        else {
          throw new Error('BRAK jwtKey')
        }
      }

_________________________________________________________________________________________________________
100) streams - pipe serwer

      Treść wejściowa będzie skopiowana na wyjście

      a) zrob plik 1.js
          var http = require('http')

          var handleRequest = function(request, response) {
            response.writeHead(200)
            request.pipe(response)
          }

          var server = http.createServer(handleRequest)
          server.listen (8080, 'localhost')

      b) odpal go spod cmd: node 1.js

      c) wyślij GitBashem: curl -d "Czapka" http://localhost:8080

      d) GitBash wyświetli zwróconą przez serwer Czapke
_______________________________________________________________________
101) streams - pipe plik

      Treść pliku src będzie skopiowana do dst

      var fs = require('fs')
      var src = fs.createReadStream('kupa.txt')
      var dst = fs.createWriteStream('siku.txt')

      src.pipe(dst)
_______________________________________________________________________
102) streams - pipe serwer/plik

      a) zrób plik 1.js i odpal go spod cmd: node 1.js

          var fs = require('fs')
          var http = require('http')

          http.createServer ( function ( request, response ) {
              var newFile = fs.createWriteStream ( 'siku.txt' )
              request.pipe ( newFile )
              response.end ( 'uploaded !' )
          } ).listen ( 8080 )

      b) zrób plik kupa.txt o dowolnej treści

      c) GitBash
            curl --upload-file kupa.txt http://localhost:8080

      d) pojawi się plik siku.txt o zawartości takiej jak kupa.txt
_______________________________________________________________________
103) streams - pipe file upload

      a) zrób plik 1.js i odpal go spod cmd: node 1.js

          var http = require('http')

          http.createServer(function(request, response) {

            var newFile = fs.createWriteStream('nowy.mp4')
            var fileBytes = request.headers['content-length']
            var uploadedBytes = 0

            request.pipe(newFile)

            request.on('data', function(chunk) {
                uploadedBytes += chunk.length
                var progress = (uploadedBytes / fileBytes) * 100
                response.write("progress: " + parseInt(progress, 10) + "%\n")
            })

          }).listen(8080)

        b) skopiuj jakiś duży plik np 1.mp4 do biezacego katalogu

        c) GitBash
              curl --upload-fiile 1.mp4 http://localhost:8080

        d) pojawią sie linijki pokazujące progres % a w końcu plik zostanie skopiowany na nowy.mp4
_______________________________________________________________________
110) streams - readable

      var request = require('request')

      var s = request('http://pluralsight.com')

      s.on('data', function(chunk) {
          console.log('____________________________________________ Data _______________________________________________' + chunk)
          //console.log(chunk)
      })

      s.on('end', function() {
          console.log('____________________________________________ End _______________________________________________' )
      })
___________________________________________________________________________
111) streams - writeable

      console.log('Is stdout writeable ?' + process.stdout.writable)

      process.stdout.write('Heloł')
      process.stdout.write(' Łerld')
___________________________________________________________________________
112) streams

        a) stwórz 400 megowy plik odpalając scrypt create
        b) odpal serwujący go serwer
        c) rostfusz task managera > processes i ustaw się na procesie node
        d) curl localhost:8000

        Z począkowych 10 mega, zajętość RAMu skoczy na 440,
        bo serwer buforuje cały plik w pamięci. Przy wiekszym pliku,
        przekorczony zostanie limit objętości i nie będzie on serwowany

        Rozwiązaniem jest stream - patrz następny punkt

      ---------- create.js ------------------------------

        const fs = require('fs')
        const file = fs.createWriteStream('./bigFile')

        for(let i = 0; i < 1e6; i++) {
          file.write('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proident aute proident do eu voluptate fugiat velit elit dolor non. Id aute cupidatat aliquip duis commodo ex nisi proident magna. Adipisicing id consectetur ex mollit ullamco dolore. Labore irure magna in dolor dolor pariatur irure sunt amet qui dolor aliqua eiusmod ullamco. Officia enim nulla cillum culpa. Cillum culpa proident est veniam et do laboris sunt ad incididunt ullamco.')
        }

        file.end()

      ---------- create_big_file.js ------------------------------

        const fs = require('fs')
        const server = require('http').createServer()

        server.on('request', (req, res) => {
          fs.readFile('./bigFile', (err, data) => {
            if(err) throw err
            res.end(data)
          })
        })

        server.listen(8000)

___________________________________________________________________________
113) streams - createReadStream i createWriteStream

      Zamiast jak w punkcie powyżej buforować cały plik w pamięci,
      node streamuje go czank po czanku, dzięki czemu zużycie pamięci,
      zamiast byc równe całej objętości pliku np 400 mega,
      skacze tylko o kilkanaście

      ---------- create.js --------------------------------------

        const fs = require('fs')
        const file = fs.createWriteStream('./bigFile')

        for(let i = 0; i < 1e6; i++) {
          file.write('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proident aute proident do eu voluptate fugiat velit elit dolor non. Id aute cupidatat aliquip duis commodo ex nisi proident magna. Adipisicing id consectetur ex mollit ullamco dolore. Labore irure magna in dolor dolor pariatur irure sunt amet qui dolor aliqua eiusmod ullamco. Officia enim nulla cillum culpa. Cillum culpa proident est veniam et do laboris sunt ad incididunt ullamco.')
        }

        file.end()

      ---------- create_big_file.js ------------------------------

        const fs = require('fs')
        const server = require('http').createServer()

        server.on('request', (req, res) => {
          const src = fs.createReadStream('./bigFile')
          src.pipe(res)
        })

        server.listen(8000)
___________________________________________________________________________
114) streams - writable

      Poniższe, po wciśnięciu Entera, kopiuje na stdout
      to co się wpisze do konsoli

      const { Writable } = require('stream')

      const outStream = new Writable({
        write(chunk, encoding, callback) {
          console.log(chunk.toString())
          callback()
        }
      })

      process.stdin.pipe(outStream)

___________________________________________________________________________
115) streams - readable

      const { Readable } = require('stream')

      const inStream = new Readable()

      inStream.push('ABCDEFG')
      inStream.push(null)

      inStream.pipe(process.stdout)

___________________________________________________________________________
117) buffer

      Niskopoziomowa struktura danych, w formie binarnej
      Najczęściej dostaje się je z pliku lub strumienia tcp/ip jako octety
      i nie może być natywnie przetwarzana przez js

      Ponieważ jest to kawałek pamięci poza silnikiem V8,
      raz ustalony rozmiar bufora, nie może być zmieniony

      a) tworzenie
          Buffer.alloc(8)  - wypełniony bufor określonego rozmiaru
          Buffer.allocUnsafe(8)  - niewypełniony bufor tzn wypełniony przypadkowymi danymi

      b) wypełnianie
          Buffer.allocUnsafe(8).fill()  - wypełniony zerami

      c) czytanie
          Buffer.allocUnsafe(8).toString()  -



___________________________________________________________________________
118) buffer - write, toString, toJSON, compare, equals, slice

      Odpal REPLa wpisując w konsoli 'node'

      const buf = new Buffer(5)
      buf.write('hello world')
      buf.toString()  // 'hello'
      buf.write('hello', 2) // 2 to offset
      buf.toString()  // 'hehel'
      buf.write('xxxx', 2, 1)  // 1 to ilość znaków
      buf.toString()  // 'hexel'
      buf.write('xxxx', 2, 1, 'utf8')  // utf8 jest domyślne

      buf1 = new Buffer('1234')
      buf2 = new Buffer('0123')
      buf3 = new Buffer('1234')

      buf1.compare(buf2)  // 1 - nie równe
      buf1.compare(buf3)  // 0 - równe

      buf1.equals(buf2)  // false
      buf1.equals(buf3)  // true

      buf1.toJSON()  // { type: 'Buffer', data: [ 49, 50, 51, 52 ] }

      buf4 = new Buffer('Hello World')
      buf5 = buf4.slice(0, 3)  // offset , ilość
      buf5.toString()  // Hel
      buf4.write('xxx')
      buf4.toString()  // xxxlo World
      buf5.toString()  // xxx
___________________________________________________________________________
120) events emitting


    Odpal node'a i wklej poniższe:
    --------------------------------------------------

    const EventEmitter = require('events').EventEmitter
    const emitter = new EventEmitter()

    const sayHi = () => console.log('Hi to you !')
    const sayBye = () => console.log('Bye to you !')

    emitter.on('hello', sayHi)  // listener
    emitter.on('bye', sayBye)

    --------------------------------------------------

    Wpisz z ręki poniższe:

    > emitter.emit('hello')  // Hi to you !
    > emitter.emit('bye')    // Bye to you !

    > emitter._events // { hello: [Function], bye: [Function]}

    emitter._events.hello.toString()  //  '() => console.log(\'No hej\')'

    emitter.removeListener('hello', sayHi)

    emitter._events  // { baj: [Function: sayBye] }
_______________________________________________________________________
130) websockets - client pinging server

    a) npm install ws
    b) node server.js
    c) chrom: client.html

    W cmd linie będzie widać przychodzące co 2s linijki:
        Message received: ping from client: 2:46:36 PM

    Zamknij zakładkę chroma w której otworzyłeś client.html
    i zobacz w cmd linie 'connection closed'

--------- client.html -----------------------------------------------

    <script>
        var socket = new WebSocket('ws://localhost:5000')

        socket.onopen = function(event) {
            window.setInterval(function() {
                socket.send('ping from client: ' + new Date().toLocaleTimeString() )
            }, 2000)
        }

    </script>

--------- server.js -----------------------------------------------

    var WebSocketServer = require('ws').Server
    var http = require('http')
    var port = process.env.PORT || 5000
    var server = http.createServer()
    server.listen(port)

    var wss = new WebSocketServer({ server: server })

    console.log('websocket server created !')

    wss.on('connection', function(ws) {
        console.log('websocket conn opened !')

        ws.on('message', function(message) {
            console.log('Message received: ' + message)
        })

        ws.on('close', function() {
            console.log('Websocket server conn: closed')
        })
    })
___________________________________________________________________________
131) websockets: server pinging client

    Po stronie serwera, w funkcji wss.on('connection.. ) dodaj słanie pinga

    var id = setInterval(function() {
        var message = 'ping from server: ' +  new Date().toLocaleTimeString()
        ws.send(message, function() { } )
    }, 1000)

   A po stronie klienta - odbieranie:

   socket.onmessage = function(event) {
       console.log(event.data)
   }

------------------ server.js ---------------------------------------------------

    var WebSocketServer = require('ws').Server
    var http = require('http')
    var port = process.env.PORT || 5000
    var server = http.createServer()
    server.listen(port)

    var wss = new WebSocketServer({ server: server })

    console.log('websocket server created !')

    wss.on('connection', function(ws) {
        console.log('websocket conn opened !')

        var id = setInterval(function() {
            var message = 'ping from server: ' +  new Date().toLocaleTimeString()
            ws.send(message, function() { } )
        }, 1000)

        ws.on('message', function(message) {
            console.log('Message received: ' + message)
        })

        ws.on('close', function() {
            console.log('Websocket server conn: closed')
            clearInterval(id)
        })
    })

------------------ client.html ----------------------------------------

    <script>
        var socket = new WebSocket('ws://localhost:5000')

        socket.onopen = function(event) {
            window.setInterval(function() {
                socket.send('ping from client: ' + new Date().toLocaleTimeString() )
            }, 2000)
        }

        socket.onmessage = function(event) {
            console.log(event.data)
        }

    </script>

___________________________________________________________________________
132) socket.io - barebone

----------------- client.html --------------------------

        <script src='./node_modules/socket.io/node_modules/socket.io-client/socket.io.js'> </script>

        <script>
                var socket = io('http://localhost:8000')   // lub    var socket = io('http://vps194685.ovh.net:8000')

                socket.on('alert', function(data) {
                    console.log( data )
                })
        </script>

----------------- server.js -----------------

        var server = require('http').createServer()
        var io = require('socket.io')(server)

        server.listen(8000)

        io.on('connection', function(socket) {
            var alert = 'hello from server: ' + Math.random()
            socket.emit('alert', alert)
        })
___________________________________________________________________________
133) socket.io - barebone html

    a) Otwórz client1.html i client2.html w osobnych oknach chroma

    b) Na serwerze zrób osobny katalog,
        zrób npm i socketio i
        stwórz plik server.js i
        odpal go: node server.js

----------------- server.js ---------------------------------------------------

    var io = require('socket.io')()

    io.on('connection', function(socket) {
        socket.emit('server', '(Server) : Jak mnie słyszysz ?   ' + (Math.random() * 10).toFixed(0) )        // wyślij paczkę o naglówku server 1 do każdego słuchającego tego portu

        socket.on('client1', function(data) {    // Jeśli przychodząca paczka będzie miała nagłówek 'client 1', to wyświetl ją
            console.log(data)
            socket.broadcast.emit('server', data)
        })

        socket.on('client2', function(data) {    // Jeśli przychodząca paczka będzie miała nagłówek 'client 1', to wyświetl ją
            console.log(data)
            socket.broadcast.emit('server', data)
        })

    })

    io.listen(8000)

----------------- client1.html -----------------

    <script src='./node_modules/socket.io/node_modules/socket.io-client/socket.io.js'> </script>
    <script src='https://code.jquery.com/jquery-2.1.4.min.js'> </script>

    <body>
        <h2>Client 1</h2>
        Wpisz cos <input id = "tresc" type = "text">
        <input id = "baton" type = "button" value="Send"/>
    </body>

    <script>
        var socket = io('http://vps194685.ovh.net:8000')

        socket.on('server', function(data) {  // jeśli przychodząca paczka
            console.log( data )
            $('body').append("<div>- " + data + "</div>")
        })

        $('#baton').on('click', function() {
            var zdanie = $('#tresc').val()
            if ( !zdanie )  return
            $('body').append("<div>- " + zdanie + "</div>")
            $('#tresc').val("")

            socket.emit('client1', '(Client1) : ' + zdanie)
        })

        $(document).keypress(function(e) {
            if(e.keyCode == 13) {                        // Enter
                $('#baton').trigger('click')
            }
        })

    </script>

----------------- client2.html -----------------

    <script src='./node_modules/socket.io/node_modules/socket.io-client/socket.io.js'> </script>
    <script src='https://code.jquery.com/jquery-2.1.4.min.js'> </script>

    <body>
        <h2>Client 2</h2>
        Wpisz cos <input id = "tresc" type = "text">
        <input id = "baton" type = "button" value="Send"/>
    </body>

    <script>
        var socket = io('http://vps194685.ovh.net:8000')

        socket.on('server', function(data) {  // jeśli przychodząca paczka
            console.log( data )
            $('body').append("<div>- " + data + "</div>")
        })

        $('#baton').on('click', function() {
            var zdanie = $('#tresc').val()
            if ( !zdanie )  return
            $('body').append("<div>- " + zdanie + "</div>")
            $('#tresc').val("")

            socket.emit('client2', '(Client2) : ' + zdanie)
        })

        $(document).keypress(function(e) {
            if(e.keyCode == 13) {                        // Enter
                $('#baton').trigger('click')
            }
        })

    </script>
_______________________________________________________________________
140) child_process

        Recepta na brak wielowątkowości - odpalanie osobnego procesu
        Poniższy kod, w win nie działa

        var exec = require('child_process').exec

        var child = exec('uptime', function(err, stdout, stderr) {
            if (err) {
                console.log( 'Erroras: ' + stderr )
            }
            else {
                console.log( 'Output is: ' + stdout )
            }
        })

        console.log( 'PID = ' + child.pid )
___________________________________________________________________________
141) child_process - spawn

    var spawn = require('child_process').spawn
    var ps = spawn( 'ps', ['ax'] )               // ustawienie procesu robiącego: ps ax
    var grep = spawn('grep', ['node'] )  //  ustawienie procesu robiącego: grep node

    ps.stdout.pipe(grep.stdin)                // przekazanie wyniku ps z jego wyjścia (stdout) na wejście grep (stdin)

    grep.stdout.pipe(process.stdout)   //  przekazanie wyjścia grepa (stdout) na wyjście procesu, czyli ekran


    ps.stderr.on('data', function(data) {
        console.log( 'ps stderr: ' + data )
    })

    ps.stderr.on('data', function(data) {
        console.log( 'grep stderr: ' + data )
    })
___________________________________________________________________________
142) child_process - fork

    2 gadające ze sobą procesy aka komunikacja międzyprocesowa

--------------- index.js ----------------------------

    var fork = require('child_process').fork

    var child = fork(__dirname + '/math.js')

    child.send( { cmd: 'double', liczba: 20 } )

    child.on('message', function(msg) {
        console.log( 'Tu index.js:  odpowiedź = ' + msg.odpowiedz )
        console.log( 'Tu index.js:  wysyłam msg = done' )
        child.send( { cmd: 'done' } )
    })

------------ math.js --------------------------------

    process.on('message', function(msg) {
        if ( msg.cmd === 'double' ) {
            console.log( '\nTu math. Poproszono mnie o podwojenie liczby = ' + msg.liczba )
            var wynik = msg.liczba * 2
            process.send( { odpowiedz: wynik } )
        }
        else if ( msg.cmd === 'done' ) {
            console.log( 'Tu math. Dostałem msg = done. Robię exit()' )
            process.exit()
        }
    })
------------------------------------------------------

//  Tu math. Poproszono mnie o podwojenie liczby = 20
//  Tu index.js:  odpowiedź = 40
//  Tu index.js:  wysyłam msg = done
//  Tu math. Dostałem msg = done. Robię exit()

___________________________________________________________________________
150) cluster

        a) wbij poniższe do pliku na serwerze np. index.js
        b) uruchom go: node index.js
        c) znajdź numer portu przez: lsof -i    - szukaj node w 1-szej kolumnie od lewej  // TCP *:59384 (LISTEN)
        d) z gitBasha odpal: curl http://vps194685.ovh.net:59384

        gitBasz pokaże kolejno:
            Hello from Worker #1 (pid undefined) with count = 1
            Hello from Worker #2 (pid undefined) with count = 1

            Hello from Worker #1 (pid undefined) with count = 2
            Hello from Worker #2 (pid undefined) with count = 2

            Hello from Worker #1 (pid undefined) with count = 3
            Hello from Worker #2 (pid undefined) with count = 3

            Failed to connect to vps194685.ovh.net port 59384: Connection refused

        Jak widać, klaster robi load balancing przekazując zadania na przemian każdemu z workerów
        Gdy każdy z nich przekroczy limit 3 zadań, zostaje zniszczony (patrz kod poniżej)

-------------------------------------------------------------------------
        var cluster = require('cluster')
        var http = require('http')
        var numWorkers = 2

        if ( cluster.isMaster ) {

            for (var i = 0 i < numWorkers i++) {
                console.log( '\nMaster: about to fork a worker' )
                cluster.fork()
            }

            cluster.on('fork', function(worker) {
                console.log( '\nMaster: fork event (worker ' + worker.id + ')'  )
            })

            cluster.on('online', function(worker) {
                console.log( '\nMaster: online event (worker ' +worker.id + ')'  )
            })

            cluster.on('listening', function(worker, address) {
                console.log( '\nMaster: fork event (worker ' +worker.id + ', pid: ' + worker.pid + ')'  )
            })

            cluster.on('exit', function(worker, code, signal) {
                console.log( '\nMaster: exit event (worker ' + worker.id + ')' )
            })
        }
        else {
            console.log( '\nWorker: worker # ' + cluster.worker.id + ' ready !' )
            var count = 0

            http.createServer(function(req, res) {
                res.writeHead(200)
                count++
                console.log( '\nWorker #' + cluster.worker.id - '  is incrementing count to ' + count )
                res.end('\nHello from Worker #' + cluster.worker.id + ' (pid ' + cluster.worker.pid + ') with count = ' + count + '\n' )

                if (count === 3) {
                    cluster.worker.destroy()
                }

           }).listen(process.env.PORT, process.env.IP )
        }

_______________________________________________________________________
160) skrypt

       a) znaleźć ścieżkę node'a
            which node  //    /usr/bin/node

       b) stworzyć plik nd   (nano nd)

           ---------------  /root/ nd -----------------
           #!/usr/bin/node

           console.log('Cześć fiuty !')
           --------------------------------------------

       c) ustawić uprawnienia
                chmod 755 nd

       d) Odpalić skrypt
                nd    // 'Cześć fiuty !'

_______________________________________________________________________
161) skrypt - uruchamianie

    Końcówkę .sh w nazwie skryptu można pominąć, dla szybszego wpisywania odpalanego skryptu

    ----------- a) skrypt tst (chmod 755 tst) -----------------

    #!/bin/bash
    df

    ----------- b) go.js ---------------------

    var sys = require('sys')
    var exec = require('child_process').exec

    function puts(error, stdout, stderr) { sys.puts(stdout) }
    exec("tst", puts)
___________________________________________________________________________
162) skryptu - cmd line arguments

      Odpal poniższe tak:
          node wywal.js dupa  // Hello dupa

      var name = process.argv[2]
      console.log("Hello " + name)
___________________________________________________________________________

163) skrypt - scraper GoogleTranslatora (choroby)

    // Plik tłumaczący angielskie nazwy chorób na polskie
    // W tym celu, z pliku chorobyScrap pobiera chorobę,
    // wysyła ją do Google Translatora,
    // odbiera jej tłumaczenie
    // oczyszcza je ze śmieci
    // i zapisuje jako 1 linię do pliku writeFile
    // Po czym, czeka zadaną losową ilość sekund (by nie wkurzać GT)

    var syncRequest = require('sync-request')
    var fs = require('fs')
    var array = fs.readFileSync('chorobyScrap.csv').toString().split('\r\n')
    var writeFile = 'writeFile.txt'
    var serverPath = "https://translate.google.pl/translate_a/single"

    function json(disease) {
        paczka = { "qs":  {
                    "client" : "t",
                    "sl" : "en",
                    "tl" : "pl",
                    "hl": "pl",
                    "dt" : "bd",
                    "dt" : "ex",
                    "dt" : "ld",
                    "dt" : "md",
                    "dt" : "qca",
                    "dt" : "rw",
                    "dt" : "rm",
                    "dt" : "ss",
                    "dt" : "t",
                    "dt" : "at",
                    "ie" : "UTF-8",
                    "oe" : "UTF-8",
                    "otf" : "2",
                    "srcrom" : "0",
                    "ssel" : "0",
                    "tsel" : "0",
                    "kc" : "8",
                    "tk" : "804694|681376",
                    "q" : disease
                   }}

        return paczka }
    function sleep(interwalek, losoweZwiekszenieInterwalka) {

           var losoweZwiekszenieInterwalka = Math.random() * losoweZwiekszenieInterwalka
           //console.log('47. losoweZwiekszenieInterwalka = ' + (losoweZwiekszenieInterwalka/1000) )

           var start = new Date().getTime()
           //console.log('Start = ' + start + ' ms' )

           while( new Date().getTime() < (start + interwalek + losoweZwiekszenieInterwalka) ) {  }
           var stop = new Date().getTime()
           console.log('53. Mineło ' + ((stop-start)/1000).toFixed(1) + ' ms' ) }
    function oczyscStringa(res, choroba) {
        var temp1 = res.replace(/\"/g, "")           //console.log('11. temp1 = ' + temp1)
        var temp1 = temp1.replace(/true/g, "")  //console.log('\n14. temp1 = ' + temp1)
        var temp1 = temp1.replace(/false/g, "") //console.log('\n15. temp1 = ' + temp1)

        var index_1 = temp1.indexOf( ",1," ) + 3
        //console.log('25. index_1 = ' + index_1)
        var index_2 = temp1.indexOf( ",", index_1 + 1 )
        //console.log('28. index_1 = ' + index_2)

        var slowo_1 = temp1.substring(index_1, index_2)
        //console.log('30. slowo_1 = ' + slowo_1)

        if (temp1.indexOf( ",2,", index_2 ) == -1) {
             var startIndex = res.indexOf( '32000' )
             var endIndex = res.indexOf( '",', startIndex )
             var slowo_1 = res.substring(startIndex, endIndex).replace(/\"/g, "").replace('[[', '').replace('32000,', '') + "\n"
             return slowo_1
        }

        var index_3 = temp1.indexOf( ",2,", index_2 ) + 3
        //console.log('33. index_3 = ' + index_3)

        var index_4 = temp1.indexOf( ",", index_3 + 1 )
        //console.log('28. index_4 = ' + index_4)

        var slowo_2 = temp1.substring(index_3, index_4)
        //console.log('40. slowo_2 = ' + slowo_2)

        if (temp1.indexOf( ",3,", index_4 ) == -1) return (slowo_1 + " " + slowo_2)

        var index_5 = temp1.indexOf( ",3,", index_4 ) + 3
        //console.log('44. index_5 = ' + index_5)

        var index_6 = temp1.indexOf( ",", index_5 + 1 )
        //console.log('28. index_6 = ' + index_6)

        var slowo_3 = temp1.substring(index_5, index_6)

        //console.log('51. slowo_3 = ' + slowo_3)

        if (temp1.indexOf( ",4,", index_6 ) == -1) return (slowo_1 + " " + slowo_2 + " " + slowo_3)

        var index_7 = temp1.indexOf( ",4,", index_6 ) + 3
        //console.log('55. index_7 = ' + index_7)

        var index_8 = temp1.indexOf( ",", index_7 + 1 )
        //console.log('58. index_8 = ' + index_8)

        var slowo_4 = temp1.substring(index_7, index_8)

        //console.log('51. slowo_4 = ' + slowo_4)


        if (temp1.indexOf( ",5,", index_8 ) == -1) return (slowo_1 + " " + slowo_2 + " " + slowo_3 + " " + slowo_4)

        var index_9 = temp1.indexOf( ",5,", index_8 ) + 3
        //console.log('66. index_9 = ' + index_9)

        var index_10 = temp1.indexOf( ",", index_9 + 1 )
        //console.log('69. index_10 = ' + index_10)

        var slowo_5 = temp1.substring(index_9, index_10)

        //console.log('73. slowo_5 = ' + slowo_5)


        if (temp1.indexOf( ",6,", index_10 ) == -1) return (slowo_1 + " " + slowo_2 + " " + slowo_3 + " " + slowo_4 + " " + slowo_5)

        var index_11 = temp1.indexOf( ",6,", index_10 ) + 3
        //console.log('160. index_11 = ' + index_11)

        var index_12 = temp1.indexOf( ",", index_11 + 1 )
        //console.log('163. index_12 = ' + index_12)

        var slowo_6 = temp1.substring(index_11, index_12)

        //console.log('167. slowo_6 = ' + slowo_6)

        return (slowo_1 + " " + slowo_2 + " " + slowo_3 + " " + slowo_4 + " " + slowo_5 + " " + slowo_6)  }
    function petlaWykonawcza(iloscSlow,  interwalek, losoweZwiekszenieInterwalka) {

        for (var licznik = 0 licznik < iloscSlow licznik++) {
            var choroba = array[ licznik ].split( "," )[ 0 ]
            var res = syncRequest( 'GET', serverPath, json( choroba ) ).body.toString('utf-8')
            var czystyRekord = oczyscStringa(res, choroba).replace(/\[/g, "").replace(/\]/g, "")

            console.log("\nLicznik = " + licznik)
            // console.log("\n60. res = " + res)
            console.log("\n\n61. choroba = " + choroba)
            console.log('\n\n62. czystyRekord = ' + czystyRekord)
            console.log('_________________________________________________________\n\n')

            var rekordDoZapisania = czystyRekord +"\n\n"
            fs.appendFileSync(writeFile, rekordDoZapisania)
            sleep(interwalek, losoweZwiekszenieInterwalka)
        }   }

    petlaWykonawcza(100, 5000, 4000)  // (iloscSlowZPliku, interwalek, losoweZwiekszenieInterwalka)
_______________________________________________________________________________________________________________
164) skrypt - matcher (vlookup 2 tabel)

    // To tu, to odpowiednik vlookupa w exlu
    // W jednym pliku są angielskie nazwy choróbsk
    // a w drugim słownik z ich polskimi tłumaczeniami
    // Chodzi o to, by każdej chorobie, przyporządkować tłumaczenie
    // Powstały w ten sposób plik: choroba, tłumaczenie, zapisuje się do 3-go pliku (zmaczowaneChoroby)

    var fs = require('fs')
    var choroby = fs.readFileSync('choroby.csv').toString().split('\r\n')
    var slownik = fs.readFileSync('slownik.csv').toString().split('\r\n')
    var writeFile = 'zmaczowaneChoroby.txt'

    for (var licznik = 0 licznik < choroby.length licznik++) {

        for (var i = 0 i < slownik.length i++) {

              if ( choroby[ licznik ]  === slownik[i].split( "," )[ 0 ] ) {
                  console.log( choroby[ licznik ] + " = " +slownik[ i ].split( "," )[ 1 ])
                  console.log('_____________________________________________\n')
                  var rekordDoZapisania = choroby[ licznik ] + "," + slownik[ i ].split( "," )[ 1 ] + "\n\n"
                  fs.appendFileSync( writeFile, rekordDoZapisania )
              }
         }
     }
_______________________________________________________________________________________________________________
165) skrypt - scraper gps > adres (google maps)

    UWAGA !!
        node-libcurl działa asynchronicznie

    npm install -g node-libcurl
    npm install node-libcurl
---------
    var Curl = require( 'node-libcurl' ).Curl
    var curl = new Curl()

    url = 'http://maps.googleapis.com/maps/api/geocode/json?latlng=50.0672,19.9509&sensor=true_or_false'

    curl.setOpt( 'URL', url )
    curl.setOpt( 'FOLLOWLOCATION', true )

    curl.on( 'end', function( statusCode, body, headers ) {
        this.close()
        var json = JSON.parse(body)
        console.log(" formatted_address = " + json.results[0].formatted_address )   // Topolowa 5, 31-512 Kraków, Poland
    })

    curl.on( 'error', curl.close.bind( curl ) )
    curl.perform()

_______________________________________________________________________________________________________________
166) skrypt - scraper gps > adres (google maps) - pełny

        !! UWAGA !!
        Skrypt zapisuje do pliku dopiero jak ściągnie wszystkie rekordy, przy czym zapisuje je
        czyli nie w kolejności rekordów pobieranych z pliku.
        Najwyraźniej libcurl działa asynchronicznie
        Dlatego na początku każdego rekordu dopisałem numer porządkowy (licznik),
        by wyniki posortować po nim w sublajmie i go wyciąć

        // Skrypt do pobierania z google maps adresów na podstawie współrzędnych (lat, lon)
        // a) wczytuje plik .csv ze współrzędnymi,
        // b) dla każdego z rekordów pobiera lat i lon
        // c) wysyła jed do servera google maps
        // d) dostaje adres
        // e) zapisuje na dysku plik w formacie lat, lon, adres

        var fs = require('fs'),
              array = fs.readFileSync('./krk-wwa.txt').toString().split('\r\n'),
              Curl = require( 'node-libcurl' ).Curl,
              writeFile = './adresy_z_gmaps.txt',
              urlPrefix = 'http://maps.googleapis.com/maps/api/geocode/json?latlng='

        function  slijPytanie(licznik, interwalek, losoweZwiekszenieInterwalka) {

             var lat = array[ licznik ].split( "," )[ 0 ]
             var lon = array[ licznik ].split( "," )[ 1 ]
             var timestamp = array[ licznik ].split( "," )[ 2 ]
             var url = urlPrefix + lat + "," + lon
             var curl = new Curl()
             curl.setOpt( 'FOLLOWLOCATION', true )
             curl.setOpt( 'URL', url )

              curl.on( 'end', function( statusCode, body, headers ) {
                 this.close()

                 var json = JSON.parse(body)
                 var formatted_address =  json.results[0].formatted_address
                 formatted_address = formatted_address.replace(/,/g, "").replace("Poland", "")

                 var regexKoduPocztowego = /[0-9]{2}-[0-9]{3}/
                 formatted_address = formatted_address.replace(regexKoduPocztowego, "").replace("  ", " ")

                 console.log( licznik + ' ' + formatted_address  )

                  var t = new Date( parseInt( timestamp ) ).toLocaleTimeString( [], { hour: '2-digit', minute:'2-digit', hour12: false  } )
                  var d = new Date( parseInt( timestamp ) )

                  var time = t + '       ' +
                                  d.getDate() + "-" +
                                ( d.getMonth() + 1 ) + "-" +
                                ( d.getYear() + 1900 )

                 var rekordDoZapisania = licznik + ", " + lat + "," + lon + "," + formatted_address + "," + timestamp + "," + time + "\n"
                 fs.appendFileSync(writeFile, rekordDoZapisania)
             })

            curl.on( 'error', curl.close.bind( curl ) )
            curl.perform()

           sleep(licznik, interwalek, losoweZwiekszenieInterwalka)
        }

        function sleep(licznik, interwalek, losoweZwiekszenieInterwalka) {
               var losoweZwiekszenieInterwalka = Math.random() * losoweZwiekszenieInterwalka
               var start = new Date().getTime()

               while( new Date().getTime() < (start + interwalek + losoweZwiekszenieInterwalka) ) {  }
               var stop = new Date().getTime()
               console.log(licznik + '.  Minęło ' + ((stop-start)/1000).toFixed(0) + ' s' )
        }

        for ( var licznik = 0 licznik < 94  licznik++ )  {
            slijPytanie( licznik, 7000, 5000 )
        }
_______________________________________________________________________________________________________________
167) cheerio - hello world

      const axios = require('axios')
      const cheerio = require('cheerio')

      const html = '<h3 class="title">I have a bunch of questions on how to</h3>'
      const h3 = cheerio.load(html)
      console.log(h3.html())
      console.log(h3.text())

_______________________________________________________________________
168) cheerio - program tv

      Wyciągnięcie ze strony oneta:
        a) listy kanałów (na stronie nr 1, chwilowo)
        b) programu tv na tydzień do przodu dla kazdej ze 140 stacji (7 stron)
        c) z poniższymi pętlami opóźniającymi, wykonanie nie zostało przerwane
           i trwało łącznie 9 minut

        d) w obecnym formacie (--jsonArray), trzeba ręcznie usunąć przecinek
           po ostatnim rekordzie i ująć całość w nawiasy kwadratowe

        e) jeśli miałby to scrapować i ładować do mLaba jakiś skrypt,
           lepiej użyć wersji bez flagi --jsonArray, tylko z poniższego skryptu
           trzeba wyciąć wstawianie przecinka po każdym rekordzie -
           w jednej z końcowych linii:

        f) "id":"0700103"
             07  - kolejny dzień (00 = dziś)
             001 - stacja (TVP 1)
             03  - seans ('Crusoe')




    ------------------------------------------------------

  const fs = require('fs')
  const axios = require('axios')
  const cheerio = require('cheerio')

  const fileSave = './1.json'
  const urlPrefix = 'https://programtv.onet.pl/?dzien='
  function categoryCheck(type) {
    const arraySerial = ['serial', 'telenowela']
    const arrayFilm = ['film', 'komedi', 'dramat', 'horror', 'thriller', 'western']
    const arrayEntertainment = ['rozrywk', 'teleturniej', 'show', 'muzycz', 'kabaret']
    const arrayKids = ['animowan', 'familijn', 'dzieci']
    const arrayNews = ['informac', 'publicysty']

    const arraySport = [
      'sport',
      'piłka nożn',
      'piłka ręczn',
      'piłkars',
      'siatkówk',
      'badminton',
      'narciars',
      'łyżwiars',
      'golf',
      'żeglarstwo',
      'tenis',
      'boks',
      'wyścigi samochod',
      'koszykówka',
      'bilard',
      'bobsleje',
      'biathlon',
      'biatlon',
      'kombinacja norweska',
      'biegi narciarskie',
      'wyścigi motocyklowe',
      'snowboard',
      'saneczkarstwo',
      'kolarstwo',
      'hokej',
      'lekkoatletyka',
    ]

    const isFilm = arrayFilm.map(el => type.includes(el)).includes(true)
    const isSerial = arraySerial.map(el => type.includes(el)).includes(true)
    const isEntertainment = arrayEntertainment.map(el => type.includes(el)).includes(true)
    const isKids = arrayKids.map(el => type.includes(el)).includes(true)
    const isSport = arraySport.map(el => type.includes(el)).includes(true)
    const isNews = arrayNews.map(el => type.includes(el)).includes(true)

    if (isKids) {
      return 'dla dzieci'
    }
    else if (isSport) {
      return 'sport'
    }
    else if (isNews) {
      return 'wiadomosci'
    }
    else if (isSerial) {
      return 'serial'
    }
    else if (isFilm) {
      return 'film'
    }
    else if (isEntertainment) {
      return 'rozrywka'
    }
    else return 'inne'
  }

  const changeCategories = () => {
    const data = JSON.parse(fs.readFileSync('./tv1.json'))
    data.map(el => {
      el.category = categoryCheck(el.type)
      fs.appendFileSync('./tvNewCategories.json', JSON.stringify(el) + ',\n')
    })
  }

  function processing(res, day, page, channelFrom = 1, channelTo = 21) {
    const weekDayNames = ['Nie', 'Pon', 'Wt', 'Śr', 'Czw', 'Pt', 'Sob']
    const monthNames = ['Sty', 'Luty', 'Mar', 'Kwi', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Paź', 'Lis', 'Gru']
    const $ = cheerio.load(res.data)

    for (let channelNo = channelFrom; channelNo < channelTo; channelNo++) {
      // 1-4
      const channel = $(`#boxTVHolder${channelNo}`)
        .find('span.tvName')
        .text()
        .replace(/\t/g, '')
        .replace(/\n/g, '')

      const channels = $(`#boxTVHolder${channelNo} li`)

      channels.each((i, el) => {
        const id = day.toString().padStart(2, '0') + ((page - 1) * 20 + channelNo).toString().padStart(3, '0') + i.toString().padStart(2, '0')
        const time = $(el)
          .find('.hour')
          .text()
          .replace(/\t/g, '')
          .replace(/\n/g, '')
          .split(':')

        const timestampTodayMidnight = new Date().setUTCHours(0, 0, 0, 0) + day * 1000 * 60 * 60 * 24

        let hours = parseInt(time[0])
        let minutes = parseInt(time[1])

        hours = hours < 3 ? hours + 24 : hours
        const milliseconds = hours * 60 * 60 * 1000 + minutes * 60 * 1000
        hours = hours > 23 ? hours - 24 : hours

        let timestamp = timestampTodayMidnight + milliseconds

        const dateTimestamp = new Date(timestamp)
          .toISOString()
          .slice(0, 16)
          .replace('T', ' ')

        let date = new Date(timestamp).toISOString().slice(0, 10)

        const dayName = weekDayNames[new Date(date).getDay()]
        const dayOfMonth = new Date(date).getDate()
        const monthName = monthNames[new Date(date).getMonth()]
        const dayString = dayName + ' ' + dayOfMonth + ' ' + monthName

        const link =
          '<a href="https://programtv.onet.pl' +
          $(el)
            .find('.title')
            .find('a')
            .attr('href') +
          '">Link</a>'

        const title = $(el)
          .find('.title a')
          .text()
          .replace(/\t/g, '')
          .replace(/\n/g, '')

        const type = $(el)
          .find('.type')
          .text()
          .replace(/\t/g, '')
          .replace(/\n/g, '')

        const category = categoryCheck(type)

        const seans = {
          id,
          channel,
          dateTimestamp,
          dayString,
          date,
          time: hours + ':' + minutes.toString().padStart(2, '0'),
          timestamp,
          title,
          category,
          type,
          link,
        }

        fs.appendFileSync(fileSave, `${JSON.stringify(seans)},\n`)
      })
    }
    fs.appendFileSync(fileSave, `\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`)
  }

  const download = (day, page, channelFrom = 1, channelTo = 21) => {
    const url = `${urlPrefix + day}&strona=${page}`
    const config = { headers: { 'User-Agent': 'Mozilla/5.0' } }

    console.log('day = ' + day + ', page = ' + page + ', channelFrom = ' + channelFrom + ', channelTo = ' + channelTo)

    return axios.get(url, config)
      .then(res => processing(res, day, page, channelFrom = 1, channelTo = 21))
      .catch(err => {
        fs.appendFileSync(fileSave, err)
        console.log('Erorek: ', err)
      })
  }
  async function massDownload() {
    console.time('massDownload')
    const arr = []

    for (let day = 11; day < 13; day++) {
      for (let page = 1; page < 8; page++) {
        arr.push(await download(day, page))
      }
    }

    Promise.all(arr)
      .then(res => {
        console.log(res)
        console.timeEnd('massDownload')
      })
      .catch(err => console.log('Erorek: ', err))
  }

  massDownload()


  /*
  mongoimport -h ds163054.mlab.com:63054 -d tvui -c tvui1 -u nabu -p kupa1312 --file 1.json --jsonArray
  mongoimport -h ds235437.mlab.com:35437 -d tvui2 -c tvui2 -u nabu -p kupa1312 --file 1.json --jsonArray

  */

_______________________________________________________________________
169) skrypt - cheerio.js: memrise

      Skrapowanie słów do formatu kłizla

      ------------------------------------------------------------
        const fs = require('fs')
        const axios = require('axios')
        const cheerio = require('cheerio')
        const fileSave = '1.json'
        const config = { headers: { 'User-Agent': 'Mozilla/5.0' } }

        let COURSE_URL = ''
        COURSE_URL = ''

        const LESSONS_START = 1
        const LESSONS_END = 54

        function fetchWords(lesson) {
          console.log('lesson = ' , lesson)
          const url = COURSE_URL + lesson
          console.log('url = ' , url)

          axios
            .get(url, config)
            .then(res => {
              const $ = cheerio.load(res.data)
              const allWords = []
              let allWordsString = ''

              $('.col_a.col.text, .col_b.col.text').each(function(i, elem) {
                allWords[i] = $(this).text()
              })

              for (let i = 0; i < allWords.length; i = i + 2) {
                allWordsString += allWords[i] + ', ' + allWords[i+1] + ';' + '\n'
              }

              fs.appendFileSync(fileSave, allWordsString)
              fs.appendFileSync(fileSave, '\n\n_________________________________________\n\n')
            })
            .catch(err => {
              fs.appendFileSync(fileSave, err)
              console.log('Erorek: ', err)
            })
          }

          async function massDownload() {
            console.time('massDownload')
            const arr = []

            for (let lesson = LESSONS_START; lesson < LESSONS_END + 1; lesson++) {
              arr.push(await fetchWords(lesson))
            }

            Promise.all(arr)
            .then(res => {
              console.log(res)
              console.timeEnd('massDownload')
            })
            .catch(err => {
              fs.appendFileSync(fileSave, err)
              console.log('Erorek: ', err)
            })
        }

        massDownload()



_______________________________________________________________________________________________________________
170) Funkcje wbudowane (built-in functions) - os

        var os = require('os')
        console.log('host = ' + os.hostname())

        var free =  os.freemem()/1024/1024/1024
        console.log('free = ' + free)

        var total = os.totalmem()/1024/1024/1024
        console.log('total = ' + total)
        console.log('freePercent = ' + (free / total) )
_______________________________________________________________________________________________________________
171) Argumenty z linii komend (yargs)

      Odpalając apkę, mozna jej podać parametry:
        node app raz dwa trzy

      Lepszą od wbudowanej obsługi parametrów, daje pakiet yargs
      Osobliwie, z pary:
        --nazwaparametru wartość
      .. tworzy obiekt

     -------------- czysty node -------------------------

      console.log(process.argv)     // argv = argument vector
      const imie = process.argv[2]
      console.log(`Cześć ${imie}` )

     ------------- yargs ---------------------------------

      yarn add yargs

       console.log('process = ', process.argv)
       console.log('\nfirst argv = ', process.argv[2])  // first argv =  raz
       console.log('\nyargs = ', yargs.argv)            // yargs =  { _: [ 'raz', 'dwa', 'trzy' ], '$0': 'app' }

       console.log('yargs.title = ', yargs.argv.title) // node app --title dupa
                                                       // yargs.title =  dupa
_______________________________________________________________________________________________________________
172) Node debugger (inspect)

      Komenda:
         node inspect app
      odpala tryb debugowania. Do kolejnych komend przechodzi się gniotąc 'n',
      REPL'a odpala się komendą: 'repl'. Powrót do debuga przez 'ctrl + c'

      By rozpocząć debugowanie od jakiejś odległej linii kodu i nie musieć
      ileś razy gnieść 'n', wbij przed nią 'debugger' i po odpaleniu debugowania
      nagnieć 'c'

      -------- app.js -----------------------------

      const person = { name: 'Ania' }

      person.age = 25

      debugger

      person.name = 'Mike'

      console.log(person)

_______________________________________________________________________________________________________________
173) encodeURIComponent i decodeURIComponent vs json

      Zalecane jest używanie jsona, ale czasem serwer wymaga formatu urlencoded

      W nw przykładzie, działa i surowy string z adresem i enkodowany,
      ale w innych enkodowany może być wymagany

      -------------------------------------------------------------------------------------------
      const axios = require('axios')

      const address = '10 dolna street warsaw'
      const addressEncoded = encodeURIComponent(address)
      console.log('\naddressEncoded = ', addressEncoded)

      const addressDecoded = decodeURIComponent(address)
      console.log('addressDecoded = ', addressDecoded)

      const uri = `http://maps.googleapis.com/maps/api/geocode/json?address=${address}&sensor=false`
      const uri = `http://maps.googleapis.com/maps/api/geocode/json?address=${addressEncoded}&sensor=false`


      axios.get(uri)
        .then(res => console.log(JSON.stringify(res.data)))
        .catch(err => console.log(err))

      -------------------------------------------------------------------------------------------

      Jeśli nagłówek requesta słanego do serwera zawiera ContentType jak niżej,
      tzn, że zawarte w nim dane są w formie:

        a) "application/json"                    { Name : 'John Smith', Age: 23}
        b) "application/x-www-form-urlencoded"    www.yahu.com?name=John+Smith&nge=23

      Domyślnie <form method="post"> tag wysyła request z nagłówkiem:
        Content-Type:application/x-www-form-urlencoded

      Przy urlencoded, spacja nie może wystapić w query stringu, więc zamieniana jest na '+'
      Znaki nie alfanumeryczne (krzaki), zamieniane są na liczby hex: %HH - kod ASCII krzaka

      Key od value rozdzielany jest równasiem (key=value), a ich pary - ampersandem:
        name=John+Smith&nge=23

      Kiedyś urlencoded wystarczał, bo większość ludzi słała requesty wielkości:
        email=my@mail.com&name=John

      Przy obecnie słanych dużych i dość skomplikowanych obiektach, urlencoded wysiada
      Słabo sobie radzi ze strukturami zagnieżdżonymi. Np nie umi przesłać 2 tablic zawartych w trzeciej:
        [ [ a, b ], [ c, d ] ]

      Dlatego autor http://homakov.blogspot.com/2012/06/x-www-form-urlencoded-vs-json-pros-and.html
      usilnie zaleca stosowanie JSONa in body of POSTs everywhere i pozbycie się biednych URI encoded stringów

      Do słania plików, właściwy content type to "multipart/form-data"

      Jeśli nie wiadomo w jakiej formie przyjdą dane, użyj obu (wbudowanych w expressa 4.16+) dekoderów:
        app.use(express.json())
        app.use(express.urlencoded({ extended: true }))

_______________________________________________________________________________________________________________
174) REPL

      Po odpaleniu komendy 'node', pojawia się znak zachęty repla: >

      a) > 2 + 2  // 4

      b) arr = []
          arr. > tab > tab - daje listę wszyskich funkcji związanych z tablicą

      c) > arr.s
          arr.shift   arr.slice   arr.some    arr.sort    arr.splice

      d) global. > tab > tab

      e) zrób plik circle.js:
          const PI = Math.PI
          exports.area = (radius) => PI * radius * radius

          .. odpal noda i zawolaj funkcję area:

          > circle.area(4)    // 50.26548245743669

      f) analogicznie mozna wołać wyeksportowane metody każdego zainstalowanego pakietu
_______________________________________________________________________________________________________________
175) nextTick

      nextTick, to funkcja niemal identyczna z setTimeoutem = 0
      Wykonywany jest zaraz, jak tylko Stack się wypróżni
      Jedyna różnica, to to, że nextTick nie jest umieszczany na Event Loopie,
      dzięki czemu, odpali się tuż przed setTimeoutem

      -------------------------------------------------------------
      console.log('1')

      setTimeout(() => {
        console.log('2 - setTimeout = 0')
      }, 0)

      process.nextTick(function () {
        console.log('3 - nextTick')
      })

      setImmediate(() => console.log('4 - setImmediate'))

      console.log('5')

        /*
          1
          5
          3 - nextTick
          2 - setTimeout
          4 - setImmediate
        */

_______________________________________________________________________________________________________________
176) query.parse

      yarn add url

      Na adres składają się:
        a) protokół (http://)
        b) host (hostname i port)
        c) path (pathname = '/search' i query string = q=buna&x=10)
        d) haszu

      Opcjonalny 'true' jako drugi parametr funkcji url.parse(), formatuje query jako obiekt

      const url = require('url')

      url.parse('https://www.pluralsight.com:8000/search?q=buna&x=10#haszu', true)

      Url {
        protocol: 'https:',
        slashes: true,
        auth: null,

        hostname: 'www.pluralsight.com',
        port: '8000',
        host: 'www.pluralsight.com:8000',

        pathname: '/search',
        search: '?q=buna&x=10',
        path: '/search?q=buna&x=10',

        query: { q: 'buna', x: '10' },
        hash: '#haszu',

        href: 'https://www.pluralsight.com:8000/search?q=buna&x=10#haszu' }

_______________________________________________________________________________________________________________
177) joi

      github.com/hapijs/joi/blob/v13.4.0/API.md

      yarn add joi

      Biblioteka do walidacji / tworzenia schemy
      Można nią zastąpić walidację mongoosową

      -------------------------------------------------------------

        const Joi = require('joi');

        const user = {
          name: Joi.string().trim().alphanum().min(3).max(30).required(),
          pass: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),
          token: [Joi.string(), Joi.number()],                // string LUB numer
          year: Joi.number().integer().min(1900).max(2013),
          email: Joi.string().email(),
          label: Joi.any()
        }

          const userSchema = Joi
            .object()
            .keys(user)
            .with('name', 'year')
            .without('pass', 'token')

          // const juzek = { name: 'abc', year: 1994 }  // OK
          // const juzek = { name: ' abc ', year: 1994 }  // OK
          // const juzek = { name: 'a bc', year: 1994 }  // "name" must only contain alpha-numeric characters
          // const juzek = { year: 1994 }  // "name" is required
          // const juzek = { name: 'abc' }  // "name" missing required peer "year"

          // const juzek = { name: '<script>', year: 1994, token: 123 }  // "name" must only contain alpha-numeric characters
          // const juzek = { name: 'abc', year: 1994, pass: 'kupa' }  // OK
          // const juzek = { name: 'abc', year: 1994, token: 123 }  // OK
          // const juzek = { name: 'abc', year: 1994, pass: 'kupa', token: 123 }  // "pass" conflict with forbidden peer "token"

          const juzek = { name: 'abc', year: 1994, label: 'dfg  d@#$ 1__QWE\n22]\e=+' }  // OK


          // Wariant 1 - bez .with i .without

              //const res = Joi.validate(juzek, userSchema).error ? Joi.validate(juzek, userSchema).error.details[0].message : 'OK'

          // Wariant 2 - z .with i .without

              const res = Joi.validate(juzek, userSchema).error ? Joi.validate(juzek, userSchema).error.details[0].message : 'OK'

          console.log('res = ', res)
_______________________________________________________________________________________________________________
178) chalk

      yarn add chalk

      Kolorowe console.logi

      const chalk = require('chalk')

      console.log(chalk.blue('Hello world!'));
      console.log(chalk.red('Hello world!'));
      console.log(chalk.green('Hello world!'));
      console.log(chalk.yellow('Hello world!'));
      console.log(chalk.magenta('Hello world!'));
      console.log(chalk.cyan('Hello world!'));
      console.log(chalk.white('Hello world!'));
      console.log(chalk.bgRed('Hello world!'));

_______________________________________________________________________________________________________________

180) API - Twitter: search

      Ponieważ wczytanie danych z twittera funkcją przez JSON.parse - wywalało błąd,
      pomogło najpierw przepuszczenie ich przez stringify i dopiero parse:
          var x = JSON.stringify(data)
          var y = JSON.parse(x).statuses

      var Twit = require('twit')

      var T = new Twit({
        consumer_key: "7v7Sum3vd508rqPGlQ6IxwziL",
        consumer_secret: "MFpWWnc3L9mEtIzpXKBL1TZQtZtEjCca7GTFDKAgeLyN9YBR29",
        access_token: "891755936-9pB8ISaR16QX7lE09wOi3qTBSzEumYcc52ISQG8O",
        access_token_secret: "tbe8kJchwIgvPmSVyZeXWn3j1DWmZswa6HvREAZejwjHY"
      })

      T.get('search/tweets', { q: 'polskibus since:2015-12-19', count: 2 }, function(err, data, response) {

              if(err)  { console.log('Jakiś bład, czy coś') }

              var x = JSON.stringify(data)
              var y = JSON.parse(x).statuses

              y.forEach(function(tweet) {
                  console.log( tweet.text )
                  console.log( '______________________________________________________________________________________' )
              })

              console.log(y.length)
      })
______________________________________________________________________________________
181) API - Twitter: stream

      var Twit = require('twit')

      var T = new Twit({
        consumer_key: "7v7Sum3vd508rqPGlQ6IxwziL",
        consumer_secret: "MFpWWnc3L9mEtIzpXKBL1TZQtZtEjCca7GTFDKAgeLyN9YBR29",
        access_token: "891755936-9pB8ISaR16QX7lE09wOi3qTBSzEumYcc52ISQG8O",
        access_token_secret: "tbe8kJchwIgvPmSVyZeXWn3j1DWmZswa6HvREAZejwjHY"
      })

      var stream = T.stream('statuses/filter', { track: 'mango' })

      stream.on('tweet', function (tweet) {
        console.log(tweet.user.screen_name)
        console.log(tweet.created_at)
        console.log(tweet.text)
        console.log('___________________________________________________________________________')
      })
___________________________________________________________________________
190) tools - json-server

      github.com/typicode/json-server

      'Get a full fake REST API with zero coding in less than 30 seconds (seriously)'

      RESTowy server serwujący dowolnego jsona jakiego mu się poda.
      Bdb do mockupowania odbierania danych z odległego serwera

      a) git clone https://github.com/typicode/json-server.git
          albo w win7 download zipa z ww repo i rozpakuj

      b) cd json-server && npm i

      c) npm install -g json-server

      d) wklej do umieszczonego w _głównym katalogu projektu (!)_
         plik db.json:

            {
              "ppl":[
                    {"id":0,"name":"adam","city":"krk","age":39},
                    {"id":1,"name":"ewa","city":"lodz","age":66},
                    {"id":2,"name":"piotr","city":"wwa","age":95},
                    {"id":3,"name":"adam","city":"krk","age":28},
                    {"id":4,"name":"ewa","city":"lodz","age":24},
                    {"id":5,"name":"piotr","city":"wwa","age":36},
                    {"id":6,"name":"ewa","city":"lodz","age":15},
                    {"id":7,"name":"adam","city":"krk","age":46},
                    {"id":8,"name":"piotr","city":"wwa","age":30},
                    {"id":9,"name":"adam","city":"poznan","age":86}
                ]
            }

            lub

            {
              "users":[
                  { "name":"adam","email":"adam@wp.pl","password":"123"},
                  { "name":"ewa","email":"ewa@wp.pl","password":"456",
                  { "name":"piotr","email":"piotr@wp.pl","password":"789"}
                ]
            }

      e) json-server --watch db.json ( domyślny 3000 )
         json-server --watch db.json --port 4000

      f) chrome

              http://localhost:3000/ppl
              http://localhost:3000/ppl/0

      g) wyświetlanie plików statycznych

          mkdir public
          echo 'hello world' > public/index.html

          json-server db.json --static /static
          json-server db.json

___________________________________________________________________________
191) tools - json-server - queries

      Kontynuacja z ww  ( zacznij od wykonania wszystkiego z p. 32b  )

      FILTER

          http://localhost:3000/posts           //  cała tablica 'posts'

          http://localhost:3000/posts/1       //  { "id": 1,
                                                    "title": "raz",
                                                    "author": "autor1" }

          http://localhost:3000/posts?author=autor1  // [ {  "id": 1,
                                                              "title": "raz",
                                                              "author": "autor1"
                                                          },
                                                          {
                                                              "id": 2,
                                                              "title": "dwa",
                                                              "author": "autor1"
                                                          }]

          http://localhost:3000/posts?author=autor1&title=raz  // [ {  "id": 1,
                                                                        "title": "raz",
                                                                        "author": "autor1"
                                                                      } ]
      SLICE

          http://localhost:3000/posts?author=autor1&_limit=1  // [ {  "id": 1,
                                                                    "title": "raz",
                                                                    "author": "autor1"
                                                                  } ]

          http://localhost:3000/posts?_start=2&_end=4             //   [{  "id": 2,
                                                                            "title": "dwa",
                                                                            "author": "autor1"
                                                                        },
                                                                        {
                                                                            "id": 4,
                                                                            "title": "cztery",
                                                                            "author": "autor4"
                                                                          }]

          http://localhost:3000/posts?_start=0&_limit=2             //  [{  "id": 0,
                                                                          "title": "json-server",
                                                                          "author": "autor0"
                                                                        },
                                                                        {
                                                                          "id": 1,
                                                                          "title": "raz",
                                                                          "author": "autor1"
                                                                        }]
      SORT

          http://localhost:3000/posts?_sort=author&_order=DESC   //  [ {  "id": "autor4", ... },
                                                                        {  "id": "autor1, ... },
                                                                        {  "id": "autor1, ... },
                                                                        {  "id": "autor0, ... } ]

          http://localhost:3000/posts?_sort=author&_order=DESC&_limit=2   //  [ {  "id": "autor4", ... },
                                                                                {  "id": "autor1, ... } ]

          http://localhost:3000/posts?id_ne=1             // wszystkie obiekty z wyjątkiem obiektu o id = 1
                                                        //  ne  ( not equal )

                                                        // są jeszcze _gte i  _lte by wyfiltrować zakres, np:
                                                        //  posts?views_gte=10&views_lte=20

        FULL-TEXT SEARCH

          http://localhost:3000/posts?q=or1         // znajdź wszystkie rekordy w których znajdziesz sekwencję 'or1'
                                                    //   [ {  "id": "autor1, ... },
                                                    //     {  "id": "autor1, ... } ]

        RELATIONSHIPS

      http://localhost:3000/posts/embed=comments     // do obiektu o id=1 tablicy 'posts'
                                                    //  dołączany jest obiekt tablicy
                                                    //  'comments' o takim samym id = 1

                                                    // [ {
                                                            "id": 0,
                                                            "title": "json-server",
                                                            "author": "autor0",
                                                            "comments": []
                                                          },
                                                          {
                                                            "id": 1,
                                                            "title": "raz",
                                                            "author": "autor1",
                                                            "comments": [
                                                              {
                                                                "id": 1,
                                                                "body": "some comment",
                                                                "postId": 1
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "id": 2,
                                                            "title": "dwa",
                                                            "author": "autor1",
                                                            "comments": []
                                                          },
                                                          {
                                                            "id": 4,
                                                            "title": "cztery",
                                                            "author": "autor4",
                                                            "comments": []
                                                          }
                                                        ]

            http://localhost:3000/1?_embed=comments   //     { "id": 1,
                                                              "title": "raz",
                                                              "author": "autor1",
                                                              "comments": [
                                                                {
                                                                  "id": 1,
                                                                  "body": "some comment",
                                                                  "postId": 1
                                                                }
                                                              ]
                                                            }


            http://localhost:3000/comments?_expand=post    //  [{
                                                                    "body": "some comment",
                                                                    "postId": 1,
                                                                    "post": {
                                                                        "id": 1,
                                                                        "title": "raz",
                                                                        "author": "autor1"
                                                                      }
                                                                }]

            http://localhost:3000/posts/1/comments        // [{
                                                                "id": 1,
                                                                "body": "some comment",
                                                                "postId": 1
                                                              }]
___________________________________________________________________________
192) tools - server: nock

        Symulacja działania odległego serwera, dla celów przeprowadzenia unit testów
        Nock udaje, że jest odległym serwerem i zwraca 200 (ok) i wbity z ręki string (Mock Lincoln page)
        Dzięki temu, nie trzeba podawać dokładnej ścieżki jeśli chcemy na szybko zrobić test działania metody

        var expect = require('chai').expect
        var nock = require('nock')
        var loadWiki = require('../lib/tools').loadWiki
        var person = { imie: 'Abraham', nazwisko: 'Lincoln' }

        describe('Cokolwiek', function() {

            before(function() {
                nock('https://en.wikipedia.org')
                    .get('/wiki/Abraham_Lincoln')
                    .reply(200, 'Mock Lincoln page')
            })

            it('get wiki of Lincoln', function(done) {
                 loadWiki(person, function(html) {
                    expect(html).equal( 'Mock Lincoln page')
                    done()
                 })
            })
        })

------------------- /lib/tools.js -------------------------------

    var https = require('https')

    module.exports = {
        loadWiki(person, cb) {
            var url = `https://en.wikipedia.org/wiki/${person.imie}_${person.nazwisko}`

            https.get(url, function(res) {
                var body = ''
                res.setEncoding('utf8')

                res.on('data', function(chunk) {
                    body += chunk
                })

                res.on('end', function() {
                    cb(body)
                })
            })
        }
    }
___________________________________________________________________________
193) tools - server: superagent-mocker

        Można zdefiniować

        npm i  - save superagent
        npm i  - save superagent-mocker
 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        var request = require('superagent')
        var mock = require('superagent-mocker')(request)

        mock.get('/topics/:id', function(req) {
          return {
            id: req.params.id,
            content: 'Hello Weird !',
            headers: req.headers
          }
        })

        request
          .get('/topics/1')
          .set({ 'X-Custom-Header': 'value of header' })
          .end(function(err, data) {
                console.log(data) // { status: 200, id: 1, content: 'Hello Weird !', headers: { 'x-custom-header': 'value of header' } }
          })
___________________________________________________________________________
194) tools - server: httpster

      Prosty serwer http,  odpalany 1 komendą z katalogu gdzie są pliki ze stroną  ( index.html )
___________________________________________________________________________
195) tools - dev server: nodemon

      yarn global add nodemon@1.14.8   // najnowsza 1.17.x jest b wolna

      nodemon.json  - ustaw verbose na false, bo inaczej będzie śmiecił

      {
        "verbose": false,
        "ignore": ["*.test.js", "fixtures/*"]
      }
___________________________________________________________________________
196) tools - dev server: reload  ( html i css )

        Browser refresh dla html i css

        Jeśli dłubiemy tylko w html i css  ( np flexbox )
        i chcemy by po każdej zmianie chrome uaktualniał ekran:

        npm i -g reload
        cd katalogProjektu
        reload -b  // otworzy się okno http://localhost:8080/

        albo do package.json wpisz:
          "scripts": {
             "start": "reload  -b",

        .. i odpalaj przez:  npm start

___________________________________________________________________________
197) tools - inne

       a) forever - CLI tool for ensuring that a given node script runs continuously
       b) pm2 - Restarts app,  keep them running forever, cluster, load balancer, dashboard
       c) supervisor - dev server: watches for code changes, hot-reloading
       d) caniuse-cmd - CLI: 'caniuse modules' - pokazuje pokrycie w przegladarkach

___________________________________________________________________________
200) online tools - APIs

      a) httpstat.us   //  zwraca response, jaki mu dasz po slaszu:
                    //  http://httpstat.us/500  -  zwróci kod 500  ( Internal Server Error )

      b) swapi        // star wars api https://swapi.co/documentation

      c) github (jest paginacja)
           np:  api.github.com/users/gaearon/repos?page=2&per_page=10

      d) hacker news  //  https://hn.algolia.com/api strasznie wolny, parenaście sekund response

      e) mockbin.org

        Odpowiada na requesty definiowalnym JSONem
        Pokazuje historię odebranych requestów wraz z ich bebechami

          i)  klik w batona Create
          ii) w okno Body wpisz: "wiesc": "zupa"  ( wynik - patrz okno preview )
          iii) klik w batona Create Bin
          iv) gdzieś w Sublimie poniższe, stań na tym,  prawy klik i HttpRequester:
                  http://mockbin.org/bin/2a57a85a-999f-44c0-ab4f-860685227550/view&znak="kicha"
           v) w osobnym oknie Sublima  ( 'httpResponse' )  dostaniesz odpowiedź
          vi) na stronie klik w batona View History  - bebechy requesta i odpowiedzi

      f) mocky.io

          j/w, ale nie widać historii requestów

      g) jsonplaceholder.typicode.com

          jsonplaceholder.typicode.com
          jsonplaceholder.typicode.com/posts/1

          /users  10 items
          /posts  100 items

      h) randomuser.me (brak paginacji)

          generuje ileś losowych danych juzków, wraz z fotkami
          zawartość danych juzka określa się wysyłanym requestem:
              randomuser.me/api/?results=500
                  lub
              randomuser.me/api/?inc=gender,name,nat
                  lub
              randomuser.me/api/?inc=picture&results=5
                paginacja:
              randomuser.me/api/?page=3&results=10&seed=abc

              randomuser.me/api/?page=3&results=2&seed=abc&inc=name,location
              randomuser.me/api/?page=3&results=2&seed=abc&inc=name,location&noinfo

      i) mockaroo  (brak paginacji)

          Mocking data sets generator  ( json, csv, sql, xml )
          Po zalogowaniu googlem, można zapamiętywać i importować / eksportować schemy
          Poprzedzając nazwę pola nazwą obiektu z kropką, tworzy się obiekt zagnieżdżony, np:
            skills.skill_1
            skills.rank_1
              stworzy:
                  skills:  { skill_1: 'nazwa', rank_1: liczba  }


___________________________________________________________________________
201) online tools  -  mocking webservices

  Webserwisy z przykładowymi danymi w formie paczek JSONów, csv, etc

    a) unsplash.it

       unsplash.it/200/200
       wyświetla losowy obrazek 200 na 200

    b) placehold.it

        wyświetla prostokątny placeholder obrazka:
          placehold.it/350x150
            <img src="http://placehold.it/350x150">

    c) faker

        generowanie danych w formacie json (imie, nazwisko, adres, telefon, kod, itd)
        marak.github.io/faker.js
        egghead.io/lessons/nodejs-creating-demo-apis-with-json-server

    d) mockaroo  ( patrz )

        Bdb generator jsnoów do mockowania ( json, csv, sql, xml )
        Po zalogowaniu googlem, można zapamiętywać i importować / eksportować schemy
        Poprzedzając nazwę pola nazwą obiektu z kropką, tworzy się obiekt zagnieżdżony, np:
          skills.skill_1
          skills.rank_1
            stworzy:
                skills:  { skill_1: 'nazwa', rank_1: liczba  }

    e) mocky.io

        Wysyłasz POSTa, a on zwraca Ci responsa którego możesz zdefiniować

    f) beeceptor

        Jak wyżej - większe mozliwości, ale tylko darmowych 50 requestów
        dziennie per endpoint. Ale można założyć kilka endpointów

        UWAGA !
          Po opuszczeniu strony z wynikami (przysłanymi POSTami)
            https://beeceptor.com/console/kupasiku

          i powrocie na nią, wyników już nie ma.
          Wychodzić więc trzeba przy wciśniętym ctrl

        --------------------------------------------------------

          const url = 'https://kupasiku.free.beeceptor.com'

          axios.post(url, obj)
            .then(res => {
              console.log(obj)
              alert('Thank you for the registration.\nYour data have just been saved on the server')
            })
            .catch(err => {
              console.log('Eror: ', err)
              alert('Problem occured saving your info\nPlease check you internet connection, or try later')
            })

    g) requestbin - jak wyżej (wybierz 'Webhook'); dziwnie chodzi

    h) pipedream - jak wyżej; dziwnie chodzi
_______________________________________________________________________________________________________________
202) online tools - free app platforms

        a) zeit.co
            forums.meteor.com/t/super-simple-and-free-meteor-deployments-using-zeit-now/33214
            zeit.co/now (meteor)

        b) mLab (mongo db)
            mlab.com/plans/

        c) heroku
             550 (unverified emails) / 1,000  ( verified ) dynohours / month
             Sleeps after 30 mins of inactivity

        d) scaphold.io
             graphQL

        e) graph.cool
             10k nodes
             100k operations / month

        f) reindex.io
             graphQL

        g) cloudflare
             CDN z websocketami w darmowym koncie

        h) surge.sh
            Darmowy hosting statycznych stron z deplojką z cmd line'a

        i) netlify
            łatwo się odpala apki reactowe (niekoniecznie react-create-app'owe)

        j) optics
              apollodata.com/optics   ( graphQL )

         k) runkit.com - FaaS

             Node playground in browser - zdalny serwer node'a  ( z importem pakietów npm )
             Wolny jak ślimak - czas odpowiedzi od kilku do kilkunastu sekund.
             Lepszy mockbin  - patrz punkt a)

             Otwórz runkit.com/nabu i wklej:
                 var express = require("@runkit/runkit/express-endpoint/1.0.0")
                 var app = express ( exports )

                 var jas   = { imie: 'jas',   wiek: 22 }
                 var krzys = { imie: 'krzys', wiek: 33 }

                 app.get("/:name", (req, res) => {
                     if(req.params.name === 'jas')
                         res.send(jas)
                     else if(req.params.name === 'krzys')
                         res.send(krzys)
                     else
                         res.send('catch all')
                 })

            Z gitBasha odpal:
                 curl https://runkit.io/nabu/585ceb058619230014a8227e/branches/master/jas  //  { imie: 'jas',   wiek: 22 }

             UWAGA !
                 Możesz wziąć ww adres albo:
                     a) klikając w opcję menu 'endpoint'   albo
                     b) biorąc adres bieżącej strony:
                             https://runkit.com/nabu/585bbc6b6966c4001453b03b
                          i zmieniając 'com' na 'io' i dopisując '/branches/master' na końcu

        l) webtask.io - zdalny serwer node'a z cronem

        m) freenom.com - darmowa domena

            a) otwórz freenom.com

            b) wbij nazwę domeny i klik batona Check Availability

            c) na kolejnej stronie wybierz które z rozszerzeń domeny chcesz ( .tk, .ml, .ga, .cf, .gq )

            d) klik w batona 'Get it now !'

            e) u dołu klik w My Domains > klik Manage Domain > górne menu Mgt Tools >
                > Url Forwarding > 'http://loginGithuba.github.io' > klik 'Set URL'

            f) przewiń na dół, wypełnij pola i klik w Complete Order

            g) po paru / nastu minutach, wbij adres darmowej domeny, np kupasiku.ga

            h) by uaktualnić adres do którego domena prowadzi:
                 Services > My Domains > Manage Domain > Mgt Tools > URL forwarding
                 Ruszy po paru minutach


        n) stdlib - FaaS
            docs.stdlib.com/main/#/quickstart/from-scratch

        o) deepstreamhub.com
            realtime db

        p) realm.io
            realtime wbudowana db dla mobilków i react native  ( alternatywa dla sqLite na andku )

        q) zangodb
            interfejs mongo do indexdb  ( osadzonej w browserze lub nodzie db )

        r) lowdb
            baza danych na pliku  ( do użycia np na zeit/now )

        s) baqend.com
            baqend.com/guide/starter-kits/react/
            lepszy firebase

        t) codesandbox.io - cloud ide

        u) coder.com - cloud ide

        v) sendgrid - darmowe wysyłanie maili z własnej apki
                      40k w 1-szym m-cu, potem 100 dziennie

        x) Fabryka faviconów: http://faviconit.com

_______________________________________________________________________________________________________________
203) online tools  - coding challenge websites

        a) topcoder.com
        b) projecteuler.net
        c) hackerrank.com
        d) coderbyte.com
        e) codechef
        f) codeeval
        g) codewars
        h) leetcode
        i) pl.spoj.com
        j) codingame
        k) codility - app.codility.com/programmers/lessons/1-iterations/binary_gap/
        l) geeksforgeeks - z rozwiązaniami
_______________________________________________________________________________________________________________
204) online tools - free templatki html

      a) templated.co
      b) html5up.net
      c) dribbble.com
      d) behance.net
      e) ui8.net - płatny

_______________________________________________________________________________________________________________
205) online tools - inne

      webpagetest.org          // page performance

      epochconverter.com       // epoch timestamp converter

      caniuse.com             //  działanie funkcji HTML5 i CSS3 w przeglądarkach

      caniuse.com/usage-table, statcounter.com, w3counter.com  // udział w rynku przeglądarek

      kangax.com              //  ES6 w przeglądarkach

      node.green              //  ES6 w nodzie

      db-engines.com         //  popularność baz danych  ( google trends, jobs, stack o., linkedin )

      tiobe.com/tiobe-index //  popularność języków   ( google, youtube, baidu, yahoo, wiki, bing )

      github.com/search?q=stars%3A%3E10000    // stars:>10000
                                              // albo idź do github.com/search i wbij ww w okno Search

      github.com/trending   //   top 25 wg ilości gwiazdek uzyskanych dziś

      payscale.com/research/US/Skill=JavaScript/Salary   // roczna pensja w US wg języków

      npm-stat.com   // porównywanie ilości ściągnięć z npm'a 2+ pakietów np. react vs angularjs
                    // w oknie package umieść je, rozdzielając przecinkami:  'react, angularjs'

      npmtrends.com  // j/w - angular2+ jest zwany @angular/core

      crontab.guru    // edytor ustawiania czasów odpalania jobów

      git pages      // github.io - serwowanie statycznych stron patrz git.txt p.53)

      ngrok.com    // wystawienie swego kąpia na świat
                  //  ”I want to expose a local server behind a NAT or firewall to the internet.”

      repl.it         // Sandbox do kodzenia w 30 językach; kursy do nauki języków
                      // youtube.com/channel/UCoeHQ6fi39XOtFy0CRMSU3A
                      // kursy stworzone w nim przez juzków ( pyton, js, react,  itd )
                      //  repl.it/sessions

      apetools.webprofusion.com/tools/imagegorilla  // tworzenie ikon i splashscreena dla androida

      wappalyzer  // wtyczka do chroma pokazująca z jakich technologii składa się strona

      dailyfx.com/forex-rates?ref=TopRates - real-time FX rates

      programmableweb.com/apis/directory - lista darmowych publicznych API

      opencagedata.com    // free geocoder i reverse geocoder (aders > gps > adres)

      wspolrzedne-gps.pl  // jw tylko ręcznie

      overpass-turbo.eu   SearchBox: 'warszawa > Kreator > 'biedronka' > Stwórz i uruchom kwerendę > tab Dane
                          Lista wszystkich Biedronek w Wwie z ich gps'ami, adresem

      whatwebcando.today  Skrótowa lista możliwości HTML5 ze snipkami kodu

      squoosh.app  // konwersja plików graficznych na webP wraz z parametrami kompresji i b ładnym wyświetlaniem łobraska

      tinypng.com   // kompresja plików png i jpg - w porywach 3-krotna

      cssicon.space  // ikony w CSSie

      brotli  // 25% lepszy od gzipa, 90% wsparcie przegladarek @ mar '19  https://caniuse.com/#search=brotli

      webP   // 30% lepszy od png, 79% wsparcia przeglądarek (all but IE i Safari)  https://caniuse.com/#search=webp

      fonts.google.com   // zaznacz sliderem 'Number of styles' na 6+ bo takie fonty są lepiej dopracowane

      cssgridgarden.com   // gra ucząca grid-css

      flexboxfroggy.com   // gra ucząca flexboksa

      bundlephobia.com   // pokazuje ile zajmie pakiet npm w apce

      securityheaders.com   // pokazuje ocenę strony wg obecności headerów HTTP

      git-scm.com/book/en/v2   // ksiązka Pro Git online

      atrigger.com  // darmowe cron-joby, chodzące 200 dni

      cron-job.org  // darmowe cron-joby, do 60 na h

      uicolorpicker.com  // wygodne wybieranie predefiniowanych kolorów

      sqlfiddle.com  // SQL sandbox

      regexone.com   // kurs regexa z regex testerem

      regex101.com  // linter

      darmowe obrazki: Pixabay, Unsplash, Barn Images, PicJumbo, SplitShire, Little Visuals

      louisbourque.ca/grid-awesome  // wizualny generator gridów (css grid)

      github.com/30-seconds/30-seconds-of-code  // przydatne snipki

      gtmetrix.com   // tester wydajności strony z sugestaimi co i jak poprpawić

      api.icndb.com/jokes/random  // rest api z losowymi żartami

      pwa2apk  // robi plik .apk z chodzącej strony PWA

      newsapi.org  // newsy ze 150 źródeł

      picsum.photos  // przykładowe obrazki o zadanych wymiarach

_______________________________________________________________________________________________________________
206) online-tools - Q&A (js, vue, github)

      a) toptal.com
      b) github.com/lydiahallie/javascript-questions
_______________________________________________________________________________________________________________
207) online-tools - website research

  i)  popularity:               alexa.com
  ii) history:                  archive.org
  iii) quality:                 bestof.js.org, npms.io

  a) libraries used:            wappalyzer  ( chrome add-on )
  b) framework i jego wersja:   curl - I

  c) performance benchmarking:  webpagetest, gtmetrix

  d) content benchmarking:         httparchive

  e) last update time:             js script

    i) top 1 mln sites by number of visits

    ii) history:
            https://web.archive.org/web/*/prosieben.de
            Saved 3 545 times between grudnia 21, 1996 and maja 7, 2016.

    a) Fingerprint Web Application Framework: wappalyzer
         lub WhatWeb (ruby), BlindElephant (python)
         ew. nagłówki http response'a, cookies

          owasp.org/index.php/Fingerprint_Web_Application_Framework_(OTG-INFO-008)

    b) wywiad:  framework i jego wersja
             curl  -I adresStrony.com
                prosieben.com:
                    X-Powered-By: PHP/5.5.32 @ Feb,  2016

              Jeśli dostaniesz:  HTTP/1.1 301 Moved Permanently, spróbuj
             curl  -I www.adresStrony.com  // dodaj prefix www

    c) Benchmarking:  webpagetest
          www.webpagetest.org

          Obejrzeć Filmstrip view, by sprawdzić ile zajmuje DOM rendering, a ile reszta

          i) zrobić baseline dla każdej ze stron  ( skrypt crona ?)
              w podziale na cable,  3G i 4G  ( dane rynku niemieckiego )
              ( 5 powtórzeń,  3 razy dziennie przez tydzień ) z zapisem klatek filmu

          ii) cel: max czas wczytywania  = 5s,  na smarku = 8s

          iii) zbadać rekomendacje  ( czerwone boksy w prawym górnym )

    d) Benchmarking:  httparchive
        httparchive.org/viewsite.php?pageid=39105354

          Based on Alexa top 1 mln popular sites

          i) Trendy (luty - maj '16)
              httparchive.org/trends.php?s=All&minlabel=Feb+1+2015&maxlabel=May+1+2016

              Średnia waga html, css, js, images i ilość requestów. Np:

                Total transfer size = 2.4 MB
                Requests = 109

          ii) Grafy wybranych z ww, interesujących trendów
                httparchive.org/interesting.php

          iii) Analiza strony  ( szybkość )
                httparchive.org/websites.php

    e) last update time
         Wbij do konsoli:
            JS:alert(document.lastModified)

_______________________________________________________________________________________________________________
210) nvm dla windows

      https://github.com/coreybutler/nvm-windows

      a) zainstaluj program

      b) nvm list - listuje dostępne wersje noda

      c) nvm install latest - ściąga najnowszą (domyślnie dla arch (64/32) kompa)
            albo
              nvm install 5.9.1 64  - '64' można pominąć

      d) nvm use 5.9.1 - ustawia jako bieżącą (zamryga ekranem 2 razy)

      e) npm -v  - wyświetla aktualnie używaną wersję

      UWAGA !!
          Po wejściu noda v6, nie działało ustawienie innej wersji jako bieżącej (nvm use ..)
          Pomogła reinstalka nvm for windows
___________________________________________________________________________
220) JS Standard Style by feross

      https://github.com/feross/standard

      npm install standard  -g
      cmd:  standard  // sprawdza wszystkie pliki w bieżącym katalogu

      10 przykazań:

          a) 2 spaces – for indentation
          b) Single quotes for strings – except to avoid escaping
          c) No unused variables – this one catches tons of bugs!
          d) No semicolons – It's fine. Really!
          e) Never start a line with (  [ or `
              ( This is the only gotcha with omitting semicolons – automatically checked for you! )
          f) Space after keywords if (condition) { ... }
          g) Space after function name function name (arg) { ... }
          h) Always use === instead of == – but obj == null is allowed to check null || undefined.
          i) Always handle the node.js err function parameter
          j) Always prefix browser globals with window – except document and navigator are okay
               ( prevents accidental use of poorly-named browser globals like open, length, event, etc)
___________________________________________________________________________
222) Linux / node Sysop:  How to deploy your node app on Linux, 2016

            https://certsimple.com/blog/deploy-node-on-linux

            If you're a web developer, and not a devops person, this is just enough devops to get:

            a) LTS node, installed on LTS Linux
            b) proper service for your node app, with automated restarts, proper logging
            c) app accessible on  443 and/or 80, but running as a regular user.
            d) log in automatically using your SSH key, as your own account, and with sudo access.
            e) deploy automatically using deploy keys, without needing a password
            f) SSL and set as default on a load balancer
___________________________________________________________________________
223) ASCII art z dowolnego zdjęcia

        https://davidwalsh.name/convert-image-ascii-art

        var ImageToAscii = require('image-to-ascii')

        ImageToAscii(__dirname + '/logo.png', function(err, converted) {
            console.log(err || converted)
        })

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    // Attach module to the console
    require('console-png').attachTo(console)

    // Read the image, let console-png output it to console
    console.png(require('fs').readFileSync(__dirname + '/logo.png'))

___________________________________________________________________________
224) Kolorowanie komunikatów konsoli

        const chalk = require('chalk')

        // style a string
        chalk.blue('Hello world!')

        // combine styled and normal strings
        chalk.blue('Hello') + 'World' + chalk.red('!')

        // compose multiple styles using the chainable API
        chalk.blue.bgRed.bold('Hello world!')

        // pass in multiple arguments
        chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz')

        // nest styles
        chalk.red('Hello', chalk.underline.bgBlue('world') + '!')
___________________________________________________________________________
225) Samouczki node'a z cmd  ( dosa )

        http://nodeschool.io/pl/#workshoppers

            npm install -g

             javascripting
             functional-javascript-workshop
             planetproto                      // Prototypy w JS
             currying-workshopper    // JS  -  currying
             learnyounode                  // Node
             node-debug-school        // jw
             count-to-6                       // ES6
             esnext-generation          // Iteratory w ES6
             learn-generators           //  Generatory w ES6
             tower-of-babel             // ES6
             promise-it-wont-hurt
             learnyoureact               // React
             thinking-in-react         // jw
             nodebot-workshop        // JohnyFive
             expressworks
             seneca-in-practice        // Seneca  -  microservice toolkit
             learnyoucouchdb
             perfschool                   // Web performance
             lololodash
             learnyoubash            // Bash
             regex-adventure
             bug-clinic
             git-it
             how-to-npm
             scope-chains-closures
             stream-adventure
             elementary-electron
             how-to-markdown
             bytewiser
___________________________________________________________________________
228) Chrome DevTools debugger  -  node

      blog.hospodarets.com/nodejs-debugging-in-chrome-devtools

      a) w conEmu odpal:
          node --inspect --debug-brk wywal2.js

      b) dostaniesz linkę którą przeklej do okna chruma:
          chrome-devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=127.0.0.1:9229/fe7269ca-3ec7-475e-ade0-6d555b0a758b

      c) jeśli w oknie chroma wyświetli się szmatka 'Debugging connection was closed...',
          zainstaluj chrum plugina NIM  ( Node Inspector Manager )

      d) otwórz go kilkając w jego ikonę, upewnij się że jest tam
          ten sam port co w p. b)  ( 9229 ),  a switch jest na 'auto'

      e) w conEmu odpal:
          node --inspect --debug-brk wywal2.js

      Nowe eksperymentalne opcje chroma,  można właczyć:

        Open the chrome://flags/#enable-devtools-experiments URL
        Enable the Developer Tools experiments flag
        Relaunch Chrome
        Open DevTools Setting -> Experiments tab (it started being visible after the reload)
        Press "SHIFT" 6 times
___________________________________________________________________________
229) npx

     npx pozwala odpalać jakiś pakiet, którego nie mamy zainstalowanego globalnie,
     bez konieczności poprzedzania jego nazwy ścieżką. Tzn zamiast:

       ./node_modules/workbox/bin/workbox

      ... można:
        npx workbox

      Jeśli node nie znajdzie workboxa w node_modules, ściągnie go z npm'a i zainstaluje

___________________________________________________________________________
236) async / await

      stackabuse.com/node-js-async-await-in-es7/
      https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8#.u9p0fxrzj

      Składnia:
      Przed nazwą definiowanej  (a nie wołanej) funkcji wstaw  'async'
      A przed nazwą wołanej funkcji, wstaw  'await'

      Dzięki zadeklarowaniu funkcji jako asynchronicznej, gdy zostanie ona wywołana,
      zwróci sterowanie wywołującemu, a sama poczeka na rozwiązanie promisa

      Wartość która w promisie, byłaby przekazana do then (), w async/await
      jest zwracana bezpośrednio, jakby to była funkcja synchroniczna:

          let value = await myPromisifiedFunction()

      Obsługa błędów nie jest wbudowana.
      Trzeba ją dodać trajkaczem,
      a prócz tego, wymagane jest zwracanie promisa  ( patrz p.231 )

      Poniższy kod, wygląda na synchroniczny, bo brak w nim callbacka
      A jednak wykonuje funkcję asynchroniczną

      Dowód:  wyświetlą się kolejno:
          timer STARTED
            DUPA
          timer STOPPED

 -  -  -  -  -  -  -  -  -  -  -  -  -   -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    async function x () {
      console.log ('timer STARTED')
      await delay (100)
      console.log ('timer FINISHED')
    }

    x()

    console.log('DUPA')

    function delay(delay) {
      return setTimeout (function() {
        console.log('### SET TIMEOUT ###')
      }, delay)
    }

___________________________________________________________________________
237) async / await - try / catch

        Aby dodać obłsugę błędów, trzeba eksportowaną funkcję ubrać w promisa,
        a po zaimportowaniu, funkcję z await'em ubrać w trajkacza

        By przetestować wystąpienie błędu, zmień adres na http://foo

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  imp.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    const exp = require ('./exp')

    async function y()  {
      try  { console.log(await exp.x())}
      catch (err) { console.log('ERRORAS: ' + err)}
    }

    y()

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  exp.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    const request = require ('request')

    module.exports.x = function() {
      return new Promise (function (resolve, reject) {

        request ( 'https://jsonplaceholder.typicode.com/users/1', function(err, res, html) {
            if (err) return reject (err)
            resolve (JSON.parse (res.body).address)
          })
      })
    }

___________________________________________________________________________
240) async.js - map

      Tuba - RisingStack: Node Async Made Easy
      caolan.github.io/async/docs.html#map

      Nie wiadomo która z 2 zawołanych funkcji fs.readFile skończy pierwsza
      Niemniej, kolejność wyświetlonych będzie zgodna, z kolejnością plików w tablicy

      Jeśli metoda 'fs', node'a nie ma końcówki 'Sync' tzn że jest asyncowa:
        fs.readFileSync - synchroniczna
        fs.readFile - asynchroniczna

 -  -  -  - index.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

      const fs = require('fs')
      const async = require('async')

      async.map(['file1.json', 'file2.json'], function(name, callback) {
        fs.readFile (name, function(err, res) {
          if (err)  { return callback (err) }

          try {
            console.log(JSON.parse(res).name)
          }
          catch( ex ) {
            return callback ( ex )
          }
        })
      })

 -  -  -  - file1.json  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

      {
        "name":  [
          "wwa",
          "krk",
          "ldz"
          ],
        "version": "1.0.0"
      }


 -  -  -  - file2.json  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

      {
        "name":  [
          "poz",
          "gda",
          "lub"
          ],
        "version": "1.0.0"
      }

___________________________________________________________________________
241) async.js - parallel

      Tuba - Pentacode: async.parallel
      caolan.github.io/async/docs.html#parallel

      parallel ( tasks, callback )

      parallel odpala taski równolegle, tzn f2 będzie odpalona, nie patrząc czy skończyła się f1

      W tablicy wyniki będą w tej samej kolejności, co kolejność funkcji dodawanych do stacka:
          stack.push ( f1, f2 )   - >  [ f1-wynik, f2-wynik ]
      Bedzie tak, nawet jeśli f2 wykona się szybciej niż f1

      Jeśli któraś funkcja zwróci błąd, jest on od razu przekazywany funkcji callback  (i wyświetlany)
      Taski lub ich części nie będące i/o czy timerami, będą uruchamiane po kolei (seryjnie, nie równolegle)

 -  -  -  -  -  -  -  index.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    const fs = require ('fs')
    const request = require ('request')
    const url1 = 'http://jsonplaceholder.typicode.com/users/1'
    const async = require ('async')

    const stack = []

    function f1 (callback) {
      request(url1, function (err, res, html) {
        if (err) { return callback (err) }
        callback (null, JSON.parse(res.body).name)
      })
    }

    function f2 (callback) {
      fs.readFile('file1.js', function (err,res) {
        if (err)  { return callback(err) }
        callback (null, JSON.parse(res).name)
      })
    }

    stack.push (f1, f2)

    async.parallel(stack, function(err, result) {
      if (err)  { console.log(err); return }
      console.log( result )
    })

 -  -  -  - file1.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

 {
   "name":  [
     "wwa",
     "krk",
     "ldz"
    ],
   "version": "1.0.0"
 }

-___________________________________________________________________________
242) async - waterfall

      Tuba - Pentacode: async.waterfall & series
      caolan.github.io/async/docs.html#waterfall
      github.com/yongzhihuang/PentaCode/tree/master/AsyncJs

      Pozwala by druga funkcja dostała wynik działania pierwszej

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
 const async = require('async')
 const axios = require('axios')
 const url1 =  'https://wt-nabu1312-gmail-com-0.run.webtask.io/hello'
 const url2 = 'http://jsonplaceholder.typicode.com/users/'

 async.waterfall([

    function getKey(callback) {
      axios.get(url1)
        .then(function(res) {
          console.log(res.data.name)
          callback (null, res.data.name)
        })
    },

    function getName(name, callback) {
      axios.get(url2 + name)
        .then(function(res) {
          console.log(res.data.name)
          callback(null, res.data.name)
        })
    }

 ], function (err, res)  {
     if (err) { console.log( err ); return }
     console.log(res)
 })

___________________________________________________________________________
243) async - series

      Tuba - Pentacode: async.waterfall & series
      caolan.github.io/async/docs.html#series

      Zwraca wyniki w tej samej kolejności, co funkcje podane w tablicy parametrów
      Poniżej:  stack.push ( f2, f1 )  - czyli najpierw zwróci wynik f2,  potem f1

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

  const fs = require ( 'fs' )
  const request = require ( 'request' )
  const async = require ( 'async' )
  const url1 = 'http://jsonplaceholder.typicode.com/users/1'

  const stack = []

  function f1 ( callback ) {
      request ( url1, function ( err, res, html ) {
          if ( err )  { return callback ( err ) }
          callback ( null, JSON.parse ( res.body ).name )
      } )
  }

  function f2 ( callback ) {
      fs.readFile ( 'file1.js' , function ( err, res ) {
          if ( err )  { return callback ( err ) }
          callback ( null, JSON.parse ( res ).name )
      } )
  }

  stack.push ( f2, f1 )

  async.series ( stack, function ( err, result ) {
      if ( err )  { console.log( err ); return }
      console.log( result )
  })
___________________________________________________________________________________________
245) ściąganie filmu osadzonego na stronie (wget do gitBasha)

        a) ściągnij binarke wgeta z
              eternallybored.org/misc/wget/

        b) skopiuj do:
              C:\Program Files\Git\mingw64\bin

        c) otwórz stronę i devtoolsy (F12)

        d) otwórz zakładkę Network

        e) ustaw filtr na All

        f) posortuj po wielkości

        g) znajdź największy z rozszerzeniem mp4 lub podobnym

        h) prawy myszy > Copy > Copy as curl (cmd)

        e) wrzuć do edytora, wytnij wszystko poza adresem http(s)

        f) poprzedź adres słowem 'wget'

        g) ściągnij

___________________________________________________________________________________________
248) mockaroo.com ( skillBill )

      Pozwala tworzyć b wyrafinowane zestawy jsonów, fajnym GUIem
      Dzienny darmowy limit po zarejestrowaniu = 200 requestów

      Jest też pakiet npm:
        yarn add mockaroo

      Po zarejestrowaniu się,  bierze się go z mockaroo.com/api/docs

      Przy bardziej skomplikowanych zestawach, najlepiej zacząć od stworzenia początkowej schemy w GUI
      Potem zasejwować ją i ściągnąć lokalnie na dysk, a na koniec zaimportować ją do funkcji korzystającej
      z pakietu npm'owego

      Potrzebna byla lista 100 programistów, z których każdy miał personalia,  maila,  miasto i 3 znane mu języki,
      dodając do każdego stopień w jakim go opanował  ( skill_1: 'Java', rank_1: 4,  skill_2: 'C'... )

      Jak widać, po ściągnięciu promisem danych, odfiltrowuje się rekordy gdzie jakiś język jest zdublowany
      a potem te, w ktorych personalia są dłuższe niż 11 liter  ( by mieściły się na ekranie smarka  )

 -  -  -  -  -  -  -  -  - mock1.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

 // odpal node mock.js > plik.json

 const Mockaroo = require('mockaroo');

 const client = new Mockaroo.Client({
   apiKey: '60ef9610'
 })

 client.generate({ count: 1000, schema: 'skillBill9' })
   .then(records => {
     const x = records.filter(item => {
       return item.skill_1 !== item.skill_2
         &&  item.skill_1 !== item.skill_3
         &&  item.skill_2 !== item.skill_3
     })
     .map(item => {
       return {
         id: item.id,
         first: item.first,
         last: item.last,
         title: item.title,
         skill_1: item.skill_1,
         rank_1: item.rank_1,
         skill_2: item.skill_2,
         rank_2: item.rank_2,
         skill_3: item.skill_3,
         rank_3: item.rank_3,
         picture: item.picture,
         email: item.email,
         dates: item.dates
       }
     })

     console.log(JSON.stringify(x))

     // console.log('rekordów = ', x.length, ' z 20')
 })

 -  -  -  -  -  -  -  -  - mocka2.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    const fs = require('fs')
    const file = JSON.parse(fs.readFileSync('./mocka1.json'))

    const plik = file.map((item, index) => {
      //console.log(index)
      return {
        id: index,
        first: item.first,
        last: item.last,
        title: item.title,
        skill_1: item.skill_1,
        rank_1: item.rank_1,
        skill_2: item.skill_2,
        rank_2: item.rank_2,
        skill_3: item.skill_3,
        rank_3: item.rank_3,
        picture: item.picture,
        email: item.email,
        dates: item.dates
      }
    })


    fs.writeFileSync ('./mock.json', JSON.stringify(plik))


 -  -  -  -  -  -  -  -  -  skillBill9.schema.json  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    {
      "id": 64546,
      "num_rows": 100,
      "file_format": "json",
      "name": "skillBill9",
      "array": true,
      "columns": [
        {
          "name": "id",
          "null_percentage": 0,
          "type": "Row Number",
          "formula": ""
        },
        {
          "name": "skill_1",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            "C",
            "CPP",
            "Ruby",
            "Go",
            "Java",
            "JS",
            "Android",
            "ObjC",
            "Swift"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "rank_1",
          "null_percentage": 0,
          "type": "Number",
          "min": 4,
          "max": 5,
          "decimals": 0,
          "formula": ""
        },
        {
          "name": "skill_2",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            "C",
            "CPP",
            "Ruby",
            "Go",
            "Java",
            "JS",
            "Android",
            "ObjC",
            "Swift"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "rank_2",
          "null_percentage": 0,
          "type": "Number",
          "min": 2,
          "max": 4,
          "decimals": 0,
          "formula": ""
        },
        {
          "name": "skill_3",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            "C",
            "CPP",
            "Ruby",
            "Go",
            "Java",
            "JS",
            "Android",
            "ObjC",
            "Swift"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "rank_3",
          "null_percentage": 0,
          "type": "Number",
          "min": 1,
          "max": 2,
          "decimals": 0,
          "formula": ""
        },
        {
          "name": "arr",
          "null_percentage": 0,
          "type": "Formula",
          "value": "{ \"#{skill_1}\":\"#{rank_1}\", \"#{skill_2}\":\"#{rank_2}\", \"#{skill_3}\":\"#{rank_3}\" }",
          "formula": ""
        },
        {
          "name": "__nr",
          "null_percentage": 0,
          "type": "Sequence",
          "start": 0,
          "step": 1,
          "repeat": 1,
          "formula": ""
        },
        {
          "name": "picture",
          "null_percentage": 0,
          "type": "Formula",
          "value": "\"https://randomuser.me/api/portraits/women/#{__nr}.jpg\"",
          "formula": ""
        },
        {
          "name": "title",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            "Junior",
            "Mid",
            "Senior",
            "Consultant",
            "Architect"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "first",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            "Tom",
            "Mark",
            "Jon",
            "Liz",
            "Mike",
            "Bob",
            "Ted",
            "Ann",
            "Sue",
            "Rick",
            "Don",
            "Paul",
            "Carl",
            "Lou",
            "Tim",
            "Luke",
            "Will",
            "Sam"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "last",
          "null_percentage": 0,
          "type": "Last Name",
          "formula": ""
        },
        {
          "name": "email",
          "null_percentage": 0,
          "type": "Formula",
          "value": "\"#{first}.#{last}@gmail.com\"",
          "formula": ""
        },
        {
          "name": "city",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            " Warsaw",
            "Bydgoszcz",
            "Łódź",
            "Szczecin",
            "Rzeszów",
            "Poznań",
            "Gdańsk",
            "Lublin"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "status",
          "null_percentage": 0,
          "type": "Custom List",
          "values": [
            "free",
            "free in 2 weeks",
            "free in a month",
            "reserved",
            "busy",
            "vacation",
            "sick"
          ],
          "selectionStyle": "random",
          "distribution": null,
          "formula": ""
        },
        {
          "name": "date_1",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_2",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_3",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_4",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_5",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_6",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_7",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "date_8",
          "null_percentage": 0,
          "type": "Date",
          "min": "3/01/2019",
          "max": "6/30/2019",
          "format": "%Y-%m-%d",
          "formula": ""
        },
        {
          "name": "dates",
          "null_percentage": 0,
          "type": "Formula",
          "value": "[ \"#{date_1}\", \"#{date_2}\", \"#{date_3}\", \"#{date_4}\", \"#{date_5}\", \"#{date_6}\", \"#{date_7}\", \"#{date_8}\" ]",
          "formula": ""
        }
      ]
    }

___________________________________________________________________________________________
249) mockaroo - GUI (skillBill)

        youtube.com/watch?v=XATDlwG1azU&list=PLKMZcxOsC3u0Y-4CHg5SDpVjTcrvGttTt

        Aby generował dane z Twojej listy:
            a) typ pola ustaw na Custom List
            b) do pola Options wklej Twoją listę, np:
                    Bash, C, C++, C#, F#, Ruby,Go, Java, JS, ObjC, Swift   / random

         By wygenerował tablicę, złożoną z ww wartości:
            a) typ pola ustaw na Formula
            b) do pola Options wbij:
                    { "#{__skill_1}":"#{__rank_1}", "#{__skill_2}":"#{__rank_2}", "#{__skill_3}":"#{__rank_3}" }

            .. gdzie __skill_1,  __rank_1 i inne to nazwy wyżej zdefiniowanych pól
            Dwa podkreślenia są po to, by dane pole ukryć,  tzn by nie generował jego samego,
            a tylko by posłużyło do stwozenia formuły

            Np ma nie dawać:
                skill_1 = 'Java'
                skill_2 = 'C'
             .. a tylko:
                arr:  [ 'Java', 'C' ]

___________________________________________________________________________________________
250) skrypt generujący dane z mockaroo

          yarn add mockaroo

          Poniższego skryptu można go użyć jako źródła mockupowych danych
          do załadowania do webtask.io ( patrz punkt powyżej )

          Generowanie bazy rekordów programistów z ich językami i poziomem każdego z nich

          W rekordach bazy nie może być:
            a) zdublowanego języka
            b) imie + nazwisko < 12 znaków
            c) id mają być sekwencyjne

          W polu schema, podaje się nazwę schemy zaimportowanej z mockaroo
          Wcześniej się ją tam ustawia i sejwuje  ( po uprzednim zarejestrowaniu )

        UWAGA !  By dostać 100 rekordów, trzeba dać count  =  ok 150

  -  -  -  -  -  -  -  -  -  mockaroo.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

  var Mockaroo = require ( 'mockaroo' )
  var fs = require( 'fs' )
  var file = fs.openSync ( './dupa.js', 'w' )

  var client = new Mockaroo.Client ( { apiKey: '60ef9610' } )

  client.generate({
      count: 170,
      schema: 'skillBill9'
  })
  .then ( function ( records ) {

      //console.log( records )

      const x = records.filter ( function ( item ) {
          return item.skill_1  !== item.skill_2
              && item.skill_1  !== item.skill_3
              && item.skill_2  !== item.skill_3
      } )
      .filter ( function ( item, index ) {
          item.id = index
          delete item.skill_1
          delete item.skill_2
          delete item.skill_3
          delete item.rank_1
          delete item.rank_2
          delete item.rank_3
          return item
      } )

      console.log( x )
      console.log( 'rekordów = ', x.length  )

      fs.writeFileSync ( file, JSON.stringify ( x ) )
      fs.closeSync ( file )
  })

___________________________________________________________________________________________
253) webtask - hello world

    webtask.io/docs/wt-cli

      Zdalny serwer node'a w linuksie

      W wersji darmowej mozna odpalić 2 taski z szybkością 1 task/s

      Można używać go jako crona, podając mu co ile task ma byc odpalany
      Max storage = 400 kB

      Każda apka musi mieć na końcu:

        module.exports = cb => {
          cb(null, mainFunction())  // główna funkcja
        }

      Jeśli podasz mu arrayke:
          function() { cb(null, arr) }
      ... to funkcja z p. iii) musi zawierać setTimeouta, nawet jeśli będzie on  = 0

       i) npm install wt-cli -g

      ii) wt init

     iii) echo 'module.exports = function (cb) { setTimeout (function() { cb(null, { "name": "Ziutek" })}, 1)}' > hello.js

            albo:

      iv) module.exports = function ( context, request, response ) {
             response.writeHead ( 200, { 'Content-Type': 'application/json' } )
             response.end( JSON.stringify ( arr ) )
          }

       v) wt create hello.js

      vi) chrome
            https://wt-nabu1312-gmail-com-0.sandbox.auth0-extend.com/hello                       { "name": "Ziutek" }

     vii) wt edit hello  // przysyła linkę do edytora webowego

    viii) lokalny plik odbierający ww obiekt:
           -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
           const request = require ( 'request' )
           const url2 = 'https://webtask.it.auth0.com/api/run/wt-nabu1312-gmail-com-0/hello'

           console.time('request')

           new Promise(function(resolve, reject)  {
               request(url2, function(err, res, body) {
                 if(err)  { reject(err) }
                 resolve(JSON.parse(body).name) // Leanne
               })
           })
           .then(function(res) {
               console.log( res)
               console.timeEnd('request')

           })
           .catch(function(err)  {
               console.log( err)
           })

           -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      viii) cron jobs (użyj crontab.guru )
              wt cron schedule 5m  ./plik.js   // co 5 minut
              wt cron schedule  --ignore-package-json  --watch "21/1 15-23 * 6-9 *" plik.js
              wt cron schedule "0/5 15-23 * 6-9 *" ./plik.js   // At every 5th minute from 0 through 59 past every hour
                                                               // from 15 through 23 in every month from Jun through Sep

      ix) wt logs                         // wyswietla logi serwera

       x) wt edit nazwaTaska     // wyswietla daszburka webowego
                                //  burger - wybór webtaska
                               //   klucz francuski > scheduler
___________________________________________________________________________________________
254) webtask.io - symulacja bazy danych  ( skillBill )

      Projekt zakłada:

        Jest firma programistów, z ktorych każdy określił 3 języki, które zna i na jakim poziomie  ( 1 do 5 ), np
          { id: 1, { "id":1,"arr": { "Java": "4", "Go": "2" , "C":"5" } }
        Ileś takich rekordów tworzy baze  ( haystack )

        Menago dostaje od klienta info, że szuka programisty znającego C na poziomie 4+ i Javy na 3+ :
          { C: 4, Java: 3 }

          Menago odpala zapytanie restowe do bazy i dostaje rekordy je spełniające
          Dodatkowo, propertki każdego rekordu uporządkowane są w kolejności języków  ( skill )
          określonej przez klienta.
          Czyli nie  { Java: 5, C: 5 },   a    { C: 5, Java: 5 }

 -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
//https://wt-nabu1312-gmail-com-0.run.webtask.io/mock2?C=1&Java=1

var haystack =  [
{ "id":1,"arr": { "Java": "4", "Go": "2" , "C":"5" } },
{ "id":2,"arr": { "C":"2","Go":"1", "Java":"5" } },
{ "id":3,"arr": { "Java":"4","C":"4","C++":"2" }  }
]

module.exports = function ( ctx, req, res ) {

   console.log ( 'ctx.data = ', JSON.stringify ( ctx.data ) )

    var needle = ctx.data
    var needleKeys =   Object.keys ( needle )
    var needleKeysLen = needleKeys.length

    var resultSet = haystack.filter ( function ( haystackRow ) {

            if  (  needleKeysLen  === 0 )  {
                return haystackRow
            }
            else if  (  needleKeysLen  === 1 && haystackRow.arr [ needleKeys [ 0 ]  ]  >=  needle [ needleKeys [ 0 ]  ] )  {
                haystackRow.skill_A = needleKeys [ 0 ]
                haystackRow.rank_A = haystackRow.arr [ needleKeys [ 0 ] ]

                var haystackKeys =   Object.keys ( haystackRow.arr )

                haystackKeysSkill_A = haystackKeys.indexOf ( needleKeys [ 0 ]  )
                haystackKeys.splice ( haystackKeysSkill_A, 1 )

                haystackRow.skill_B = haystackKeys [ 0 ]
                haystackRow.rank_B = haystackRow.arr [ haystackKeys [ 0 ] ]

                haystackRow.skill_C = haystackKeys [ 1 ]
                haystackRow.rank_C = haystackRow.arr [ haystackKeys [ 1 ] ]

                //console.log ( 'haystackKeys = ',  haystackKeys )
                return haystackRow
            }
            else if  (  needleKeysLen  === 2 &&
                   haystackRow.arr [ needleKeys [ 0 ]  ]  >=  needle [ needleKeys [ 0 ]  ] &&
                   haystackRow.arr [ needleKeys [ 1 ]  ]  >=  needle [ needleKeys [ 1 ]  ]
            )  {
                haystackRow.skill_A = needleKeys [ 0 ]
                haystackRow.rank_A = haystackRow.arr [ needleKeys [ 0 ] ]

                haystackRow.skill_B = needleKeys [ 1 ]
                haystackRow.rank_B = haystackRow.arr [ needleKeys [ 1 ] ]

                var haystackKeys =   Object.keys ( haystackRow.arr )

                haystackKeysSkill_A = haystackKeys.indexOf ( needleKeys [ 0 ]  )
                haystackKeys.splice ( haystackKeysSkill_A, 1 )

                haystackKeysSkill_B = haystackKeys.indexOf ( needleKeys [ 1 ]  )
                haystackKeys.splice ( haystackKeysSkill_B, 1 )


                haystackRow.skill_C = haystackKeys [ 0 ]
                haystackRow.rank_C = haystackRow.arr [ haystackKeys [ 0 ] ]

                return haystackRow
            }
            else if  (  needleKeysLen  === 3 &&
                   haystackRow.arr [ needleKeys [ 0 ]  ]  >=  needle [ needleKeys [ 0 ]  ] &&
                   haystackRow.arr [ needleKeys [ 1 ]  ]  >=  needle [ needleKeys [ 1 ]  ] &&
                   haystackRow.arr [ needleKeys [ 2 ]  ]  >=  needle [ needleKeys [ 2 ]  ]
            )  {

                haystackRow.skill_A = needleKeys [ 0 ]
                haystackRow.rank_A = haystackRow.arr [ needleKeys [ 0 ] ]

                haystackRow.skill_B = needleKeys [ 1 ]
                haystackRow.rank_B = haystackRow.arr [ needleKeys [ 1 ] ]

                haystackRow.skill_C = needleKeys [ 2 ]
                haystackRow.rank_C = haystackRow.arr [ needleKeys [ 2 ] ]

                return haystackRow
            }
    } )

        console.log( "________________________________________________________________" )
        console.log (  'result = ', JSON.stringify ( resultSet )  )

        res.writeHead ( 200, { 'Content-Type': 'application/json' } )
        res.end( JSON.stringify ( resultSet ) )

}
___________________________________________________________________________________________
255) apka korek  ( webtask + mLab )

      Apka bada o której godzinie korki w Niuporcie kierunek Wwa, są najmniejsze

      o) zapisz się do googla API i weź key'a do distance-matrix
          developers.google.com/maps/documentation/distance-matrix/

      a) stworz darmowe konto na mLabie i spisz komende logowania
          (np: 'mongodb://nabu:kupa12@ds139362.mlab.com:39362/korki' )

      b) zainstaluj i skonfiguruj Robomongo lub MongoChefa

      c) mkdir apka && cd apka && touch korek.js && yarn add mongodb request

      d) wbij poniższe

      e) z cmd odpal:
          wt cron schedule "28/1 15-23 * 6-9 *" korek.js
          wt edit hello
          wt logs

      f) obejrzyj efekt w daszburku mLaba:
            mlab.com/databases/korki/collections/korki


    -  -  -  -  -  -  -  package.json  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    {
      "name": "korek",
      "main": "korek.js",
      "dependencies": {
        "mongodb": "^2.2.29",
        "request": "^2.81.0"
      }
    }

    -  -  -  -  -  -  -  korek.js  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    const MongoClient = require('mongodb').MongoClient
    const request = require ( 'request' )

    const mLab  = 'mongodb://nabu:kupa12@ds139362.mlab.com:39362/korki'

    const url = 'https://maps.googleapis.com/maps/api/distancematrix/json?origins=Zegrze%20Poludniowe&destinations=Nieporet,Dworcowa&mode=driving&departure_time=now&key=AIzaSyA3fsqWy6oYi584K9_fh3Zv8YFza-gwYHI'

    var x = ()  =>  {
        request (url, function(err, res, body) {
            if (err)  { response.end (err); return }

            MongoClient.connect ( mLab, function ( err, db ) {
              if ( err ) { console.log( err ); return false }

              console.log ( "Connected to the server" )
              var bodyObj = JSON.parse ( body )

              var from = bodyObj.origin_addresses [ 0 ]
              var to = bodyObj.destination_addresses [ 0 ]
              var distance = bodyObj.rows [ 0 ].elements [ 0 ].distance.value
              var duration = bodyObj.rows [ 0 ].elements [ 0 ].duration.value
              var traffic =  bodyObj.rows [ 0 ].elements [ 0 ].duration_in_traffic.value
              var legalSpeed =  Math.round ( ( distance / duration ) * 3600 / 1000 )
              var trafficSpeed = Math.round ( ( distance / traffic ) * 3600 / 1000 )

              var now = new Date ( )
              var nowString =  now.getDate ( ) + "-" + ( now.getMonth ( ) + 1 ) + "-" + ( now.getYear ( ) + 1900 ) + "  " + now.toLocaleTimeString ( )

              var mongoObj = { }
              mongoObj.time = nowString
              mongoObj.timestamp =  +now
              mongoObj.from = from
              mongoObj.to = to
              mongoObj.distance = distance
              mongoObj.duration = duration
              mongoObj.legalSpeed = legalSpeed
              mongoObj.trafficSpeed = trafficSpeed

              var collection = db.collection ( 'korki' )

              collection.insertOne ( { paczka: mongoObj }, function ( err, result ) {
                  if ( err )  { console.log ( err ); return false }
                  console.log ( "Insert OK" )
               } )

              db.close ( )
            } )
        })
    }

    module.exports = ( ctx, cb ) => {
        cb(null, x () )
    }

    /*
    wt cron schedule "0/1 15-23 * 6-9 *" korek.js
    */


    -  -  -  -  -  -  -    -  -  - json z google'a  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    {
       "destination_addresses" : [ "Dworcowa, 05-126 Nieporęt, Polska" ],
       "origin_addresses" : [ "Zegrze Południowe, Polska" ],
       "rows" : [
          {
             "elements" : [
                {
                   "distance" : {
                      "text" : "4,9 km",
                      "value" : 4948
                   },
                   "duration" : {
                      "text" : "6 min",
                      "value" : 372
                   },
                   "duration_in_traffic" : {
                      "text" : "7 min",
                      "value" : 390
                   },
                   "status" : "OK"
                }
             ]
          }
       ],
       "status" : "OK"
    }
___________________________________________________________________________________________
259) mLab - tips

      a) ustaw indeks(y)
           tab Indexes > klik w 'Add Index'
           Tylko wtedy będzie działały query filtrujące np timestampy: od - do

      b) tabela wyświetlająca rekordy
           tab Documents > radio baton Table > klik w 'edit table view' i np:

            {
                "_id": "id",
                "dayString": "dayString",
                "channel": "channel",
                "time": "time",
                "title": "title",
                "type": "type",
                "category": "category"
            }

      c) komendy do export / import
          komendy są w tabie Tools

      d) lokalne query
          Rozwiń dropdowna '-- Start new search' > New Search

___________________________________________________________________________________________
260) mLab - hello world

      docs.mlab.com/data-api/

      a) zarejstruj się

      b) zanotuj API key:
            https://mlab.com/user?username=nabu
            API key: XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

      c) utwórz db ('tvui') i kolekcję ('tvui1')

      d) utwórz usera db
          By móc importować dane z linii poleceń

            https://mlab.com/home > klik w db np 'tvui > klik w taba Users > kilk w batona 'Add db users'

            i wbij login i hasło do mLaba, by ułatwić zapamiętanie i uniknąć pomyłek

       e) zaimportuj do mLaba paczkę jsonów
            mongoimport -h ds163054.mlab.com:63054 -d tvui -c tvui1 -u nabu -p kupa1312 --file dzis2kanaly2.json --jsonArray
            mongoimport -h ds163054.mlab.com:63054 -d tvui -c tvui1 -u nabu -p kupa1312 --file 3kanaly3dni.json --jsonArray

      UWAGA !
        Import JSONa z pliku do mLaba: docs.mlab.com/migrating/#import

          Jeśli paczka jsonów w pliku, wygląda tak:
            [
              {...},
              {...},
              ...
            ]
          ..  a nie tak:
           {
             "biedra":
                [
                  {...},
                  {...},
                  ...
                ]
           }

          ...to na końcu linijki importowej dopisz --jsonArray

___________________________________________________________________________________________
261) mLab - queries

      [q=<query>] [&c=true] [&f=<fields>] [&fo=true] [&s=<order>] [&sk=<skip>] [&l=<limit>]

      c = true - count

      f = selected fields (1 - include; 0 - exclude)

      fo = true - single document (same as findOne() using the mongo shell

      s = sort: 1 - ascending; -1 - descending

      sk = skip - useful for paging

      l = limit for results (default is 1000)

      Examples:

        a) queries (q)
            all:
              https://api.mlab.com/api/1/databases/tvui/collections/tvui1?&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

            all, sorted by timestamp:
              https://api.mlab.com/api/1/databases/tvui/collections/tvui1?&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI
              https://api.mlab.com/api/1/databases/tvui/collections/tvui1?s={id:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI


            hour:"3:05":
              https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={hour:"3:05"}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

            timestamp:1547953500000:
              https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={timestamp:1547953500000}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI


https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={"date":"2019-01-22"}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={"channel":"POLSAT"}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={"date":"2019-01-22", "channel":"POLSAT"}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={"date":"2019-01-22", "channel":"POLSAT"}&s={timestamp:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={"timestamp": { "$gt": 1548090000000 }}&s={timestamp:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={$and:[{timestamp:{$gt:1548090000000}},{timestamp:{$lt:1548108000000}}]}&s={timestamp:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={$and:[{timestamp:{$gt:1548090000000}},{timestamp:{$lt:1548108000000}}]}&s={timestamp:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

{$and:[{timestamp:{$gt:1548090000000}},{timestamp:{$lt:1548108000000}}]}


"timestamp": { "$gt": 1548090000000 }


      b) count (c)
          https://api.mlab.com/api/1/databases/tvui/collections/tvui1?q={hour:"3:05"}&c=true&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI


      c) fields (f)

          include hour and title
            https://api.mlab.com/api/1/databases/tvui/collections/tvui1/?f={hour:1,title:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

          exclude hour and title
            https://api.mlab.com/api/1/databases/tvui/collections/tvui1/?f={hour:0,title:0}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI


      d) single (fo)

          https://api.mlab.com/api/1/databases/tvui/collections/tvui1?&fo=true&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

      e) sort (s)

          https://api.mlab.com/api/1/databases/tvui/collections/tvui1?s={hour:1}&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

      f) skip and limit (sk, l)

          https://api.mlab.com/api/1/databases/tvui/collections/tvui1?sk=1&l=2&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

      g) sort, skip and limit

          https://api.mlab.com/api/1/databases/tvui/collections/tvui1?s={title:1}&sk=2&l=5&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI

___________________________________________________________________________________________
262) mLab - insert / upsert przez API

      https://docs.mlab.com/data-api/

      yarn add axios

      Po odpaleniu poniższego, upewnij się że rekord został dodany,
      odpalając lokalne query na mLabie (Documents > dropdown 'Start new Search...')

      Jeśli na końcu urla dodasz '&u=true', będzie to upsert
        const urlWioturilloLista = `https://api.mlab.com/api/1/databases/${COLLECTION_NAME}/collections/${STATIONS_LIST}?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI&u=true`

    -------- insert.js -------------------------------

      const axios = require('axios')
      const url = `https://api.mlab.com/api/1/databases/tvui/collections/tvui1?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI`

      axios.defaults.headers.post['Content-Type'] = 'application/json'

      axios.post(url, {
        firstName: 'Fred',
        lastName: 'Flintstone'
      })
      .then(res => console.log(res.data))
      .catch(err => console.log(error))

___________________________________________________________________________________________
263) mLab - delete przez http

    ---------- Table.vue ----------------------------------------------------

      import { ajaxInsertDev, ajaxDelete } from '../../services/ajax'


      deleteItem (item) {
        console.log('%c id = ' + JSON.stringify(item.id), 'color: violet')
        console.log('%c _id = ' + JSON.stringify(item._id.$oid), 'color: violet')

        confirm('Na pewno chcesz usunąć ten rekord ?') && ajaxDelete(JSON.stringify(item._id.$oid))
      },

    ---------- ajax.js ----------------------------------------------------

    const ajaxDelete = _id => {
      console.log('%c _id = ', 'color: white')
      console.log(_id.replace(/"/g, ''))

      // const url = `https://api.mlab.com/api/1/databases/skillbill/collections/skillbill/5c742d443603900f550d492a?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI`
      // const url = `https://api.mlab.com/api/1/databases/skillbill/collections/skillbill/${_id.replace(/"/g, '')}?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI`

      const url = `${LITERALS.PREFIX}/${_id.replace(/"/g, '')}?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI`

      console.log('%c url = ' + url, 'color: white')

      axios.delete(url)
        .then(res => console.log('Skasowany ziutex: ', res))
        .catch(err => console.log('Błąd: ', err))
    }

___________________________________________________________________________________________
264) mLab - update

      https://docs.mlab.com/data-api/#view-edit-delete-document

      const datesObj = { "$set" : { "dates" : dates } }

      axios.put(url, datesObj)
        .then(res => {
          console.log(res.data)
          alert('Daty zostały zapisane na serwerze')
        })
        .catch(err =>  {
          alert('Błąd zapisu dat na serwerze: ', err)
        })

___________________________________________________________________________________________
265) mLab - linki

      Fixed portion of the Resource URL:
            https://api.mlab.com/api/1

      List all databases
          https://api.mlab.com/api/1/databases?apiKey=myAPIKey

      List all collections
          https://api.mlab.com/api/1/databases/my-db/collections?apiKey=myAPIKey

      List documents
          https://api.mlab.com/api/1/databases/my-db/collections/my-coll?apiKey=myAPIKey

_________________________________________________________________________________________
270) lodash - top 16

      yarn add lodash  // albo
      const _ = require('lodash/core')  // 14k zamiast 71 przy całym lodaszu

      ------------------------------------------------------
      1) Utils (times, deburr, uniqueId, random, range)

        // 1. times
        _.times(5, () => console.log('dupa'))

        // 2. random
        _.random(15, 20) // Get a random number between 15 and 20.

        // 3. range
        range(1, 4) // [1,2,3]   range(4,1) // [4,3,2]

      ------------------------------------------------------
      2) Object (pick, omit, assign, cloneDeep)

          // 1. pick
            const objA = { name: "colin", car: "suzuki", age: 17 }
            const objB = _.pick(objA, ["car", "age"]); // {"car": "suzuki", "age": 17}

          // 2. omit - removing props from the object
            const objA = { name: "colin", car: "suzuki", age: 17 }
            objA = _.omit(objA, ["car", "age"]) // {"name": "colin"}

          // 3. cloneDeep
            const original = { foo: "bar" }
            const copy = _.cloneDeep(original)
            copy.foo = "new value"   // copy -> { foo: "new value" } Yeah!
                                    //  original -> { foo: "bar" } Yeah!

          // 4. assign
            const objA = { name: "colin", car: "suzuki" }
            const objB = { name: "james", age: 17 }
            const objC = { pet: "dog" }

            _.assign(objA, objB, objC) // {"name": "james", "car": "suzuki", "age": 17, "pet": "dog"}

      ------------------------------------------------------
      3) Array (union, difference, intersection, sample, unique, shuffle)

          const a = [1, 2, 3, 4]
          const b = [1, 2, 3, 5]

          // 1.  _.union(a, b)  // [ 1, 2, 3, 5, 4 ]

          // 2. _.difference  // [4]

          // 3. ._intersection(a, b)  // [1, 2, 3]

          // 4. _.sample(a) // 3 - losowy element

          // 5. _.uniq([1, 2, 2, 3, 4, 4]) // [1, 2, 3, 4]

          // 6. _.shuffle(a) // [2, 4 , 1, 3] - potasowane

          // 7. _.take([1, 2, 3], 2)  // [1, 2]

          // 8. _.takeRight([1, 2, 3], 2)  // [2, 3]
      ------------------------------------------------------
      4) Array of objects (find, sortBy, keyBy)

          // 1. find

              const a = [
                { name: 'jan', age: 11, city: 'wwa'},
                { name: 'adam', age: 22, city: 'gda'},
                { name: 'bob', age: 22, city: 'gda'}
              ]

              const x = _.find(a, { age: 22 }) // { name: 'adam', age: 22, city: 'gda' } - 1-szy spełniający kryteria

          // 2. sortBy

              const a = [
                { name: 'adam', age: 22, city: 'wwa'},
                { name: 'jan', age: 11, city: 'wwa'},
                { name: 'adam', age: 22, city: 'gda'}
              ]

              _.sortBy(a, ['age', 'city'])

          // 3. keyBy - szuka tylko 1 rekordu, wiec nadaje się do szukania unikalnego rekordu (np id)

              const a = [
                { name: 'jan', age: 33, city: 'wwa'},
                { name: 'jan', age: 22, city: 'gda'},
                { name: 'bob', age: 22, city: 'gda'}
              ]

              _.keyBy(a, 'city') // { name: 'bob', age: 22, city: 'gda' }


_________________________________________________________________________________________
271) curl

      curl -i adres           // wyświetl też headery
      curl -I adres           // wyświetl same headery
      curl -o plik.txt adres
      curl -d "title=Hello&body=HelloWorld"

      curl -u hans:haslo adres
      curl -u hans:haslo adres -T hello.txt ftp://ftp.mojserwer.com
      curl -u hans:haslo adres -O ftp://ftp.mojserwer.com hello.txt

      curl google.com         // zwraca '301 Moved'
      curl -L google.com         // zwraca właściwą stronę (follow redirect)

      curl -H "Accept:application/json" adres  // ustawienie dowolnych headerów
      curl -H "Accept:application/json" adres -d {"name:"jan", "age": 12}

     Odpal expressa w poniższym skrypcie i wtedy kolejno poniższe komendy:

      curl -X GET localhost:3000   // -X GET mozna pominąć, jest domyślne

      curl -X POST localhost:3000
      curl -d '{ "key1": "value1", "key2": "value2" }' -H "Content-Type: application/json" -X POST https://kupasiku.free.beeceptor.com

      curl -X PUT localhost:3000   // Upsert, ale updatuje tylko całe dokumenty
      curl -X PATCH localhost:3000  // Może updateować również części; klepniety w 2010
      curl -X DELETE localhost:3000

    ----------------------------------------------
      const express = require('express')
      const app = express()

      app.get('/', (req, res) => res.send('Tu GET'))
      app.post('/', (req, res) => res.send('Tu POST'))
      app.put('/', (req, res) => res.send('Tu PUT'))
      app.delete('/', (req, res) => res.send('Tu DELETE'))

      app.listen(3000, () => console.log('Serwer na 3000 ..'))

_________________________________________________________________________________________
280) CSP

      sekurak.pl/wszystko-o-csp-2-0-content-security-policy-jako-uniwersalny-straznik-bezpieczenstwa-aplikacji-webowej/
      content-security-policy.com/
      youtube.com/watch?v=d0D3d0ZM-rI   // The application security Swiss Army Knife


      Content Security Policy - jest nagłówkiem odpowiedzi serwera (albo tagiem html strony),
      zmniejszające ryzyko ataku XSS, zarówno ładowanego z zewnątrz jak i inline'owo

      Zasadą jest deny all, a wszystkie zapisy tzw polityki CSP ją rozluźniają.
      Składa się ona z 2 elementów:

      dyrektywy (directive) i  list źródeł (source list):
      directiveX: source1 source2 sourceN;

      Content-Security-Policy:
        script-src 'self' 'unsafe-inline';     // skrypty tylko z własnej domeny, dozwolone inline-skrypty
        img-src 'self' https: ;               // obrazki tylko z własnej domeny albo z dowolnej z https
        style-src 'self' *.cdn.com 'unsafe-inline'; // j/w + <p style = "" onclick=""
        media-src * // skądkolwiek

      Inne, nie wymienione elementy (np. fonty) są blokowane

      Dyrektywy rozdziela się średnikami, białe znaki nie mają znaczenia.

      W pliku html wyglada to tak:
        <meta http-equiv="Content-Security-Policy"
          content="script-src 'self' ;"
        >

      W pliku node'a:
        app.setHeader('Content-Security-Policy',
          "script-src 'self' https://apis.google.com";
          "style-src 'self'"
        )

      Jeśli browser napotka linijkę ściagającą skrypt z zewnątrz, np:
        <script src='https://dupa.com></script>
      .. sprawdzi czy wymieniona tam domena, jest na whiteliście headera (ew meta taga) csp

      Jeśli nie ma, to nie dopuści do jej wykonania

      Podobnie, przy ustawieniach domyslnych blokowane są wszeslkie inline skrypty,
      więc ponizszy skrypt nie przejdzie:
        <script> alert(1) </script>

      By przeszedł, trzeba go wykonać z klepniętego w cs , zdalnego serwera:
        <script src='http://..'> alert(1) </script>

      Inne dyrektywy:
        form-action               - zapobiega wysłaniu zawartości formy pod wrogi adres
        frame-ancestors           - określa listę, którę ze stron mogą uzywać we framie naszej strony
        block-all-mixed-content   - mają być tylko asety http lub tylko https, preferably https
        upgrade-insecure-requests - jeśli w adresie aseta jest http, spróbowany zostanie ten sam aset z https

      Do testowania polityki csp, przewidziany jest tryb:
        Content-Security-Policy-Report-Only: [policy]

      Dzięki niemu, żadna akcja skryptu nie zostanie zablokowana polityką csp,
      a tylko wyświetlony będzie komunikat

      Dyrektywa report-uri https://mojaStrona.report-uri.pl
      wyśle raport na moją stronę

_________________________________________________________________________________________
281) helmet

    Helmet chroni przez zagrożeniami przez ustawianie 9 nagłówków http

    app.use(helmet()) - ustawia wszystkie
    app.use(helmet.noCache()) - ustawia wybrany
    app.use(helmet({ frameguard: false })) - wyłącza wymieniy, a reszta jest włączona

    Najlepiej umieścić go jak najwyżej, by miec pewność, że nagłówki będą ustawione

    1) csp - ustawia nagłówek CSP, by uniknąć XSS

    2) hidePoweredBy - usuwa nagłówek X-Powered-By. Albo fałszuje go, np:
        app.disable('x-powered-by')
        app.use(hidePoweredBy({ setTo: 'PHP 4.2.0' }))

    3) hpkp - dodaje Public Key Pinning headers by zapobiec atakom man-in-the-middle z podrabianymi certyfikatami

    4) hsts - ustawia nagłówek Strict-Transport-Security wymuszający bezpieczne połaczenie z serwerem (SSL / TLS)

    5) ieNoOpen - ustawia X-Download-Options for IE8+

    6) noCache - ustawia nagłówki Cache-Control and Pragma by wyłaczyć keszowanie po stronie klienta

    7) noSniff - ustawia X-Content-Type-Options to prevent browsers from MIME-sniffing a response away from the declared content-type.

    8) frameguard - ustawia nagłówek X-Frame-Options chroniący przed clickjackingiem

    9) xssFilter - ustawia X-XSS-Protection właczający filtr XSS w najnowszych przegladarkach
_________________________________________________________________________________________
282) helmet-csp

      yarn add helmet-csp

      const csp = require('helmet-csp')

      app.use(csp({
        // Specify directives as normal.
        directives: {
          defaultSrc: ["'self'", 'default.com'],
          scriptSrc: ["'self'", "'unsafe-inline'"],
          styleSrc: ['style.com'],
          fontSrc: ["'self'", 'fonts.com'],
          imgSrc: ['img.com', 'data:'],
          sandbox: ['allow-forms', 'allow-scripts'],
          reportUri: '/report-violation',
          objectSrc: ["'none'"],
          upgradeInsecureRequests: true,
          workerSrc: false  // This is not set.
        },

        // This module will detect common mistakes in your directives and throw errors
        // if it finds any. To disable this, enable "loose mode".
        loose: false,

        // Set to true if you only want browsers to report errors, not block them.
        // You may also set this to a function(req, res) in order to decide dynamically
        // whether to use reportOnly mode, e.g., to allow for a dynamic kill switch.
        reportOnly: false,

        // Set to true if you want to blindly set all headers: Content-Security-Policy,
        // X-WebKit-CSP, and X-Content-Security-Policy.
        setAllHeaders: false,

        // Set to true if you want to disable CSP on Android where it can be buggy.
        disableAndroid: false,

        // Set to false if you want to completely disable any user-agent sniffing.
        // This may make the headers less compatible but it will be much faster.
        // This defaults to `true`.
        browserSniff: true
      }))

_________________________________________________________________________________________
283) bcrypt

      const bcrypt = require('bcryptjs')

      async function hashedPasswd(plaintext) {
        const user = {
          name: 'Brad',
          email: 'brad@gmail.com',
          password: 'plaintext'
        }
        const salt = await bcrypt.genSalt(10)
        console.log(salt)

        user.password = await bcrypt.hash(plaintext, salt)
        console.log(user.password)
      }

      async function comparePasswords(plaintext, hash) {
        const isMatch = await bcrypt.compare(plaintext, hash)
        if (isMatch) console.log('Match')
        else console.log('Not Match')
      }

      hashedPasswd('1234')
      comparePasswords('1234', '$2a$10$wrxvmRuQn6PohoEfLubtpO6u/ZrZw7ks9lb.RzoSBTTQps0SxNys.')


___________________________________________________________________________________________
310) node + postgres

    Postgres 10.4
    yarn add pg

    ---------------------------------------------------
    const Pool = require('pg').Pool

    const config = {
      host: 'localhost',
      user: 'postgres',
      password: '',
      database: 'chinook'
    }

    const pool = Pool(config)

    async function get() {
      const res = await pool.query(
        'SELECT name, city FROM users LIMIT 5'
      )

      console.log('res.rows = ', res.rows)
      const x = res.rows.filter(el => el.Name === 'Aerosmith')
      console.log('x = ', x)
    }

    get()

___________________________________________________________________________________________
311) node + postgres: sql + navicat

      Navicat:
        komentowanie linii - ctrl + /
        start od kursora   - F7

      Dzielenie linii:
        UWAGA !
          Przed backslaszem MUSI być spacja !

          "SELECT name, city FROM users \
           WHERE city = 'wwa' OR age < 30 "

      --------------------------------------------------------

      const Pool = require('pg').Pool
      const config = {
        host: 'localhost',
        user: 'postgres',
        password: '',
        database: 'chinook'
      }
      const pool = Pool(config)

      async function get() {
        const res = await pool.query(

      // 1. AND, OR, LIMIT, OFFSET

          // "SELECT * FROM users WHERE city = 'wwa'"
          // "SELECT COUNT (*) FROM users WHERE city = 'wwa' AND age > 55"
          // SELECT COUNT (*) FROM users WHERE city = 'wwa' OR age > 55`
          // "SELECT name, city FROM users LIMIT 5"
          // "SELECT name, city FROM users OFFSET 3"

      // 2. DISTINCT, ORDER BY, BETWEEN, IN, LIKE

          //"SELECT count (DISTINCT city) FROM users"
          //"SELECT name, age FROM users ORDER BY age DESC"
          // "SELECT name, age FROM users WHERE age BETWEEN 30 AND 60"
          // "SELECT name, age FROM users WHERE age NOT BETWEEN 30 AND 60"
          // "SELECT name, city FROM users WHERE city IN ('wwa', 'krk')"
          // "SELECT name, city FROM users WHERE city NOT IN ('wwa', 'krk')"
          //"SELECT name, city FROM users WHERE city LIKE 'w%'"  // wwa, wroc
          // "SELECT name, city FROM users WHERE name LIKE '%a%'"  // adam, mark, jan

      // 3. AVG, ROUND, MIN, MAX

          // "SELECT AVG(age) FROM users"        // 48.05
          // SELECT ROUND(AVG(age),0) FROM users // 48
          // SELECT MIN(age) FROM users   // 3
          // SELECT MAX(age) FROM users  // 88

      // 4. GROUP BY, HAVING

          // "SELECT name, SUM(age) FROM users GROUP BY name" // { name: 'piotr', sum: '107' },
          // { name: 'bob', sum: '238' },
          // { name: 'adam', sum: '378' },

          // "SELECT name, SUM(age) FROM users GROUP BY name HAVING SUM(age) > 150"
          // "SELECT name, age, age * 0.23 AS ageVAT FROM users" //
          // "SELECT upper(name) || '-' || city AS name_city, age FROM users"
          // "SELECT name, sum(age) from users GROUP BY name HAVING sum(age) > 200"  // [ { name: 'bob', sum: '238' },


      // 5. INSERT, UPDATE, DELETE, CREATE, ALTER, DROP

          // "INSERT INTO users (id, name, city, age) VALUES (40,'adolf', 'berlin', 88), (41,'hans', 'praga', 66)"
          // { name: 'adam', sum: '378' } ]
          // "UPDATE users SET city = 'wro' WHERE NAME = 'adam'"
          // "DELETE FROM users WHERE NAME = 'adam'"
          // "ALTER TABLE users ADD COLUMN nowa VARCHAR"  // lub INT, BOOLEAN
          // "ALTER TABLE users DROP COLUMN nowa"
          // "ALTER TABLE users RENAME COLUMN nowaa TO stara"
          // "DROP TABLE IF EXISTS nazwaTabeli"
          // "CREATE TABLE dupa (id serial PRIMARY KEY, name VARCHAR(20) NOT NULL, pesel INT(11) UNIQUE)"

          // "CREATE TABLE users birth DATE CHECK (birth > '1900-01-01',
          //    join DATE CHECK (join > birth),
          //    salary INT CHECK (salary > 0))"

      // 6. SUBQUERY

          // "SELECT * FROM users WHERE age > (SELECT AVG (age) FROM users WHERE city = 'krk')"
          // "SELECT * FROM users WHERE age > (SELECT AVG (age) FROM users)"

      // 7. JOIN

         UWAGA !
          Jeśli w obu tabelach jest kolumna 'name' to by ją wyświetlić,
          trzeba użyć 'AS' by zmienić jej nazwę, bo nie przejdą 2 kolumny o tej samej nazwie

          "SELECT users.ID, \
                  users.NAME AS user, \
                  cars.NAME AS car \
          FROM users \
          INNER JOIN cars \
          ON users.ID = cars.ID"

        )
        console.log(res.rows)
      }

      get()

___________________________________________________________________________________________
312) diag - projekt

    a) zaimportuj tabele do mLaba:

        mongodb://nabu:kupa1312@ds249992.mlab.com:49992/diag

        mongoimport -h ds249992.mlab.com:49992 -d diag -c disease-symptoms -u nabu -p kupa1312 --file disease-symptoms.json
        mongoimport -h ds249992.mlab.com:49992 -d diag -c symptom-diseases -u nabu -p kupa1312 --file symptom-diseases.json
        mongoimport -h ds249992.mlab.com:49992 -d diag -c symptoms -u nabu -p kupa1312 --type csv --file symptoms.csv --headerline
        mongoimport -h ds249992.mlab.com:49992 -d diag -c diseases -u nabu -p kupa1312 --type csv --file diseases.csv --headerline

    b) cd src/server

    c) nodemon server

    d) localhost:3000/mongo  // patrz plik server/mongo.js
___________________________________________________________________________________________
313) mac address

      a) aktywej karty sieciowej:

          const network = require('network');

          network.get_active_interface(function (err, obj) {
            console.log(obj.mac_address);
          })

      b) wszystkich kart seiciowych

          const x = require('os').networkInterfaces()
          console.log('x = ', x)

          /*
          {
            eth0:
            [{
              address: 'fe80::cae0:ebff:fe14:1dab',
              netmask: 'ffff:ffff:ffff:ffff::',
              family: 'IPv6',
              mac: 'c8:e0:eb:14:1d:ab',
              scopeid: 4,
              internal: false
            },
            {
              address: '192.168.178.22',
              netmask: '255.255.255.0',
              family: 'IPv4',
              mac: 'c8:e0:eb:14:1d:ab',
              internal: false
            }]
          }
          */

___________________________________________________________________________________________
314) gitbash - aliasy

      w gitBashu, w pliku C:\Users\abc\.bashrc, można robić aliasy:
        nano ~/.bashrc
          lub:
        vim ~/.bashrc   // wyjście - Esc > :wq czy :q

       # przeladuj odpalając: . ~/.bashrc`  - kropka na początku
       # przeladuj odpalając: . ~/.bashrc  - kropka na początku
       alias a='alias'
       alias c='clear'
       alias cu='curl 192.168.99.100:3000'
       alias d='docker'
       alias db='docker build -t'
       alias dc='docker-compose'
       alias dd='docker run --rm -d -p 3000:3000'
       alias di='docker images'
       alias dm='docker-machine'
       alias dr='docker rm $(docekr ps -aq)'
       alias e='emulator @Nexus4'
       alias ee='emulator -list-avds'
       alias fd='firebase deploy'
       alias fs='firebase serve'
       alias k='kubectl'
       alias m='git config -l|grep user && git remote -v'
       alias mk='git config user.email maciek.kand@gmail.com && git config user.name maciekkand'
       alias mkk='git remote add origin https://github.com/maciekkand/shopsring.git'
       alias n='nodemon ./wywal.js'
       alias na='git config user.email nabu1312@gmail.com && git config user.name nabu1'
       alias naa='git remote remove origin && git remote add origin https://github.com/nabu1/skillbill2.git'
       alias nn='node app'
       alias no='yarn build && cd dist && now && cd ..'
       alias p='ping 1.1.1.1'
       alias rr='git remote remove origin'
       alias test='git config -l|grep user && git remote -v'
       alias y='yarn serve'
       alias e='nano ~/.bashrc'
       alias ee='. ~/.bashrc'


      Listuje się je komendą: alias
      Odpala przez: dd nazwaImaga
___________________________________________________________________________________________
315) alasql - sql w js

      Działa prawie 100% poleceń sql
      Czyta, konwertuje i zapisuje pliki w json, csv, xls, xlsx
___________________________________________________________________________________________
316) hashcat - passwords cracking

      hackernoon.com/20-hours-18-and-11-million-passwords-cracked-c4513f61fdb1  @ 25 cze 19

      20 hours. $0.90 per hour. That’s just $18. 80% of 14 million passwords cracked

      2 hours: 48% of the passwords were cracked
      8 hours: nearly 70% were cracked
      20 hours: over 80% had been cracked

      I ran Hashcat on Nvidia Tesla K80 — a GPU with 4992 cores. $0.90 per hour (AWS P2.xlarge)
      The K80 came out 16 times faster than an average Intel 5500 graphics card.
      The K80 can calculate ~800 million SHA-256 hashes per second… that’s nearly 3 trillion per hour.

___________________________________________________________________________________________
320) deplojka lokalna (serve)

      a) yarn add global serve

      b) zrób plik a.json
          [
            {
              "shopName": "Biedronka",
              "city": "Warszawa",
              "address": "Krucza 50",
            },
            {
              "shopName": "Biedronka",
              "city": "Warszawa",
              "address": "Augustyna Kordeckiego 56/58",
            }
          ]

      c) odpal serve a.json

      d) chrome localhost:5000

-------------------------------------------------------------------------------------------
321) zeit now - micro i micro-dev (veturilki - firestore)

      github.com/zeit/micro/tree/master/examples/external-api-call
      github.com/zeit/micro-dev

      micro - odpala apkę na lokalnym serwerze, by zobaczyć czy działa, nim wyśle się ją na zeit'a
      micro-dev - to nodemon dla micro

      Poniżej, skrypt do ściągania danych ze strony gdzieturilo.pl i wysyłania ich na firestore'a
      Niestety, przy trochę bardziej zagnieżdżonej strukturze danych, komenda 'where' firestore'a
      jest zbyt słaba do wyciągnięcia danych.

      Ściągnięcie ich wszystkich i filtrowanie zaś w samej apce jest złe, bo dane za 24h przy 340 stacjach
      paczce danych co 5 minut (czyli prawie 300 paczkach), to 10 MB

      Wniosek: przy zagnieżdżonej strukturze tablicowo-obiektowej, trzeba wybrać mLaba
               Firestore nadaje się do płaskiej struktury

        ----------- package.json ----------------------------------------------

          {
            "name": "firestor1",
            "version": "1.0.0",
            "main": "index.js",
            "license": "MIT",
            "dependencies": {
              "axios": "^0.18.0",
              "firebase": "^5.9.4",
              "firebase-admin": "^7.2.0",
              "micro": "^9.3.3",
              "micro-dev": "^3.0.0",
              "xml2js": "^0.4.19"
            },
            "scripts": {
              "start": "micro",
              "dev": "micro-dev"
            }
          }

        ----------- now.json ----------------------------------------------

          {
            "version": 2,
            "name": "wetu",
            "builds": [{
              "src": "index.js",
              "use": "@now/node",
              "config": { "maxLambdaSize": "6mb" }
            }]
          }

        ----------- app.js ----------------------------------------------

          const axios = require('axios')
          const parseString = require('xml2js').parseString
          const firebase = require("firebase")
          require("firebase/firestore")

          const COLLECTION_NAME = 'wioturilki'
          const url = 'http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL'
          const config = { apiKey: "AIzaSyBdFBbhzU2XI4Ce-HjIsyeosWaifFmR2kc", projectId: "firestoras" }

          firebase.initializeApp(config)
          const app = firebase.app()
          const db = firebase.firestore()

          module.exports = async (request, response) => {
            await axios.get(url)
            .then(res => {
              parseString(res.data, (err, result) => {
                if (err) console.log('Erorek: ', err)

                const timestamp = Date.now()
                let time = new Date().toLocaleString("pl-PL", { timeZone: "Europe/Warsaw" })
                time = new Date(time).toLocaleString()

                const city = result.markers.country[0].city[0].place

                let stations = city
                  .filter (el => el.$.name === 'Wałbrzyska - Wróbla' || el.$.name === 'Metro Służew')  // zakomentuj tą linię, by ściągać wszystkie stacje
                  .map(el => {
                    return {
                      name: el.$.name,
                      bikes: el.$.bikes,
                      number: el.$.number,
                      time,
                      timestamp
                    }
                  })

                  db.collection(COLLECTION_NAME).add({stations})
                    .then(doc => console.log("Document written with ID: ", doc.id))
                    .catch(err => console.error("Error adding document: ", err))

                  response.end(JSON.stringify({stations}))
              })
            })
            .catch(err => {
              response.end('Erroras: ' + err)
            })
          }

-------------------------------------------------------------------------------------------
322) zeit now - micro i micro-dev (veturilki - mLab)

      Skrypt na now do ściagania ze strony gdzieturilo.com
      Od tego powyżej różni się tylko tym, że zamiast na Firestora, wrzuca dane na mLaba

      Wrzuć go odpalając komendę: now

      By potestować go lokalnie, zakomentuj linię 'module.exports', odkomentuj poniższą
      i odpal funkcję w nodzie

        ----------- app.js ----------------------------------------------

          const axios = require('axios')
          const parseString = require('xml2js').parseString

          const COLLECTION_NAME = 'wioturillo'
          const STATIONS_LIST = 'wioturillo-lista'
          const urlGdzieturilo = 'http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL'
          const urlWioturillo = `https://api.mlab.com/api/1/databases/${COLLECTION_NAME}/collections/${COLLECTION_NAME}?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI`
          const urlWioturilloLista = `https://api.mlab.com/api/1/databases/${COLLECTION_NAME}/collections/${STATIONS_LIST}?apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI&u=true`

          module.exports = async (request, response) => {
          // const wetu = async (request, response) => {
            await axios.get(urlGdzieturilo)
              .then(res => {
                parseString(res.data, (err, result) => {
                  if (err) console.log('Erorek: ', err)

                  const now = new Date()
                  const timestamp = now.getTime()
                  let time = now.toLocaleString("pl-PL", { timeZone: "Europe/Warsaw" })
                  time = new Date(time).toLocaleString()
                  const hour = now.getHours() + 1
                  const minute = now.getMinutes()

                  console.log('Time: ', time)
                  console.log('Hour: ', hour)
                  console.log('Minute: ', minute)

                  const city = result.markers.country[0].city[0].place

                  let stations = city
                    // .filter (el => el.$.name === 'Wałbrzyska - Wróbla' || el.$.name === 'Metro Służew' || el.$.name === 'Miodowa')  // zakomentuj tą linię, by ściągać wszystkie stacje
                    .map(el => {
                      return {
                        name: el.$.name,
                        bikes: el.$.bikes,
                        number: el.$.number,
                        time,
                        timestamp
                      }
                    })

                  const list = city.map(el => el.$.name).sort()

                  axios.post(urlWioturillo, stations)
                    .then(res => console.log(stations))
                    .catch(err => console.log('Błąd zapisu stacji na mLabie :( : ', err))

                  // if(hour === 23 && minute < 59) {
                    axios.put(urlWioturilloLista, { time, list })
                      .then(res => console.log(list))
                      .catch(err => console.log('Błąd zapisu listy stacji na mLabie :( : ', err))
                  // }

                  response.end('Zapisałem stacje i listę stacji na mLabie :)')
                  // console.log('Zapisałem stacje i listę stacji na mLabie :)')
                })
              })
              .catch(err => {
                response.end('Erroras: ' + err)
                // console.log('Erroras: ' + err)
              })
          }

          // wetu()



-------------------------------------------------------------------------------------------
322) zeit now - hello weird

      https://github.com/zeit/now-examples

      a) now-desktop-Setup-4.0.16.exe @ 7 luty
         Odpowiada wersji 13.1.3 wersji githubowej now (zbieżność dat)
         Nowsze nie działają

      b) now help

      100 GB of hosting
      1,000 wywołań funkcji / dzień
      1,000 builds / m-c
      100 GB of bandwidth / m-c

      A “cold start” occurs when a lambda hasn’t been invoked for a while, causing it to take longer to respond to a request.
      When the same lambda is used to respond to multiple endpoints, it will statistically get invoked more often.
      Zeit Now caches lambdas for up to 15 minutes.

      To help keep cold boot times low, the maximum output bundle size for a Node.js Server lambda is, by default, 15mb.
      This limit is extendable up to 50mb.

      duiagnostyka:
        now --force --debug

    a) static page

        i) stwórz plik now.json:
            {
              "version": 2,
              "name": "html",
            }

        ii) zrób index.html
          <html> <h2>Pendacy</h2> </html>

        iii) odpal: now

        Pod wyświetloną linką będzie ww plik

    b) node app

        Jeśli w katalogu jest plik .html i plik .js, zeit odpali plik.html
        Aby odpalił plik .js, trzeba mu o tym powiedzieć, dodając linię 'builds', do now.json

        i) stwórz plik now.json:
            {
              "version": 2,
              "name": "testapka",
              "builds": [{ "src": "index.js", "use": "@now/node" }]
            }

        ii) zrób index.js

              module.exports = (req, res) => {
                res.end('Hi!')
              }

        iii) odpal: now

        Pod wyświetloną linką będzie 'Hi!'

    c) express app

        ---------- index.js --------------------------------

          const express = require('express')
          const app = express()

          app.use(express.static('public'))
          app.use(express.json())  // użyj obu, jeśli nie wiadomo w jakiej formie przyjdą dane
          app.use(express.urlencoded({ extended: true }))

          app.get('/', (req, res) => { res.send('Helo weird !') })
          app.get('/a', (req, res) => { res.json({ name: 'drzon' }) })

          app.listen(8080, () => console.log('Server on port 8080'))

        ---------- now.json --------------------------------

          {
            "version": 2,
            "name": "api",
            "builds": [
              { "src": "*.js", "use": "@now/node-server" }
            ],
            "routes": [
              { "src": "/about", "dest": "about.js" },
              { "src": "/(.*)", "dest": "index.js" }
            ]
          }

        ---------- package.json --------------------------------

          {
            "name": "zeit",
            "version": "1.0.0",
            "main": "index.js",
            "license": "MIT",
            "scripts": {
              "start": "node main.js"
            },
            "dependencies": {
              "express": "4.16.4"
            }
          }

___________________________________________________________________________________________
323) zeit now - jako proxy by nie ujawnić klucza api

    a) sciągnij, zainstaluj i odpal windowsową instalke ze strony:
         zeit.co/download

    b) mkdir nowyProjekt && cd nowyProjekt

    c) yarn init  -y

    d) dodaj do package json:

         "scripts": {
           "start": "node index.js"
         }

       albo przeklej do niego całą treść z umieszczonej poniżej

    e) yarn add request express

    f) touch index.js

    g) wklej doń poniższe

    h) znajdź w treju białą  ( niemal niewidoczną ikonke now ) i ustaw by sie wyswietlała zawsze

    i) klik ją > Deployment > wskaż katalog > OK

    j) po chwili otworzy sie chrom z daszburkiem now'a, a po ok 1.5 minucie strona z endpointem

    g) darmowe konto pozwala na 3 jednoczesne instancje, by skaswać nadmiarowe,
            now > Deployments > instancja > Delete > OK

     h) zeit.co/dashboard
            klik w linke z nazwą instancji przenosi do daszburka instancji  ( logi, pliki źródłowe )

     i) narpief odpal lokalnie przez:
            node index.js
         i obejrzyj w chromie na:
            localhost

 -  -  -  -  -  -  -  -  -  index.js -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    const express = require('express')
    const axios = require ('axios')
    const url = 'http://jsonplaceholder.typicode.com/users/1'
    //const url = 'https://maps.googleapis.com/maps/api/distancematrix/json?origins=Zegrze%20Poludniowe&destinations=Nieporet,Dworcowa&mode=driving&departure_time=now&key=AIzaSyA3fsqWy6oYi584K9_fh3Zv8YFza-gwYHI'
    const app = express()

    app.use(express.json())

    app.listen (8080, () => console.log('Server on 8080..'))

    app.get('/', (req, res) => {
      axios.get(url)
        .then(response => {
          console.log(response.data)
          res.send(response.data)
        })
        .catch(err => console.log(err))
    })

 -  -  -  -  -  -  -  -  -  package.json -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

    {
      "name": "zeit1",
      "scripts": {
        "start": "node index.js"
      },
      "dependencies": {
        "express": "4.16.4",
        "axios": "0.18.0"
      }
    }

___________________________________________________________________________________________
324) zeit now - serwer proxy (by ukryć api key)

    Odpalony lokalnie serwer proxy działa
    Niestety, mimo iluś kombinacji nagłówków i jsonp, chrome non-stop zgłaszał błąd CORS

    --------- index.js ---------------------------------

    const express = require('express')
    const axios = require ('axios')
    const urlPrefix = 'https://api.mlab.com/api/1/databases/tvui/collections/tvui1?s={timestamp:1}&q='
    const key = '&apiKey=XRr-4BkluC11FFgtbOnUhzUlodvp8RfI'

    const app = express()
    app.use(function(req, res, next) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
      res.header("Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS")
      next()
    })
    app.use(express.json())
    app.use(express.urlencoded({ extended: true }))
    app.listen (3000, () => console.log('Server on 3000..'))


    app.get('/:id', (req, res) => {
      console.log('\n****** GET *************\n')
      console.log('req.params = ' + JSON.stringify(req.params))

      const url = urlPrefix + req.params.id + key
      console.log('\n\nurl = ' + url + '\n\n')

      axios.get(url)
      .then(response => {
        console.log(response.data)
        res.send(response.data)
      })
      .catch(err => console.log(err))
    })

    ------- package.json ----------------------------

    {
      "name": "zeit",
      "version": "1.0.0",
      "main": "index.js",
      "license": "MIT",
      "scripts": {
        "start": "node index.js"
      },
      "dependencies": {
        "axios": "0.18.0",
        "express": "4.16.4"
      }
    }

    ------- now.json ----------------------------

    {
      "version": 2,
      "name": "mail",
      "builds": [
        { "src": "index.js", "use": "@now/node-server" }
      ],
      "routes": [{ "src": "/(.*)", "dest": "index.js"}]
    }

    /*
      Może pomogłoby to:
        https://github.com/zeit/now-cli/issues/1431

        {
          "static": {
            "headers": [
              {
                "source": "**",
                "headers": [
                  {
                    "key": "Access-Control-Allow-Origin",
                    "value": "*"
                  }
                ]
              }
            ]
          }
        }
    */

    ------- ajaxHelpers.js (kawałek) ----------------------------

    query = {timestamp:{$gte:1550219400000},$and:[{timestamp:{$lte:1550228400000}},{$and:[{channel:{$in:["TVP 2"]}}]}]}

    const urlString = 'http://localhost:3000/' + JSON.stringify(query)

    console.log('%c urlString =  ' + urlString, 'color: lime')

-------------------------------------------------------------------------------------------
325) zeit-now - deplojka apki vue

        zeit.co

        a) modyfikuje plik now.json nową nazwą projektu:

             {
               "name": "ShopsRing",
               "version": 2,
               "files": [
                 "./dist"
               ]
             }

        b) yarn build
             (standardowa linijka w package.json'ie (Vue-CLI 3.0):
               "build": "vue-cli-service build",

        c) cd /dist

        d) now

        Po chwili now zwraca linkę do apki

___________________________________________________________________________________________
326) zeit now - headery serwera

      https://spectrum.chat/zeit/now/now-next-cache-control~f0184cf9-d3f4-42ae-8843-997ca5805f51

      Found an answer on a now-example repo:

      I added headers in the routes key of my now.json:

        "routes": [
          {
            "src": "/static/(.*)",
            "dest": "/static/$1",
            "headers": { "cache-control": "s-maxage=86400" }
          },
          {
            "src": "/(.*)",
            "dest": "/$1",
            "headers": { "cache-control": "s-maxage=86400" }
          }
        ]

        ---------------------------------------------------------

        {
          "static": {
            "headers": [
              {
                "source": "**",
                "headers": [
                  {
                    "key": "Access-Control-Allow-Origin",
                    "value": "*"
                  }
                ]
              }
            ]
          }
        }

        ---------------------------------------------------------

        {
          "type": "static",
          "static": {
            "headers": [
              {
                "source": "**/*.@(jpg|jpeg|gif|png)",
                "headers": [{
                  "key": "Cache-Control",
                  "value": "max-age=7200"
                }]
              }, {
                "source": "404.html",
                "headers": [{
                  "key": "Cache-Control",
                  "value": "public,max-age=31536000,immutable"
                }]
              }
            ]
          }
        }
___________________________________________________________________________________________
330) sendgrid - lokalnie

      free: 40,000 emails for 30 days, then 100/day, forever
      Rejestracja bez karty kredytowej, html w treści mejli

      yarn add @sendgrid/mail

      W apce produkcyjnej API key powinien być wbity w shellu jako zmienna środowiskowa,
      a nie zaszyty w kodzie apki

      API key:
        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

      Run from shell:
        echo "export SENDGRID_API_KEY='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'" > sendgrid.env
        echo "sendgrid.env" >> .gitignore
        source ./sendgrid.env

      ----------  index.js  ---------------------------------------------------

      const sgMail = require('@sendgrid/mail')

      sgMail.setApiKey(process.env.SENDGRID_API_KEY)
      // sgMail.setApiKey('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')

      const msg = {
        to: 'test@example.com',
        from: 'test@example.com',
        subject: 'Sending with SendGrid is Fun',
        text: 'and easy to do anywhere, even with Node.js',
        html: '<strong>and easy to do anywhere, even with Node.js</strong>',
      }

      sgMail.send(msg)

___________________________________________________________________________________________
331) sendgrid - webtask

      a) nagnieć ikonę klucza > NPM modules > @sendgrid/mail@6.3.
         UWAGA ! do okienka 'NPM modules', wklej dokładnie '@sendgrid/mail'

      b) nagnieć Save, potem Run

      c) sprawdź czy mail doszedł

    -------------------------------------------------------

    const sgMail = require('@sendgrid/mail')

    sgMail.setApiKey('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')

    const msg = (to, subject, html) => {
      return {
        to,
        from: 'tvui@example.com',
        subject,
        text: '_',
        html
      }
    }

    module.exports = (context, cb) => {
      console.log(context.query.to)
      console.log(context.query.subject)
      console.log(context.queryhtml)

      cb(null, sgMail.send(msg(context.query.to, context.query.subject, context.query.html)))
    }

    ---------- Navi.vue (kawałek) --------------------------------------------

      methods: {
        onEmail() {
          email = this.$store.getters.getEmail
          favorites = this.$store.getters.getFavorites
          if (!favorites) return alert('Brak wybranych programów')
          if (!email) return this.$refs.modalEmail.show()

          console.log('%c Mail jest idę do sendEmail = ', 'color: white')
          sendEmail(email, favorites)
        },
        clearEmail() {
          this.email = ''
        },
        handleOk(evt) {
          evt.preventDefault()
          if (!this.email) {
            alert('Proszę podaj swój email')
          }
          else {
            this.handleSubmit()
          }
        },
        handleSubmit() {
          this.$store.dispatch('setEmail', this.email)
          sendEmail(this.email, favorites)
          this.clearEmail()
          this.$refs.modalEmail.hide()
          console.log('%c Mail teraz już jest, idę do sendMail; this.email = ' + this.email, 'color: white')
        }
      }

    ---------- Navi.html (kawałek) --------------------------------------------

      <b-modal id="modalEmail"
                ref="modalEmail"
                title="Podaj swój email, proszę"
                @ok="handleOk"
                @shown="clearEmail">

        <form @submit.stop.prevent="handleSubmit">
          <b-form-input type="text" placeholder="Twój email" v-model="email" />
        </form>

      </b-modal>

    ---------- ajaxHelpers.js (kawałek) --------------------------------------------

      export const sendEmail = (email, favorites) => {
        let html = ''
        const subject = LITERALS.EMAIL_SUBJECT
        const proxy = LITERALS.EMAIL_PROXY

        favorites.map(el => {
          html += '<h4>' + el.dayString + ' ' + el.time + ' ' + el.channel + ' ' + el.title + '</h4>'
        })

        html = 'Wybrane przez Ciebie programy na najbliższy tydzień:' + html
        console.log('%c html = ' + html, 'color: lightblue')

        const mailUrl = proxy + '?to=' + email + '&subject=' + subject + '&html=' + html
        console.log('%c mailUrl = ' + mailUrl, 'color: orange')

        axios.post(mailUrl)
          .then(() => {
            console.log('Mail pchnięty !')
          })
          .catch(err => console.log('Mail dupa: ', err))
      }

    ---------- store.js (kawałek) --------------------------------------------

      function initialState() {
        ..,
        email: ''
      }

      getters: {
         getEmail: state => state.email

      mutations: {

        SET_EMAIL(state, email) {
            console.log('%c 2) SET_EMAIL email = ' + email, 'color: white')
            state.email = email
          }
        },

      actions: {

        setEmail(context, email) {
          console.log('1. Tu setEmail()')
          context.commit('SET_EMAIL', email)
        },

___________________________________________________________________________________________
340) firebase - tips

      a) Tuba: Firebase - Ultimate Beginner's Guide (fireship)

      b) w index.html, firebase-app.js jest obowiązkowy. Wszystkie inne - opcjonalne
           <script defer src="/__/firebase/5.9.3/firebase-app.js"></script>

      c) w boilerplejcie index.html zamień 'database' na 'firestore':
          <script defer src="/__/firebase/5.9.3/firebase-firestore.js"></script>

      d) wykonanie tego kodu (app.js), pokazuje czy FB działa

          document.addEventListener('DOMContentLoaded', event => {
            const app = firebase.app()
            console.log(app)
          })

          dev toolsy powinny wyświetlić: t {firebase_: {…}, }

      e) by móc sortować kolekcję chronologicznie, w firestorze trzeba
         dodać pole z timestampem. Id nie pozwalają sortować chronologicznie

      f) w założeniu, linijka:
          require("firebase/firestore")

          .. powinna z całego pakietu firebase wyciągac tylko firestore'a, by rozmiar pakietu był mały.
          W praktyce, po zainstalowaniu poniższej, maleńkiej apki na now, niezależnie czy z ww linijką
          czy bez, rozmiar był taki sam (5.42 MB).

          Nawet zamieszczona na stronie npm firestora linijki:
            const firebase = require('@firebase/app').default
            require('@firebase/firestore')
          .. zmniejszyły ten rozmiar tylko do 5.02 MB

          Ponieważ na apki nodowe, now ma soft-limit = 5 MB, do now.json trzeba dodać
          propertkę `maxLambdaSize`:

              {
                "version": 2,
                "name": "wetu",
                "builds": [{
                  "src": "index.js",
                  "use": "@now/node",
                  "config": { "maxLambdaSize": "6mb" }
                }]
              }

          Dla porównania, apka tylko z zapytaniem axiosa waży na now 26 kB
          Minified axios = 12 kB, a minified firebase = 800 kB

___________________________________________________________________________________________
341) firebase - instalacja

      firebase.google.com/docs/web/setup?authuser=0

      a) otwórz konsolę webową i stwórz nowy projekt
          console.firebase.google.com > sfir11

      b) yarn global add firebase-tools

      c) firebase login

      d) firebase init > Functions (tylko) > sfir11

      e) odkomentuj plik index.js, by miał:

          const functions = require('firebase-functions')

          exports.helloWorld = functions.https.onRequest((request, response) => {
            response.send("Hello from Fajerbejz!")
          })

      f) firebase serve  // odpala lokalny server na porcie 5000

      g) firebase deploy  // odpala apkę na serwerze FB i daje linkę - nazwaApki.firebaseapp.com

___________________________________________________________________________________________
342) firebase - instalacja: pliki

      Wymagany jest tylko 1-szy, choć bez 3-go się wywala. 2-gi, bo korzystam z firestora

      <script defer src="/__/firebase/5.9.3/firebase-app.js"></script>
      <script defer src="/__/firebase/5.9.3/firebase-firestore.js"></script>
      <script defer src="/__/firebase/init.js"></script>

    --------- firebase.json -------------------------------------

      {
        "hosting": {
          "public": "public",
          "ignore": [
            "firebase.json",
            "**/.*",
            "**/node_modules/**"
          ],
          "rewrites": [
            {
              "source": "**",
              "destination": "/index.html"
            }
          ]
        }
      }

    --------- .firebaserc -------------------------------------

      {
        "projects": {
          "default": "sfir11"
        }
      }

    --------- /public/index.html -------------------------------------

      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Lamia</title>
          <script defer src="/__/firebase/5.9.3/firebase-app.js"></script>
          <script defer src="/__/firebase/5.9.3/firebase-auth.js"></script>
          <script defer src="/__/firebase/5.9.3/firebase-firestore.js"></script>
          <script defer src="/__/firebase/5.9.3/firebase-messaging.js"></script>
          <script defer src="/__/firebase/5.9.3/firebase-storage.js"></script>
          <script defer src="/__/firebase/init.js"></script>
        </head>

        <body>
          <div id="message">
            <h1>Srutu Tutu 2</h1>
            <button onclick="googleLogin()">Google Login</button>
          </div>

          <script src="./app.js"></script>
        </body>
      </html>

    --------- /public/app.js -------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        console.log(app)

        const db = firebase.firestore()
        const myDocument = db.collection('sledz').doc('RvcOTcYIDljC0bKFUxqL')

      function googleLogin() {
        const provider = new firebase.auth.GoogleAuthProvider()

        firebase.auth().signInWithPopup(provider)
          .then(res => {
            const user = res.user
            document.write(`Hello ${user.displayName}`)
            console.log(user)
          })
          .catch(console.log())
      }
___________________________________________________________________________________________
343) firebase - authentication

      Tuba: Firebase - Ultimate Beginner's Guide (fireship) @4:40

    a) otwórz konsolę webową i stwórz nowy projekt
        console.firebase.google.com > sfir11

    b) menu Programowanie > Authentication > Metoda logowania > Google > Włącz > Zapisz

    c) wbij poniższe i nagnieć batona. Ukaże się okno oAuth2

    d) w panelu admina, tab Użytkownicy znajdziesz zalogowaną duszę
        https://console.firebase.google.com/project/sfir11/authentication/users

    e) przez Settings (3 kropki) możesz ją zawiesić, wyrzucić, lub zresetować jej hasło

    f) aby Chrome zapomniał, że jesteśmy zalogowani > Application > Cookies > Clear

    -------- /public/index.html ---------------------------------------

        <body>
          <div id="message">
            <h1>Srutu Tutu 3</h1>
            <button onclick="googleLogin()">Google Login</button>
          </div>

          <script src="./app.js"></script>
        </body>

    -------- /public/app.js --------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        console.log(app)
      })

      function googleLogin() {
        console.log('Tu googleLogin 2')

        const provider = new firebase.auth.GoogleAuthProvider()

        firebase.auth().signInWithPopup(provider)
          .then(res => {
            const user = res.user
            document.write(`Hello ${user.displayName}`)
            console.log(user)
          })
          .catch(console.log())
      }

___________________________________________________________________________________________
344) firebase - firestore: get

      Jednorazowe odczytanie zawartości dokumentu lub kolekcji

    ------- app.js single doc -------------------------------------------

    document.addEventListener('DOMContentLoaded', event => {
      const db = firebase.firestore()
      const myDocument = db.collection('sledz').doc('RvcOTcYIDljC0bKFUxqL')

      myDocument.get()
        .then(doc => {
          const data = doc.data()
          document.write('title: ' + data.title + '<br>')
          document.write('content: ' + data.content + '<br>')
        })
        .catch(er => { document.write('erroras ' + error)})
    })

    ------- app.js collection -------------------------------------------

    const collection = await firebase.firestore().collection('ziutki').get()
    collection.docs.map(doc => console.log(doc.data()))

___________________________________________________________________________________________
345) firebase - firestore: where, orderBy i limit


    --------- index.js --------------------------------------------

      const collection = async () => {
        const collection = await firebase.firestore().collection('ziutki')
        const query = collection.where('age', '>', 11 ).orderBy('age', 'desc').limit(2)

        const result = await query.get()
        const final = result.docs.map(doc => doc.data())

        console.log(final.map(el => {
          return {
            name: el.name,
            age: el.age
          }
        }))
      }

      collection()
___________________________________________________________________________________________
346) firebase - firestore: onSnapshot

      Reaktywne odczytanie zawartości dokumentu
      tzn, po jego zmianie na serwerze, nowa wartość ukaże się na ekranie

      a) otwórz console.firebase.google.com i klik na nazwę projektu
      b) stwórz dowolny dokument (json)
      c) firebase deploy
      d) chrome sfir11.firebaseapp.com
      e) zmień wartość propertki 'title' i zauważ jak sekundę potem wyświetla się w chromie

    ------- app.js -------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        console.log(app)

        const db = firebase.firestore()
        const myDocument = db.collection('sledz').doc('RvcOTcYIDljC0bKFUxqL')

        myDocument.onSnapshot(doc => {
          const data = doc.data()
          document.write('title: ' + data.title + '<br>')
          document.write('content: ' + data.content + '<br>')
        })

      })

___________________________________________________________________________________________
347) firebase - firestore: update

      Komenda ta modyfikuje daną w bazie

    -------- index.html ----------------------------------

      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Fbase1</title>
          <script defer src="/__/firebase/5.9.3/firebase-app.js"></script>
          <script defer src="/__/firebase/5.9.3/firebase-firestore.js"></script>
          <script defer src="/__/firebase/init.js"></script>
        </head>

        <body>

          <h1>Srutu Tutu 3</h1>
          <script src="./app.js"></script>

          <input onchange="updatePost(event)">
          <h2 id="results"></h2>

        </body>
      </html>

    -------- app.js ---------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        console.log(app)

        const db = firebase.firestore()
        const frankDocRef = db.collection("users").doc("frank");

        frankDocRef.set({
          name: "Frank",
          favorites: { food: "Pizza", color: "Blue", subject: "recess" },
          age: 12
        })

        myDocument.onSnapshot(doc => {
          const data = doc.data()
          document.getElementById('results').innerText = data.title
        })
      })

      function updatePost(e) {
        const db = firebase.firestore()
        const myDocument = db.collection("users").doc("frank")
        myDocument.update({ title: e.target.value })
      }

___________________________________________________________________________________________
348) firebase - firestore: set

      https://firebase.google.com/docs/firestore/manage-data/add-data?authuser=0

      Dodawanie dokumentu do kolekcji, określając jego id
      Dokument będzie dodany, a jeśli istnieje - nadpisany
      Chyba, że określisz że ma być zmergowany

      ------- app.js ------------------------------------------------------

      const capital = { name: "Las Vegasss", state: "CA", country: "USA" }

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()

        db.collection("cities").doc("LA").set(capital)
          .then(function() {
            console.log("Document successfully written!")
          })
          .catch(function(error) {
            console.error("Error writing document: ", error)
          })
      })

      ------- app.js set + merge ------------------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()
        const cityRef = db.collection('cities').doc('LA');

        const setWithMerge = cityRef.set({
          capital: true
        }, { merge: true });
      })

___________________________________________________________________________________________
349) firebase - firestore: doc

    In some cases, it can be useful to create a document reference with an auto-generated ID, then use the reference later

    .add(...) = .doc()  +  .set(...)


      -------- app.js ---------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()

        var newCityRef = db.collection("cities").doc()

        const kicha = { kicha: 'zdzicha'}
        newCityRef.set(kicha)
      })

___________________________________________________________________________________________
350) firebase - firestore: add

      Dodawanie dokumentu do kolekcji, nie określając jego id (będzie wygenerowane automatyczne)

      .add(...) = .doc()  +  .set(...)

      ------- app.js ------------------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()

        db.collection("miasta").add({
          name: "Tokyo",
          country: "JapanX"
        })
        .then(function(docRef) {
          console.log("Document written with ID: ", docRef.id)
        })
        .catch(function(error) {
          console.error("Error adding document: ", error)
        })
      })

___________________________________________________________________________________________
351) firebase - firestore: typy danych

      https://firebase.google.com/docs/firestore/manage-data/add-data?authuser=0

      Liczby są zawsze zapamiętywane jako doubles

      ------- app.js ------------------------------------------------------

      const capital = { name: "Las Vegasss", state: "CA", country: "USA" }

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()
        // const myDocument = db.collection('sledz').doc('RvcOTcYIDljC0bKFUxqL')

        var docData = {
          stringExample: "Hello world!",
          booleanExample: true,
          numberExample: 3.14159265,
          dateExample: firebase.firestore.Timestamp.fromDate(new Date("December 10, 1815")),
          arrayExample: [5, true, "hello"],
          nullExample: null,
          objectExample: {
              a: 5,
              b: {
                  nested: "foo"
              }
          }
        }

        db.collection("data").doc("one").set(docData).then(function() {
            console.log("Document successfully written!")
        })
      })

___________________________________________________________________________________________
352) firebase - firestore: custom objects

      Jeśli kolekcja nie istnieje, to jest tworzona
        db.collection("jasiu") ...

      -------- app.js ---------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()

        db.collection("jasiu").doc("one").set({foo:'bar'});
      })

___________________________________________________________________________________________
353) firebase - firestore: timestamp

      Nadawanie lub uaktualnianie timestampa

      -------- app.js ---------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()

        const franek = db.collection("users").doc("frank");


        var updateTimestamp = franek.update({
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        });
      })

___________________________________________________________________________________________
354) firebase - firestore: arrayUnion i arrayRemove

      Dodawanie i usuwanie elementów tablicy

      -------- app.js ---------------------------------------------

      document.addEventListener('DOMContentLoaded', event => {
        const app = firebase.app()
        const db = firebase.firestore()

        const kolory = db.collection("kolory").doc("nowe")
        kolory.set({ fajne: ['red', 'green', 'blue'] })

        // Atomically add a new region to the "regions" array field.
        kolory.update({
          fajne: firebase.firestore.FieldValue.arrayUnion("BLAAACK")
        })

        // Atomically remove a region from the "regions" array field.
        kolory.update({
          fajne: firebase.firestore.FieldValue.arrayRemove("blue")
        })
      })

___________________________________________________________________________________________
355) firebase - firestore: increment numeric value

      Inkrementacja wybranego pola o zadaną liczbę

      -------- app.js ---------------------------------------------

        document.addEventListener('DOMContentLoaded', event => {
          const app = firebase.app()
          const db = firebase.firestore()

          const kolory = db.collection("sledz").doc("RvcOTcYIDljC0bKFUxqL")

          kolory.update({
            numer: firebase.firestore.FieldValue.increment(1)
          })
        })

___________________________________________________________________________________________
356) firebase - firestore: admin (node app)

      a) yarn add firestore firestore-admin
      b) stwórz projekt w konsoli FB

      c) w konsoli > klik w zębatkę koło 'Project overview' > Ustawienia > Konta usługi >
                   > Node > Generowanie nowego klucza > przysłany plik json nazwij 'key.json'
                   i wklej do katalogu projektu

      d) wbij poniższe
      e) odpal node index.js

      f) jeśli wywali błąd: 'grpc is not a valid Win32 application', zrekompiluj ten pakiet:
           npm rebuild --update-binary=grpc

      g) otwórz projekt w konsoli i zobacz czy jest 'hans'

    ------ index.js -----------------------------------

      const admin = require('firebase-admin')
      const serviceAccount = require('./key.json')

      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        databaseURL: "https://firestoras.firebaseio.com"
      })

      const db = admin.firestore()

      db.collection('users')
        .doc('HkiEwxg4SWcBWuVPkZx5')
        .set({ name: 'hans1'})
        .then(() => {
          console.log('Zapisano w bazie')
        })
        .catch(err => {
          console.log('Erroras: ' + err)
          process.exit()
        })

___________________________________________________________________________________________
357) firebase - firestore (node app - wioturilki)

      Apka ściagająca co 5 minut dane o ilości rowerów na każdej stacji w Wwie z gdzieturilo.pl
        a) co 5 minut, cron task (ze strony cron-jobs.org) odpala request do strony gdzie odpalony jest skrypt 'zapisz.js' (now)
        b) skrypt zapisz.js ściąga dane ze strony gdzieturilo i wysyła je do firestora (kolekcja 'wioturilki')
        c) apka vue ściąga kolekcję 'wioturilki' z firestora i wyświetla ją w gridzie (vuetify)

      Poniżej, prócz skryptu 'zapisz.js' jest jeszcze skrypt 'czytaj.js' - pokazujący, jak vue czyta z firestora

      -------- zapisz.js -------------------------------------------------

      const axios = require('axios')
      const parseString = require('xml2js').parseString
      const firebase = require("firebase")
      require("firebase/firestore")

      const COLLECTION_NAME = 'wioturilki'
      const STATIONS_LIST = 'wioturilki-list'
      const url = 'http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL'
      const config = { apiKey: "AIzaSyBdFBbhzU2XI4Ce-HjIsyeosWaifFmR2kc", projectId: "firestoras" }

      firebase.initializeApp(config)
      const app = firebase.app()
      const db = firebase.firestore()

      module.exports = async (request, response) => {
        await axios.get(url)
        .then(res => {
          parseString(res.data, (err, result) => {
            if (err) console.log('Erorek: ', err)

            const now = new Date()
            const timestamp = now.getTime()
            let time = now.toLocaleString("pl-PL", { timeZone: "Europe/Warsaw" })
            time = new Date(time).toLocaleString()
            const hour = now.getHours() + 1
            const minute = now.getMinutes()

            const city = result.markers.country[0].city[0].place

            let stations = city
              .filter (el => el.$.name === 'Wałbrzyska - Wróbla' || el.$.name === 'Metro Służew')  // zakomentuj tą linię, by ściągać wszystkie stacje
              .map(el => {
                return {
                  name: el.$.name,
                  bikes: el.$.bikes,
                  number: el.$.number,
                  time,
                  timestamp
                }
              })

            let list = city.map(el => el.$.name).sort()
            console.log(list)

            console.log('Time: ', time)
            console.log('Hour: ', hour)
            console.log('Minute: ', minute)

            db.collection(COLLECTION_NAME).add({stations})
              .then(el => console.log("Document written with ID: ", el.id))
              .catch(err => console.error("Error adding document: ", err))

            if(hour === 20 && minute > 40) {
              db.collection(STATIONS_LIST).doc('stationsList').set({list})
                .then(el => console.log('stationList written'))
                .catch(err => console.error('Error adding stationList'))

              console.log('Zapisałem listę nazw stacji na Fajerku = ', list.length)
              response.end('Zapisałem listę nazw stacji na Fajerku')
            }

            console.log('Zapisałem stacje na Fajerku = ', stations.length)
            response.end('Zapisałem stacje na Fajerku')
          })
        })
        .catch(err => {
          response.end('Erroras: ' + err)
        })
      }



      -------- czytaj.js -------------------------------------------------

      const firebase = require("firebase")
      require("firebase/firestore")

      const url = 'http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL'
      const config = { apiKey: "AIzaSyBdFBbhzU2XI4Ce-HjIsyeosWaifFmR2kc", projectId: "firestoras" }

      firebase.initializeApp(config)
      const db = firebase.firestore()

      const collection = async () => {
        const collection = await firebase.firestore().collection('ziutki')
        const query = collection.where('age', '>', 11 ).orderBy('age', 'desc').limit(2)

        const result = await query.get()
        const final = result.docs.map(doc => doc.data())

        console.log(final.map(el => {
          return {
            name: el.name,
            age: el.age
          }
        }))
      }

      collection()


___________________________________________________________________________________________
370) firebase - functions: tips

      UWAGA !
        firebase projects on the Spark plan can make only outbound requests to Google APIs.
        Requests to third-party APIs fail with an error

      a) firebase.google.com/docs/functions/http-events?authuser=0

      b) kończ funkcje pawidłowo, tzn przez:
          res.redirect(), res.send() lub res.end()
___________________________________________________________________________________________
371) opencagedata - free geocoding api

      https://opencagedata.com/api

      api key: 224e8e01cf8f43a0aabb1b68341904a1

      Forward geocoding
        https://api.opencagedata.com/geocode/v1/json?q=PLACENAME&key=YOUR-API-KEY

      Reverse geocoding
        https://api.opencagedata.com/geocode/v1/json?q=LAT+LNG&key=YOUR-API-KEY
___________________________________________________________________________________________











github   nabu1  / hodonozor1

github   nabu1312@gmail.com  / Kupsztal13 / kupasiku1

github   maciek.kand@gmail.com  / Kupsztal13


git remote add origin https://github.com/nabu1/git1.git
git remote add origin https://github.com/maciekkand/tvui.git
git remote add mk https://github.com/maciekkand/tvui.git

git clone https://github.com/nabu1/tvui.git

___________________________________________________________________________________________

git reset --soft           #hash

git remote remove mk

git remote -v  // pusto

git remote add origin https://github.com/nabu1/git1.git

git pull origin master

maciekkand@gmail.com = kupasiku1
nabu1312@gmail.com = kupasiku1
nabu1 = hodonozor1


___________________________________________________________________________________________
git clone https://github.com/nabu1/tvui.git
cd tvui

git rest --hard   hasz
git rebase -i HEAD~liczba (fixupy)

git remote remove origin
git remote add origin https://github.com/maciekkand/tvui.git
git config --global user.mail maciek.kand@gmail.com
git config --global user.name maciekkand

git push -u origin master


git remote add origin https://github.com/nabu1/skillbill.git

___________________________________________________________________________________________
mongoimport -h ds349065.mlab.com:49065 -d skillbill -c skillbill -u nabu -p kupa1312 --file skillBill9.json --jsonArray
mongoimport -h ds163054.mlab.com:63054 -d tvui -c tvui1 -u nabu -p kupa1312 --file 1.json --jsonArray
___________________________________________________________________________________________

mongoimport -h ds127376.mlab.com:27376 -d wioturillo -c wioturillo -u nabu -p kupa1312 --file jakis.json --jsonArray


___________________________________________________________________________________________

https://github.com/ytdl-org/youtube-dl/issues/4821

ffmpeg -ss 3:59:10 -i $(youtube-dl -f 22 -g 'https://www.youtube.com/watch?v=mMZriSvaVP8') -t 3:06:00


download-clip() {
    # $1: url or Youtube video id
    # $2: starting time, in seconds, or in hh:mm:ss[.xxx] form
    # $3: duration, in seconds, or in hh:mm:ss[.xxx] form
    # $4: format, as accepted by youtube-dl (default: best)
    # other args are passed directly to youtube-dl; eg, -r 40K
    local fmt=${4:-best}
    local url="$(youtube-dl -g -f $fmt ${@:5} "$1")"
    local filename="$(youtube-dl --get-filename -f $fmt ${@:5} "$1")"
    ffmpeg -loglevel warning -hide_banner -stats \
        -ss $2 -i "$url" -c copy -t $3 "$filename"
    printf "Saved to: %s\n" "$filename"
    # based on Reino17's and teocci's comments in https://github.com/rg3/youtube-dl/issues/4821
}

-----------------------------------------------------------------------------------------------

local fmt=4
local url="$(youtube-dl -g -f $fmt ${@:5} "https://www.youtube.com/watch?v=7RfteeSQZxo")"
local filename="$(youtube-dl --get-filename -f $fmt ${@:5} "$1")"
ffmpeg -loglevel warning -hide_banner -stats \
    -ss $4080 -i "$url" -c copy -t $375 "vue2leaflet.mp4"
printf "Saved to: %s\n" "$filename"

-----------------------------------------------------------------------------------------------


c:/ffmpeg -ss 1:08:00 -i $(c:/youtube-dl -f 22 -g 'https://www.youtube.com/watch?v=7RfteeSQZxo') -t 1:14:20

c:/ffmpeg -ss 1:08:00 -i $(c:/youtube-dl -f 22 -g 'https://www.youtube.com/watch?v=7RfteeSQZxo') -t 375
---------------------------------------------------------------------------------

c:/ffmpeg -ss 08:05 -i $(c:/youtube-dl -f 22 -g 'https://www.youtube.com/watch?v=clMcCwFZ7lQ')

c:/ffmpeg -ss 08:05 -i $(c:/youtube-dl -f 22 -g 'https://www.youtube.com/watch?v=clMcCwFZ7lQ&t=419s')


c:/ffmpeg -ss 01:50:00 -i $(c:/youtube-dl -f 22 -g 'https://www.youtube.com/watch?v=4deVCNJq3qc&list=PLWKjhJtqVAbkE0Or3HVMRTy-mq_wFUNVv')

---------------------------------------------------------------------------------


https://api.opencagedata.com/geocode/v1/json?q=52.1700885+21.033294299999998&key=224e8e01cf8f43a0aabb1b68341904a1
https://api.opencagedata.com/geocode/v1/json?q=52.1700885+21.033294299999998&key=224e8e01cf8f43a0aabb1b68341904a1



224e8e01cf8f43a0aabb1b68341904a1
52.1700885
21.033294299999998
