000) tips
001) hello world (CLI 3)
002) v-text aka {{ }}
003) v-bind aka : - 1-way-binding
004) v-once
005) v-html

006a) v-on aka @
006b) Event Modifiers
006c) Key Modifiers

007) @onmousemove
008) @click z argumentem
009) event stopPropagation
010)  @keyup, @keypress
011)  templates
012a) v-model
012b) nested component
013)  computed properties
014)  watch
015) :class
016) :class i computed
017) v-if i v-else
018) v-show
019) v-for
020) v-for nested

021) apka ToDo List
022) Dostęp do apki z innej apki i z zewnątrz
023) $ref
024) $mount i template
025) lifecycle
026) Komponent - zagnieżdżanie lokalne

027) props - 1
028) props - walidacja
029) props - 2
030) przekazanie funkcji
031) custom event ($emit i $event)
032) eventBus ($emit i $on)

033) slot
034) named slots
035) default slots
036 dynamic component
037) keep-alive
038) component hooks: activated, deactivated

039) input box: v-model.lazy.number
040) textarea v-model, multiline
041) checkbox
042) radio
043) select

044) custom directive - global
045) custom directive - z propertką
046) custom directive - z propertką i parametrem
047) custom directive - z propertką, parametrem i modyfikatorem

048) custom directive with modifier - global
049) custom directive - local 1
050) custom directive - local 2
051) custom directive with objects -  local

054) filter - local
055) filter - global
056) filter via computed property

058) mixin
059) mixin - lifecycles
060) mixin - global

063) routing - hello world
064) routing - links
065) routing - navigating
066) routing - z parametrem
067) routing - watch route
068) routing - named routes
069) routing - query parameters
070) routing - named router views
071) routing - redirect
072) routing - catchAll
073) routing - kontrola dostępu: beforeEach, beforeEnter i beforeRouteEnter
074) routing - kontrola wyjścia: beforeRouteLeave
075) routing - lazy loading loading

080) vuex - hello world 1 (props)
081) vuex - hello world 2 (vuex)
082) vuex - getters
083) vuex - mapGetters
084) vuex - mutations
085) vuex - actions
086) vuex - async actions
087) vuex - action with payload
088) vuex - modularyzacja
089) vuex - moduły
090) vuex - moduł z podziałem na pliki
091) vuex - Two-Way-Binding v-model and Vuex
092) vuex - ajax
093) vuex - persistedstate
094) vuex - wydzielenie ajaksów ze store'a do pliku zewn
095) vuex - wydzielenie templatki do pliku zewn (CLI 3)
096) vuex - mapState

097) bootstrap-vue - tips
098) bootstrap-vue - hello world
099) bootstrap-vue - import wybranych kawałków biblioteki
100) bootstrap-vue - szerokości kolumn, marginesy i paddingi
101) bootstrap-vue - layout and grid: container
102) bootstrap-vue - layout and grid: row i column
103) bootstrap-vue - layout and grid: offset
104) bootstrap-vue - responsive classes (mobile stacking)
105) bootstrap-vue - align: vertical
106) bootstrap-vue - align: horizontal

107) bootstrap-vue - button
108) bootstrap-vue - alert
109) bootstrap-vue - form 1
110) bootstrap-vue - form 2
111) bootstrap-vue - login form (flex)
112) bootstrap-vue - modal
113) bootstrap-vue - tooltip
114) bootstrap-vue - table
115) bootstrap-vue - navbar
116) bootstrap-vue - card
117) bootstrap-vue - dropdown
118) bootstrap-vue - dropup
119) bootstrap-vue - toggle collapse
120) bootstrap-vue - select
121) bootstrap-vue - textarea
122) bootstrap-vue - input
123) bootstrap-vue - radio
124) bootstrap-vue - table i checkboksy (tvui)

130) puppeteer - hello world
131) puppeteer i jest - hello world
132) puppeteer i jest - page.emulate
133) puppeteer i jest - 2 testy w 1
134) puppeteer i jest - navbar
135) puppeteer i jest - tagi data-id
136) puppeteer i jest - login form

190) eslint - tips
191) eslint - konfiguracja
192) eslint - obsługa
193) esLint i prettier

200) nuxt tips
201) nuxt tips - hello weird
202) nuxt - async (axios)
203) nuxt - asyncData
204) nuxt - $axios
205) nuxt - helper

230) vuetify - tips
231) vuetify - instalacja
232) vuetify - grid system
233) vuetify - sizes, margins and paddings
234) vuetify - align, offsety, grow i shrink (flex)
235) vuetify - import tylko wybranych komponentów
236) vuetify - batony
237) vuetify - kolory
238) vuetify - fonty
239) vuetify - modularyzacja
240) vuetify - select
241) vuetify - form

275) leaflet

279) deplojka - pre
280) deplojka - lokalna (serve)
281) deplojka - security
282) deplojka - performance: lighthouse, code splitting / lazy loading, eslint-plugin-vue
283) deplojka - performance: prerender (SSR) i webpack-bundle-analyzer
284) deplojka - performance: preload, preconnect, prefetch
285) deplojka - SEO
286) deplojka - accessibility
287) deplojka - lighthouse, coverage i webpack-bundle-analyzer, dependencies, fejk repo

290) deplojka zeit-now hello world
291) deplojka zeit-now apki vue - old
292) deplojka zeit-now apki vue - new
294) deplojka - firebase hosting

300) http - axios
301) .gitignore
302) css - background image
303) nextTick
304) uncaught syntaxError: Unexpected token <
305) zeit - headers
306) instant prototyping
307) razzle

310) apka wioturillo
311) apka wioturillo - prosty wykres
312) local state vs vuex
313) vee-validate - helloWorld
314) vee-validate - bundle size
315) eslint: Unexpected token <

329) typescript - tips
330) typescript - hello world
331) typescript - interfejs: funkcja
332) typescript - interfejs: object literal
333) typescript - interfejs: multi
334) typescript - type

335) typescript - class
336) typescript - type inferrence
337) typescript - funkcja: argumenty
338) typescript - funkcja: zwracane wartości
339) typescript - rest i spread
340) typescript - union

350) typescript - class memeber ordering (tslint)



-------------------------------------------------------------------------------
000) tips

    A) css
        Scoped css, realizowany w kazdym komponencie tagiem <style scoped>
        eliminuje potrzebę BEM'a. Jest używany przez 83% juzków vue

    B) Podstawy komponentu
        data - musi być funkcją, by każdej instancji komponentu zwracać jej niezależny obiekt z danymi
               Bez tego klik w jeden baton, wywoływałoby skutki również we wszystkich innych

        root - każdy komponent musi mieć 1 root element (<div></div>)

    o) nie edytuj pliku weback/config.js (w node_nodules/@cli-service)
        https://cli.vuejs.org/guide/webpack.html#simple-configuration

        Zamiast tego, wstawiaj kod webpackowy do /vue.config.js, np:

          module.exports = {
            configureWebpack: {
              plugins: [
                new MyAwesomeWebpackPlugin()
              ]
            }
          }

        Całe ustawienia webpacka można obejrzeć przez:
          vue inspect > output.js

    i) jeśli high CPU, ustaw poll na false w:
         node_modules/@cli-service/webpack.config doddaj linię:

        devServer: {
          watchOptions: {
            poll: false
          }
        }

    ii) by przyszybszyć webpacka, w webpack.config zmień

       loader: 'babel-loader'
         na:
       loader: 'babel-loader?cacheDirectory',

    a) zamiast 'v-on:' można użyć skrótu '@'
       a zamiast 'v-bind:' - ':'

    b) za nazwą metody nie musi być nawiasu
         <button @click='inc'>Inc</button>
       chyba że chcemy podać parametr, np
         <button @click='inc(5)'>Inc</button>

    c) data - musi być funkcja zwracajacą obiekt:
          data() {
            name: 'adam',
            color: 'blue
          }

        W przeciwnym razie:
          data: {
            name: 'adam',
            color: 'blue
          }

        wszystkie utworzone przy jej pomocy komponenty,
        odnosiłyby się będą do tej samej referencji (adresu w pamięci)
        i zmiana koloru czy nazwy jednego skutkowałaby zmianą ich we wszystkich

    d) methods - musi być obiektem zwracającym funkcje:
          methods: {
            sayHi() {

            },
            getStuff() {

            }
          }

          Można używać ww składni klasowej ES6, lub ES5:
          methods: {
            sayHi: function(step) {
            }
          }

    e) v-pre
         nie interpretuje, wyświetla literalnie,
         tzn <p> {{ car }} </p> wyświetli jako tekst: '{{ car }}'

    f) v-cloak
         zapobiega mrygnięciu pokazującemu przez chwilę zmięnna w brejsach
         Przełącza widok dopiero, gdy jest on gotowy
         Przydaje się przy większych zmianach css'owych elementu

    g) ERROR in build.js from UglifyJs Unexpected token: punc (()

        a) yarn add babel-preset-env

        b) zrób plik /.babelrc i wklej doń:
            {
             "presets": [
               ["env", {"modules": false}]
              ]
            }

        c) odpal yarn build

    h) by obrazki były brane z /assets, zmodyfikuj regułę w webpack.config.js:

        {
          test: /\.(png|jpg|jpeg|gif|svg)$/,
          use: [
            'url-loader?name=assets/[name].[ext]',
          ]
        }

    i) git komendy przy nowym projekcie
        git init

        git remote add origin https://github.com/nabu1/NAZWA_PROJEKTU.git
        git config --global user.name LOGIN
        git config --global user.email nabu1312@gmail.com

        git config -l  // listuje wszystkie ustawienia
        git remote -v  // listuje wszystkie remoty

    j) jak (w tabie Sources) jest błąd 'converting circular structure to JSON',
       to zamiast dispatcha dałeś commita (albo odwrotnie ?)

    k) vue-template-compiler 2.6.10 vs vue 2.6.6 mismatch
        Po odpaleniu yarn build, wyskoczył ww błąd
        Zmień wersję templejta na równą vue, czyli tu 2.6.6
        Przyczyną było ustawienie na sztywno wersji pakietów (obcięcie karetki ^)
        w package.json'ie

    l) @ - tworzony przez CLI skrót oznaczający katalog /src
           Dzięki niemu zamiast ścieżki '../../assets' można użyć '@/assets'

    m) vue cli 3 - update
         Jeśli po updacie i odpaleniu: vue create costam
         nadal widać starą wersję CLI, odinstaluj ją całkiem, tzn yarnem i npm'em:

          yarn global remove @vue/cli
          npm uninstall -g @vue/cli

         .. i zainstaluj ponownie

          yarn global add @vue/cli@next

    n) brak HMR (hot reload'a)
        jeśli po zwykłym: vue create nazwaProjektu
        i odpaleniu go yarn dev (czy start), nie działa hot reload,
        zainstaluj: webpack-cli

-------------------------------------------------------------------------------
001) hello world CLI 3

       a) yarn global add @vue/cli  lub  npm i -g @vue/cli@next
       b) vue --version
       c) vue create vue123 > wybierz Router i Vuex
       d) w /components zrób 3 niemal takie same komponenty: Header, Kumpo, Footer
          różniące się tylko treścią w tagu <h2></h2>

   ------- components / Kumpo / Kumpo.vue ---------------------------

    <template src='./Kumpo.html'></template>

    <script>
      export default {
      }
    </script>

   ------- components / Kumpo / Kumpo.html ---------------------------

    <div>
      <h3>Kumpo</h3>
    </div>

   ------- views / Helloo.vue ---------------------------

    <template>
      <div>
        <Header></Header>
        <Kumpo></Kumpo>
        <Footer></Footer>
      </div>
    </template>

    <script>
      import Header from '../components/Header/Header.vue'
      import Footer from '../components/Footer/Footer.vue'
      import Kumpo from '../components/Kumpo/Kumpo.vue'

      export default {
        components: {
          Header, Footer, Kumpo
        }
      }
    </script>

   ------- App.vue ---------------------------

    <template>
      <div>
        <h2>App.vue</h2>
        <router-view/>
      </div>
    </template>

   ------- main.js ---------------------------

    import Vue from 'vue'
    import App from './App.vue'
    import router from './router'
    import store from './store'

    Vue.config.productionTip = false

    new Vue({
      router,
      store,
      render: h => h(App)
    }).$mount('#app')

   ------- router.js ---------------------------

    import Vue from 'vue'
    import Router from 'vue-router'
    import Kumpo from './components/Kumpo/Kumpo.vue'

    Vue.use(Router)

    export default new Router({
      mode: 'history',
      base: process.env.BASE_URL,
      routes: [
        { path: '/', name: 'kumpo', component: Kumpo },
        { path: '/hello', name: 'hello', component: () => import('./views/Hello.vue') }
      ]
    })

   ------- store.js ---------------------------

    import Vue from 'vue'
    import Vuex from 'vuex'

    Vue.use(Vuex)

    export default new Vuex.Store({
      state: {
      },
      mutations: {
      },
      actions: {
      }
    })

   ------- package.json ---------------------------

    {
      "name": "vue1",
      "version": "0.1.0",
      "private": true,
      "scripts": {
        "dev": "vue-cli-service serve",
        "build": "vue-cli-service build"
      },
      "dependencies": {
        "vue": "^2.6.6",
        "vue-router": "^3.0.1",
        "vuex": "^3.0.1"
      },
      "devDependencies": {
        "@vue/cli-plugin-babel": "^3.5.0",
        "@vue/cli-service": "^3.5.0",
        "vue-template-compiler": "^2.5.21"
      }
    }

-------------------------------------------------------------------------------
002) v-text aka {{ }}

    <p> {{ car }} </p>

      jest równoważne z

    <p v-text='car'></p>

-------------------------------------------------------------------------------
003) v-bind aka : - one-way-binding

     Udemy (Schwarzmuller) Vue  #012 Binding to Attributes

     W v-bind:href 'v-bind' można pominąć, zostawiając samo :href
     Podobnie w batonie, dla v-bind:disabled

     Two-way-binding

      Klik batona Change (View) powoduje wykonanie metody change()
      Zmienia ona zmienną switcher (Model)
      Jej wartość wpływa z kolei, na stan batona Disabled/Enabled (View)
      i literałka {{ switcher }}
      Mamy tu więc ilustrację Model > View > Model (MVVM)

    --- Kumpo.vue ----------------------------------------------

      <template>
        <div>
          <Komponent costam='propsiak'></Komponent>   // wariant 1 - statyczne wiązanie = 'propsiak'
          <Komponent :costam='propsiak'></Komponent>  // wariant 2 - dynamiczne wiązanie = 'słońce'
        </div>
      </template>

      <script>
        import Komponent from './Colors'

        export default {
          components: {
            Komponent
          },
          data() {
            return {
              propsiak: 'słońce'
            }
          }
        }
      </script>

    --- Colors.vue ----------------------------------------------

      <template>
        <div>
          <p>{{ costam }}</p>
        </div>
      </template>

      <script>
        export default {
          props: ['costam']
        }
      </script>

-------------------------------------------------------------------------------
004) v-once

    Powoduje, że kliknięcie wykona się tylko raz

    <div id="app">
      {{ licznik }}
      <button @click.once='inc'>Inc</button>
    </div>

    <script>
      new Vue({
        el: '#app',
        data() {
          licznik: 0
        },
        methods: {
          inc() {
            this.licznik++
          }
        }
      })
    </script>

-------------------------------------------------------------------------------
005) v-html

    Używaj tylko, by treść była sanitized, bo inaczej grozi XSS

    <div id="app">
      <p v-html="finishedLink"></p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          finishedLink: '<a href="http://google.com">Google v-html</a>'
        }
      })
    </script>

-------------------------------------------------------------------------------
006a) v-on:click

    Doklejenie event listenera
    W v-on:click, 'v-on:' można zastąpić '@', czyli będzie @click

    <div id="app">
      <button v-on:click="increase">Click me</button>
      <p>{{ counter }}</p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          counter: 0
        },
        methods: {
          increase() {
            this.counter++
          }
        }
      })
    </script>


    albo zamiast v-on:click="increase", można v-on:click="counter++"
    Reszta j/w

    <div id="app">
      <button v-on:click="counter++">Click me</button>
      <p>{{ counter }}</p>
    </div>

    W treści polecenia click mozna zawrzeć całą komendę js'ową:

      <button @click="fruits.push('Berries')">Add Berries</button>

-------------------------------------------------------------------------------
006b) Event Modifiers

    https://vuejs.org/v2/guide/events.html#Listening-to-Events

    Można ich użyć w metodzie, ale lepiej w tagu, bo należą one do DOMu, a nie js:

      .stop    - propagacja danego eventa będzie zatrzymana
      .prevent - zapobiega wysłaniu formy po kliku w Submit; zapobiega otwarciu strony po kliku w Linka
      .capture
      .self
      .once    - odpala dany event tylko raz
      .passive - mówi browserowi: 'nie zapobiegaj domyślnemu zachowaniu'; poprawia wydajność na mobilkach

    Dołącza się je bezpośrednio za komendą, poprzedzając kropką:

      <a @click.stop="doThis"></a>  // propagacja zostanie zatrzymana

      <form @submit.prevent="onSubmit"></form>  // po odpaleniu eventa submit, strona się nie przeładuje

      <a @click.stop.prevent="doThat"></a>  // modyfikatory mogą być łańcuchowane

      <!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
      <div @click.capture="doThis">...</div>

      <div @click.self="doThat">...</div>  // zostanie odpalony tylko z niego, a nie z jego child'a

      <a @click.once="doThis"></a>   // klik zostanie wykonany najwyżej raz

-------------------------------------------------------------------------------
006c) Key modifiers

      Sprawdzanie czy został wciśnięty określony klawisz:

        <input @keyup.a.b.x="onLetter">
        <input @keyup.enter="onEnter">
        <input @keyup.page-down="onPageDown">

      .exact przepuszcza tylko dokładną kombinację klawiszy; żadnego dodatkowego

      <button @click.ctrl="onClick">A</button>  - odpali nawet gdy dodatkowo wciśnięty będzie shift, ctrl czy alt
      <button @click.ctrl.exact="onCtrlClick">A</button> - tylko gdy ctrl
      <button @click.exact="onClick">A</button> - tylko gdy żadnen inny klawisz nie będzie wciśnięty
-------------------------------------------------------------------------------
007) v-on:onmousemove

    <div id="app">
      <p @mousemove="updateCoords"> Coordinates: {{ x }} / {{ y }} </p>
    </div>

    <script>
      new Vue({
        el: '#app',
        data: {
          x: 0,
          y: 0
        },
        methods: {
          updateCoords(e) {
            this.x = e.clientX
            this.y = e.clientY
          }
        }
      })
    </script>

-------------------------------------------------------------------------------
008) v-on:click z argumentem

    <div id="app">
      <button v-on:click="increase(5)">Click me</button>
      <p>{{ counter }}</p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          counter: 0
        },
        methods: {
          increase: function(step) {
            this.counter += step
          }
        }
      })
    </script>

-------------------------------------------------------------------------------
009) event stopPropagation

    <div id="app">
      <p v-on:mousemove="updateCoords">
        Coordinates: {{ x }} / {{ y }}
        <span v-on:mousemove="dummy"> - DEAD SPOT</span>
      </p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          x: 0,
          y: 0
        },
        methods: {
          updateCoords(e) {
            this.x = e.clientX
            this.y = e.clientY
          },
          dummy(e) {
            e.stopPropagation()
          }
        }
      })
    </script>

    lub przez @mousemove.stop:

    <div id="app">
      <p @mousemove="updateCoords">
        Coordinates: {{ x }} / {{ y }}
        <span @mousemove.stop> - DEAD SPOT</span>
      </p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          x: 0,
          y: 0
        },
        methods: {
          updateCoords: function(e) {
            this.x = e.clientX
            this.y = e.clientY
          }
        }
      })
    </script>

-------------------------------------------------------------------------------
010) keyup, keypress

    Poniżej można użyc dowolnego z ww, ale chyba keyup lepiej
    się sprawdza w różnych przeglądarkach

    <div id="app">
      <input @keyup.enter.space.esc.a.b.c="alertMe">
      <p>{{ alertMe() }}</p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {},
        methods: {
          alertMe: function(e) {
            // e.preventDefault
            // console.log(e.target.value)
            alert('Wcisłeś !')
          }
        }
      })
    </script>

-------------------------------------------------------------------------------
011) templates

    W nawiasie {{ }} można wbijać proste tzn 1-linijkowe instrukcje

    <div id="app">
      <button @click="counter++">Click me</button>
      <p>{{ counter }}</p>
      {{ counter * 2  > 10 ? 'Greater than 10' : 'Smaller than 10'}}
    </div>


    <script>
      const app = new Vue({
        el: '#app',
        data: {
          counter: 0
        },
        methods: {
          increase: function() {
            this.counter++
          }
        }
      })
    </script>

-------------------------------------------------------------------------------
012a) v-model

    <div id="app">
      <input v-model="name">
      <p>{{ name }}</p>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          name: ''
        }
      })
    </script>

----------------------------------------------------------------------------------------------
012b) nested component

    a) stwórz komponent
    b) umieść go w root komponencie, rejestrując w obiekcie 'components' root'a
    c) użyj w obiekcie 'template'

   ----------- Kumpo.vue ------------------------------------

    <template src='./Kumpo.html'></template>

    <script>
      import Footer from './Footer'

      export default {
        data() {
          return {
            licznik: 10
          }
        },
        components: {
          Footer
        }
      }
    </script>


   ----------- Kumpo.html ------------------------------------

    <div>
      <h2>Kumpo</h2>
      <Footer :licznik='licznik'></Footer>  // bez dwukropka wypisałby stringa 'licznik'
    </div>


   ----------- Footer.vue ------------------------------------

    <template src='./Footer.html'></template>

    <script>
      export default {
        props: [
          'licznik'
        ]
      }
    </script>

   ----------- Footer.html ------------------------------------

    <div>
      <h3>{{ licznik }}</h3>
    </div>

-------------------------------------------------------------------------------
013) computed properties

    Udemy (Schwartsmuller) Vue: #23 Reacting to changes with computed properties

    Computed jest wykonywane tylko, gdy zmienia się wartość w niej zawarta.

    Chodzi o to, by po zmianie 1 wartości, tylko ona była przeliczana
    i na nowo wyświetlana, a pozostałe np 9 było bez zmian

    W poniższym przykładzie klik dowolnego batona odpali funkcje zawarte w Methods
    Funkcje zawarte w Computed, odpalone zostaną tylko, gdy zmieni się wartość
    ujęta w w Computed, a nie dowolna

    -----------------------------------------------------------------------------------------------

    <template>
      <div>
        <button @click="counterA++">Counter A</button>
        <button @click="counterB++">Counter B</button>

        <p>Counter: {{ counterA }} | {{ counterB }} </p>
        <p>Result: {{ output }} | {{ result() }} </p>
      </div>
    </template>

    <script>
      export default {
        data() {
          return {
            counterA: 0,
            counterB: 0
          }
        },
        computed: {
          output() {
            console.log('Computed')
            return this.counterA > 5 ? 'Greater 5' : 'Smaller 5'
          }
        },
        methods: {
          result() {
            console.log('Method')
            return this.counterA > 5 ? 'Greater 5' : 'Smaller 5'
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
014) watch

    Udemy (Schwartzmuller) Vue: #24 Alternative to Computed properties - Watching for Changes

    Watch to przeciwne podejście do tego samego problemu, co computed.
    Do watch'a wkłada się zmienną, która ma byc podsłuchiwana
    i jak tylko się zmieni, jakaś akcja ma się odbyć

   ------- .html --------------------------------------------------
    <div>
      <p>Counter = {{ counter }}</p>
      <p>tripleValue = {{ tripleValue }}</p>
      <button @click='counter++'>KlikMi</button>
    </div>

   --------- .vue ------------------------------------------------

    <script>
      export default {
        data() {
          return {
            counter: 0,
          }
        },
        watch: {
          counter(newVal, oldVal) {
            if(counter%2 === 0) {
              console.log('%c counter = ' + counter, 'color: white')
            }
          }
        },
        computed: {
          tripleValue() {
            return this.counter * 3
          }
        }
      }
    </script>


-------------------------------------------------------------------------------
015) :class

    W src templatki nazwa pliku musi mieć rozszerzenie .html

  ----- Kumpo.vue ----------------------------------------------

    <template src='./Kumpo.html'></template>

    <script>
      export default {
        data() {
          return {
            title: 'Set by JS',
            className: 'color-blue'
          }
        }
      }
    </script>

    <style>
      .color-red { color: red }
      .color-blue { color: blue }
    </style>


  ----- Kumpo.html ----------------------------------------------

    <div>
      <button :title='title' @click=''>Jakiś Baton</button>
      <h2 :class='className'>Klasa</h2>
    </div>

-------------------------------------------------------------------------------
016) :class i computed

    <style>
      .demo {
        width: 100px;
        height: 100px;
        background-color: grey;
      }
      .red {
        background-color: red;
      }
      .blue {
        background-color: blue;
      }
    </style>


    <div id="app">
      <div
        class="demo"
        @click="attachRed = !attachRed"
        :class="divClasses">
      </div>
    </div>


    <script>
      const app = new Vue({
        el: '#app',
        data: {
          attachRed: false
        },
        computed: {
          divClasses: function() {
            return {
              red: this.attachRed,
              blue: !this.attachRed
            }
          }
        }
      })
    </script>


-------------------------------------------------------------------------------
017) v-if i v-else

    Rendering warunkowy - usuwa element z DOMu

    <div id='app'>
      <p v-if='show'>show = {{ show }}</p>
      <p v-else='show'>show = {{ show }}</p>
      <button @click='show = !show'>Toggle</button>
    </div>


    <script>
      const app = new Vue({
        el: '#app',
        data: {
          show: true
        }
      })
    </script>

-------------------------------------------------------------------------------
018) v-show

    Nie usuwa elementu z DOMu, dodaje mu styl display: none

    <div id='app'>
      <p v-show='show'>v-show</p>
      <button @click='show = !show'>Switch</button>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          show: true
        }
      })
    </script>

-------------------------------------------------------------------------------
019) v-for

    Jeśli przy sortowaniu wynik jest inny niż powinien,
    dodaj index do pętli, np :id

    <div id='app'>
      <ul>
        <li v-for="(car, i) in cars">{{ i }} {{ car }}</li>
        <li v-for="(person, i) in persons">
          {{ i }}
          {{ person.name }}
          {{ person.age }}
          {{ person.city }}
        </li>
      </ul>
    </div>

    <script>
      const app = new Vue({
        el: '#app',
        data: {
          cars: ['fiat', 'bmw', 'honda'],
          persons: [
            { id: 121, name: 'jan', age: 11, city: 'wwa'},
            { id: 122, name: 'adam', age: 22, city: 'gda'}
          ]
        }
      })
    </script>

-------------------------------------------------------------------------------
020) v-for nested

    <div id= 'app'>
      <ul>
        <li v-for='(user, ix) in users'>
          <div v-for='(value, key, index) in user'>
            {{ key }}: {{ value }} ({{ index }})
          </div>
        </li>
      </ul>
    </div>

    <script>
      new Vue({
        el: '#app',
        data: {
          users: [
            { id: 0, name: 'jan', age: 11, city: 'wwa'},
            { id: 1, name: 'adam', age: 22, city: 'gda'}
          ]
        }
      })
    </script>

-------------------------------------------------------------------------------
021) apka ToDo List

    -------- Kumpo.vue --------------------------------------

      <template src='./Kumpo.html'></template>

      <script>
        export default {
          data() {
            return {
              active: false,
              cars: [
                { name: 'honda', price: 2000, year: 2012 },
                { name: 'bmw', price: 3000,  year: 2015 },
                { name: 'merc', price: 4000,  year: 2017 }
              ],
              newCar: '',
              selectedCar: ''
            }
          },
          methods: {
            addCar(newCar) {
              console.log('%c newCar = ' + newCar, 'color: white')
              this.cars.push({ name: newCar })
              this.newCar = ''
            },
            deleteCar(index) {
              console.log('%c index = ' + index, 'color: white')
              this.cars.splice(index, 1)

            },
            editCar(index) {
              console.log('%c index = ' + index, 'color: white')
              this.newCar = this.cars[index].name
              this.selectedCar = this.cars[index]
              this.active = true
            }
          }
        }
      </script>


    -------- Kumpo.html --------------------------------------

      <div>
        <p v-for='car, index in cars'
           @click='editCar(index)'
           @dblclick='deleteCar(index)'>
           {{ car.name }}
        </p>

          <input v-model='newCar'>
          <button @click='addCar(newCar)'>Dodaj</button>

          <p v-if='active'> Year: {{ selectedCar.year}}</p>
          <p v-if='active'> Price: {{ selectedCar.price}}</p>
      </div>

-------------------------------------------------------------------------------
022) Dostęp do apki z innej apki i z zewnątrz

    <div id="app1">
      <p>{{ name }}</p>
    </div>

    <div id="app2">
      <p>{{ name }}</p>
      <button @click='zmienApp1'>Zmień app1</button>
    </div>

    <script>
      const app1 = new Vue({
        el: '#app1',
        data: {
          name: 'app 1'
        }
      })

      const app2 = new Vue({
        el: '#app2',
        data: {
          name: 'app 2'
        },
        methods: {
          zmienApp1() {
            app1.name = 'Dupa'
          }
        }
      })

      setTimeout(() => {
        app2.name = 'Kwas'
      }, 2000)

    </script>

-------------------------------------------------------------------------------
023) $ref

    Elementowi mozna nadać nazwę, przez którą potem,
    można się doń odwoływać (jak id w css)

    Pisanie w ten sposób działa bezpośrednio na DOMie,
    więc może być nadpisane przez Vue - Virtual DOM

    Najlepiej więc tylko czytać tą metodą

   ---------------------------------------------

    <template>
      <div>
        <p ref='title'>Dupa</p>
        <button @click='get'>Klikmi</button>
      </div>
    </template>


    <script>
      export default {
        methods: {
          get() {
            console.log(this.$refs.title.innerText)
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
024) $mount i template

      <div id='app1'>
      </div>

      <script>
        const app1 = new Vue({
          template:'<h1> Hello </h1>'
        })

        app1.$mount('#app1')
      </script>

-------------------------------------------------------------------------------
025) Lifecycle

    Udemy (Schwartzmueller) Vue - #75 Instance Lifecycle

    Najpierw jest tworzący instancję klasy Vue, konstruktor new Vue()

    Po wciśnięciu batona Update Title, powtórne wciśnięcie
    nie odpala już metod beforeUpdate() i updated(),
    bo nie ma diffa między VDOM a DOM

    Po kliku w batona Destroy, klik w batona Update Ttitle
    nie powoduje zmiany nagłówka, bo Vue zostało odcięte od
    tego obiektu przez wykonanie metody destroy()

   --------------------------------------------

    <template>
      <div>
        <h3>{{ title }}</h3>
        <button @click='title="Changed"'>Update Title</button>
        <button @click='destroy'>Destroy</button>
      </div>
    </template>

    <script>
      export default {
        data() {
          return {
            title: 'Dupa'
          }
        },
        beforeCreate() {
          console.log('1. beforeCreate()')
        },
        created() {
          console.log('2. created()')
        },
        beforeMount() {
          console.log('3. beforeMount()')
        },
        mounted() {
          console.log('4. mounted()')
        },
        beforeUpdate() {
          console.log('5. beforeUpdate()')
        },
        updated() {
          console.log('6. updated()')
        },
        beforeDestroy() {
          console.log('7. beforeDestroy()')
        },
        destroyed() {
          console.log('8. destroyed()')
        },
        methods: {
          destroy() {
            this.$destroy()
          }
      }
    }
    </script>


-------------------------------------------------------------------------------
026) Komponent - zagnieżdżanie lokalne

    Udemy Schwartsmuller Vue - #96 Using Components

    a) stwórz komponent w Ninjas.vue
    b) zaimportuj go do App.vue i użyj go tam w <template>
    c) main.js pozostaje bez zmian

------------ a) /Kumpo.vue -----------------------------

    <template src='./Kumpo.html'></template>

    <script>
      import Footer from './Footer.vue'

      export default {
        data() {
          return {
            name: 'Tu Kumpo'
          }
        },
        components: {
          Footer
        }
      }
    </script>

------------ b) /Kumpo.html -----------------------------

  <div>
    <p>{{ name }}</p>
    <Footer></Footer>
  </div>

------------ c) /Footer.vue ----------------------------------------

  <template src='./Footer.html'></template>

  <script>
    export default {
      data() {
        return {

        }
      }
    }
  </script>


------------ d) /Footer.html ----------------------------------------

  <div>
    <h2>Footer</h2>
  </div>

-------------------------------------------------------------------------------
027) props - 1

    Udemy Schwartsmuller Vue - #105-107 Props

    Przekazywanie danych do subkomponentu (passing props)

    Do komponentu <Colors> przekazuję propsa o nazwie 'colors' i zawartości 'colors'
      <colors v-bind:colors='colors'></colors>

    Zamiast 'v-bind:colors', można pominąć 'vbind':
      <colors :colors='colors'></colors>

    Propertka 'props' w child komponencie ma być tablicą lub obiektem (nie stringiem!)

    ------------- App.vue ------------------------------------

      <template>
        <Colors :lista='kolory'></Colors>
      </template>

      <script>
        import Colors from './Colors.vue'

        export default {
          components: {
            Colors
          },
          data() {
            return {
              kolory: [ 'Red', 'Green', 'Blue' ]
            }
          }
        }
      </script>

    ------------- Colors.vue ------------------------------------

      <template>
        <div>
          <ul>
            <li v-for='item in lista'>{{ item }}</li>
          </ul>
        </div>
      </template>

      <script>
        export default {
          props: ['lista'],
          methods: {
            doSth() {
              console.log('To jest: ', + this.lista)
            }
          }
        }
      </script>

-------------------------------------------------------------------------------
028) props - walidacja

    W powyższym Ninjas.vue, można zrobić walidacje typu przyjmowanych danych
      a) walidacja typ i required
          props: {
            kolor: {
              type: Array,
              required: true
            }
          }

      b) walidacja default
          props: {
            kolor: {
              type: [ String, Number ],
              default() {
                return 'nieznany kolor'
              }
            }
          }

      c) validator
          props: {
            kolor: {
              type: Number,
              validator: value => {
                if (value < 18) return false
              }
            }
          }

    ------------- Ninjas.vue ------------------------------------

    <template>
      <ul>
        <li v-for='color in colors'>{{ color }}</li>
      </ul>
    </template>

    <script>
      export default {
        // props: ['colors']
        props: {
          colors: {
            type: Array,
            required: true
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
029) props - 2

    ------------- App.vue ------------------------------------

      <template>
        <div>
          <colors :colors='colors' :title='title'></colors>
        </div>
      </template>

      <script>
        import Colors from './Ninjas.vue'

        export default {
          components: {
            'colors': Colors
          },
          data() {
            return {
              colors: ['biały', 'czarny', 'różowy'],
              title: 'Kolory'
            }
          }
        }
      </script>

    ------------- Ninjas.vue ------------------------------------

      <template>
        <div>
          <p>{{ title }}</p>
          <ul>
            <li v-for='color in colors'>{{ color }}</li>
          </ul>
          <button @click='deleteItem'>Delete</button>
        </div>
      </template>

      <script>
        export default {
          props: ['colors', 'title'],
          methods: {
            deleteItem() {
              this.colors.pop()
            }
          }
        }
      </script>

-------------------------------------------------------------------------------
030) przekazanie funkcji

  Analogicznie jak z przekazywaniem wartości, przekazuje się funkcję

  a) stworzyć kumpo z batonem, którego metoda klik jest brana z tablicy propsów

  b) w App zaimportować ww kumpo i zbindować w nim metodę zdefiniowaną w 'methods'

------------- App.vue ------------------------------------

  <template>
    <div>
      {{ miasto }}
      <button @click='resetName'>Tutejszy</button>
      <Counter :reset='resetName'></Counter>
    </div>
  </template>

  <script>
    import Counter from '../Counter/Counter.vue'

    export default {
      components: { Counter },
      data() {
        return {
          miasto: 'Wwa'
        }
      },
     methods: {
       resetName() {
         this.miasto = 'Kicha'
       }
     }
    }
  </script>

------------- Counter.vue ------------------------------------

  <template>
    <button @click='reset()'>KlikMi</button>
  </template>

  <script>
    export default {
      props: ['reset']
    }
  </script>

-------------------------------------------------------------------------------
031) Custom Event ($emit i $event)

      Udemy Schwartsmuller Vue #109 Using Custom Event for Child - Parent Comm @ 3:00

      Child śle emita:
        this.$emit('nazwaEmita', 'wartośćEmita')

      Parent odbiera emita:
        <users @nazwaEmita='name=$event'></users>

------------- Kumpo.vue ------------------------------------

  <template src='./Kumpo.html'></template>

  <script>
    import Footer from './Footer'

    export default {
      components: {
        Footer
      },
      data() {
        return {
          liczba: 0
        }
      }
    }
  </script>

------------- Kumpo.html ------------------------------------

  <div>
    <Footer @mojEmit='liczba+=$event'></Footer>
    {{ liczba }}
  </div>

------------- Footer.vue ------------------------------------

  <template src='./Footer.html'></template>

  <script>
    export default {
      methods: {
        klik() {
          this.$emit('mojEmit', 10)
        }
      }
    }
  </script>

------------- Footer.html ------------------------------------

  <div>
    <button @click='klik'>KlikMi</button>
  </div>

-------------------------------------------------------------------------------
032) eventBus ($emit, $on)

      Use vuex for everything as a default, and drop back to an event bus when vuex becomes a hurdle.

      Event buses are great to fix a few edge cases, maybe like the one you showed,
      but 98% of the stuff in your typical app is not a function ,but really state.

      bus.$emit('titleChanged', 'Vue Wizards') - emituje daną

      bus.$on('titleChanged', data => {        - odbiera daną
        this.footer = data
      })

    ------------- main.js ------------------------------------

      import Vue from 'vue'
      import App from './App.vue'

      export const bus = new Vue()

      new Vue({
        render: h => h(App)
      }).$mount('#app')

    ------------- App.vue ------------------------------------

      <template>
        <div>
          <button @click='setCounter'>Counter</button>
          <Counter></Counter>
        </div>
      </template>

      <script>
        import Counter from '../Counter/Counter'
        import { bus } from '../../main.js'

        export default {
          components: {
            Counter,
          },
          methods: {
            setCounter() {
              bus.$emit('counter', 5)
            },
        }
      }
      </script>

    ------------- Counter.vue ------------------------------------

      <template>
        <div>
          {{ counter }}
        </div>
      </template>

      <script>
        import { bus } from '../../main.js'

        export default {
          data() {
            return {
              counter: 24
            }
          },
          created() {
            bus.$on('counter', data => {
              console.log('%c data = ' + data, 'color: white')
              this.counter = data
            })
          }
        }
      </script>

-------------------------------------------------------------------------------
033) slot

      Aby przekazać z parenta do childa na tyle dużo html'a,
      że nie mieści sie w 1 linii propsa:

      a) w parencie: umieść go między tagami komponentu

          <Ramka>
            <h2>Pierwsza linia</h2>
            <h3>Druga linia</h3>
          </Ramka>

      b) w childzie, między tagami <template> wstaw tagi <slot>
         Powyższe 2 linie automatycznie do niego wpadną

          <slot></slot>

      Stylowanie odbywa się w childzie, cała reszta - w parencie

    ------------- App.vue ------------------------------------

      <template>
        <div>
          <Ramka>
            <h2>Pierwszy</h2>
            <h3>Drugi</h3>
          </Ramka>
        </div>
      </template>

      <script>
        import Ramka from '../Counter/Counter'

        export default {
          components: {
            Ramka
          }
        }
      </script>


    ------------- Counter.vue ------------------------------------

      <template>
        <div>
          <slot></slot>
        </div>
      </template>

      <style scoped>
        h2 { color: red }
        h3 { color: blue }
      </style>

-------------------------------------------------------------------------------
034) named slots

    W pojedyńczym slocie, wszystko wpada do niego.
    Aby tą treść rozdzielić na mniejsze kawałki,
    w tagach parenta dodaj propertkę slot='jakasNazwa',

    a w childzie taga <slot name='jakasNazwa'>

    ------------- App.vue ------------------------------------

      <template>
        <div>
          <foo>
            <h2 slot='pierwszy'>To jest pierwszy slot</h2>
            <h2 slot='drugi'>A to drugi</h2>
          </foo>

        </div>
      </template>

      <script>
        import Footer from '.Footer.vue'

        export default {
          components: {
            foo: Footer
          }
        }
      </script>

    ------------- Footer.vue ---------------------------------

      <template>
        <div>
          <slot name='drugi'></slot>
          <slot name='pierwszy'></slot>
        </div>
      </template>

-------------------------------------------------------------------------------
035) default slots

    Wszystko co w parencie nie jest oznaczone słowem 'slot' wrzucane jest
    do slota w childzie nie oznaczonego słowem 'name'

    ------------- Parent.vue ------------------------------------

      <template>
        <Counter>
          <h2 slot='pierwszy'>{{ user }}</h2>
          <h3>Drugi</h3>
          <h4>Trzeci</h4>
        </Counter>
      </template>

      <script>
        import Counter from './Colors'

        export default {
          components: {
            Counter,
          },
          data() {
            return {
              user: 'Pierwszy'
            }
          }
      }
      </script>

    ------------- Child.vue ------------------------------------

      <template>
        <div>
          <slot></slot>
          <slot name='pierwszy'></slot>
        </div>
      </template>

      <script>
        export default {
          data() {
            return {
            }
          },
        }
      </script>

      <style scoped>
        h2 { color: red }
        h3 { color: blue }
      </style>

-------------------------------------------------------------------------------
036) dynamic component

     Poniższa konstrukcja pozwala dynamicznie wybierać komponenty

        <component :is="selectedComponent"></component>

    ------------- App.vue ------------------------------------

      <template>
        <div>
          <button @click="selectedComponent='hea'">Header</button>
          <button @click="selectedComponent='foo'">Footer</button>

          <component :is="selectedComponent"></component>
        </div>
      </template>

      <script>
        import hea from './Header.vue'
        import foo from './Footer.vue'

        export default {
          components: {
            hea, foo
          },
          data() {
            return {
              selectedComponent: 0
            }
          }
        }
      </script>

    ------------- Header.vue ---------------------------------

      <template>
        <h3>Header</h3>
      </template>

    ------------- Footer.vue ---------------------------------

      <template>
        <h3>Footer</h3>
      </template>

-------------------------------------------------------------------------------
037) keep-alive

    Aby jak w ww punkcie komponent nie został zniszczony (metoda destroyed()),
    ujmij tagi <component> w tagi <keep-alive>:

      <keep-alive>
        <component :is="selectedComponent"></component>
      </keep-alive>

    ------------- App.vue ------------------------------------

      <template>
        <div>
          <button @click='selectedComponent="Header"'>Header</button>
          <button @click='selectedComponent="Footer"'>Footer</button>

          <keep-alive>
            <component :is='selectedComponent'><p>Default Content</p></component>
          </keep-alive>

        </div>
      </template>

      <script>
        import Header from './Header'
        import Footer from './Footer'

        export default {
          components: {
            Header, Footer
          },
          data() {
            return {
              selectedComponent: 0
            }
          }

        }
      </script>

    ------------- Header.vue ---------------------------------

      <template>
        <h3>Header</h3>
      </template>

    ------------- Footer.vue ---------------------------------

      <template>
        <div>
          <h2>Footer</h2>
          <button @click='counter++'>Counter</button>
          <p>{{ counter }}</p>
        </div>
      </template>

      <script>
        export default {
          data() {
            return {
              counter: 0
            }
          },
          destroyed() {
            console.log('destroyed')
          }
        }
      </script>

-------------------------------------------------------------------------------
038) component hooks: activated, deactivated

    <template>
      <div>
        <p>{{ header }}</p>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            header: 'Header'
          }
        },
        destroyed() {
          console.log('Header destroyed !')
        },
        activated() {
          console.log('Header Activated !')
        },
        deactivated() {
          console.log('Header Deactivated !')
        }
      }
    </script>

-------------------------------------------------------------------------------
039) input box: v-model.lazy.number

    Modyfikator .lazy powoduje, że wartość zmiennej uaktualniana
    będzie nie po każdym kistrołku, ale po enterze lub blurze (kliku poza input boksa)

    Dzięki .number - jeśli w input boksie będzie liczba,
    będzie ona typu number, a nie jak domyslnie w html'u - string

    <template>
      <div>
        <input v-model.lazy.number='kupa'>
        <h2>{{ kupa }}</h2>
        <h2>{{ typeof(kupa) }}</h2>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            kupa: ''
          }
        }
      }
    </script>


-------------------------------------------------------------------------------
040) textarea v-model, multiline

    By zachować formatowanie tekstu w textarea,
    który podzielony jest na kilka linii, użyj css'owego
      white-space: pre

    <template>
      <div>
        <p>{{ footer }}</p>
        <textarea v-model='kupa'></textarea>
        <h2 style='white-space: pre'>{{ kupa }}</h2>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            footer: 'Futer',
            kupa: ''
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
041) checkbox

    <template>
      <div>
        Male: <input type="checkbox" value="Male" v-model="sex">
        Female : <input type="checkbox" value="Female" v-model="sex">
        <ul>
          <li v-for='item in sex'> {{ item }} </li>
        </ul>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            sex: []
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
042) radio

    <template>
      <div>
        Male: <input type="radio" value="Male" v-model="sex">
        Female : <input type="radio" value="Female" v-model="sex">
        <ul>
          <li> {{ sex }} </li>
        </ul>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            sex: ''
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
043) select

    <template>
      <div>
       <select v-model='selectedColor'>
         <option v-for='color in colors' > {{ color }}</option>
       </select>

       <p>{{ selectedColor }}</p>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            colors: ['green', 'blue', 'red'],
            selectedColor: 'blue'
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
044) custom directive - global

    Global - oznacza, że dyrektywę rejestruje się w pliku main.js:
       Vue.directive('highlight', { .. })

  --------- main.js ----------------------------

    import Vue from 'vue'
    import App from './App.vue'

    Vue.directive('highlight', {
      bind(el, binding, vnode) {
        console.table(binding)
        el.style.color = 'green'
        el.style.backgroundColor = 'orange'
      }
    })

    new Vue({
      render: h => h(App)
    }).$mount('#app')


  --------- Footer.vue ----------------------------

    <template>
      <div v-highlight>Warszawa</div>
    </template>

-------------------------------------------------------------------------------
045) custom directive - z propertką

   --------- main.js -------------------------------

      Vue.directive('color', {
        bind(el, binding, vnode) {
          if (binding.arg === 'background') {
            el.style.backgroundColor = binding.value
            el.style.color = 'yellow'
          }
          else {
            el.style.color = binding.value
          }
        }
      })

   --------- Footer.vue ----------------------------

     <template>
       <div v-color:background="'green'">Komputer</div>
     </template>

-------------------------------------------------------------------------------
046) custom directive - z propertką i parametrem

--------- main.js -------------------------------

   Vue.directive('highlight', {
     bind(el, binding, vnode) {
       el.style.backgroundColor = binding.value
     }
   })

--------- Footer.vue ----------------------------

  <template>
    <div v-highlight="'red'">Warszawa</div>
  </template>

-------------------------------------------------------------------------------
047) custom directive - z propertką, parametrem i modyfikatorem

    <div v-color:background.delayed="'green'">  - modyfikatoeem jest 'delayed'

    --------- main.js -------------------------------

   Vue.directive('color', {
     bind(el, binding, vnode) {
       let delay = 0

       if(binding.modifiers['delayed']) {
         delay = 2000
       }

       setTimeout(() => {
         if (binding.arg === 'background') {
           el.style.backgroundColor = binding.value
           el.style.color = 'yellow'
         }
         else {
           el.style.color = binding.value
         }
       }, delay)
     }
   })

  --------- Footer.vue ----------------------------

  <template>
    <div v-color:background.delayed="'green'">Komputer</div>
  </template>

-------------------------------------------------------------------------------
048) custom directive with modifier - global

    Do custom dyrektywy można dodac jeszcze modifier

    Poniżej jest nim .delayed:
       v-highlight:background.delayed="'red'"

  --------- main.js ----------------------------

    import Vue from 'vue'
    import App from './App.vue'

    Vue.directive('tsue', {
      bind(el, binding, vnode) {
        console.table(binding)
        let delay = 0

        binding.modifiers.delay ? delay = 1500 : null

        setTimeout(() => {
          binding.arg === 'bg' ? el.style.backgroundColor = binding.value : el.style.color = binding.value
        }, delay)
      }
    })

    new Vue({
      el: '#app',
      render: h => h(App)
    })

  --------- Footer.vue ----------------------------

    <template>
      <h1 v-tsue.delay="'blue'">ASDFG</h1>
    </template>

-------------------------------------------------------------------------------
049) custom directive - local 1

      <script>
        directives: {
          'kupa': { .. }
        }
      </script>

  --------- main.js ----------------------------

    import Vue from 'vue'
    import App from './App.vue'

    new Vue({
      render: h => h(App)
    }).$mount('#app')

  --------- App.vue ----------------------------

    <template>
      <h1 v-kupa>LOCAL Directive 1</h1>
     </template>

    <script>
      export default {
        directives: {
          'kupa': {
            bind(el, binding, vnode) {
              el.style.color = 'blue'
            }
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
050) custom directive - local 2

      --------- main.js ----------------------------

      import Vue from 'vue'
      import App from './App.vue'

      new Vue({
        render: h => h(App)
      }).$mount('#app')

    --------- App.vue ----------------------------

      <template>
        <h1 v-kupa.blink>LOCAL Directive 1</h1>
       </template>

      <script>
        export default {
          directives: {
            'kupa': {
              bind(el, binding, vnode) {
                console.table(binding)
                const primaryColor = 'green'
                const secondaryColor = 'orange'

                el.style.color = primaryColor

                if(binding.modifiers.blink) {
                  console.log('blink')

                  setInterval(() => {
                    el.style.color === secondaryColor ? el.style.color = primaryColor : el.style.color = secondaryColor
                  }, 1000)
                }
              }
            }
          }
        }
      </script>

-------------------------------------------------------------------------------
051) custom directive with objects -  local

    <template>
      <h1 v-kupa="{ sztuk: 10, cena: 6 }"></h1>
    </template>

    <script>
      export default   {
        directives: {
          'kupa': {
            bind(el, binding, vnode) {
              console.table(binding)
              el.innerText = binding.value.sztuk * binding.value.cena
            }
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
054) filter - local

    Przekształcanie treści do wyświetlenia w templatce
    Np zamiana liter na duże i wycinanie spacji

  ------------------------------------------
    <template>
      <h1>{{ word | up | trim }}</h1>
    </template>

    <script>
      export default {
        data() {
          return {
            word: '_ Q WER  adad  _'
          }
        },
        filters: {
          up(data) {
            return data.toUpperCase()
          },
          trim(data) {
            return data.replace(/ /g,'')
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
055) filter - global

  -------- main.js -----------------------------

    import Vue from 'vue'
    import App from './App.vue'

    Vue.filter('up', data => {
        return data.toUpperCase()
    })

    Vue.filter('trim', data => {
      return data.replace(/ /g, '')
    })

    new Vue({
      el: '#app',
      render: h => h(App)
    })

  -------- App.vue -----------------------------

    <template>
      <div>
        <input v-model='text'>
        {{ text | up | trim }}
      </div>
    </template>

    <script>
      export default {
        data() {
          return {
            text: '',
          }
        }
      }
    </script>

-------------------------------------------------------------------------------
056) filter via computed property

    Problem ze zwykłymi filtrami jest taki, że są przeliczane za każdą zmianą DOMu,
    nawet jeśli filtra kompletnie nie dotyczą.

    Lepsze wydajnościowo jest użycie computed property, bo odpalane jest ono dopiero,
    gdy jakaś zmienna ujęta w propertce 'computed' się zmieni:

    -----------------------------------------------
    <template>
      <div>
        <input v-model='filterText'>
        <ul>
          <li v-for='fruit in filteredFruits'>{{ fruit }}</li>
        </ul>
      </div>
    </template>

    <script>
      export default   {
        data() {
          return {
            fruits: ['Apple', 'Banana', 'Mango', 'Melon'],
            filterText: ''
          }
        },
        computed: {
          filteredFruits() {
            return this.fruits.filter(el => {
              return el.toLowerCase().match(this.filterText)
            })
          }
        }
      }
    </script>


-------------------------------------------------------------------------------
058) mixin

      Jeśli jakaś metoda przydaje się w więcej niż 1 miejscu,
      warto ją wyłączyc do zewn pliku mixin, a potem zaimportować

      Każdy zaimportowany mixin jest odrębnym obiektem tzn że zmiana
      w jednym z nich, nie powoduje zmiany w innym

    -------- fruitMixin.js -----------------------------

      export const fruitMixin = {
        data() {
          return {
            fruits: ['Apple', 'Banana', 'Mango', 'Melon'],
            filterText: ''
          }
        },
        computed: {
          filteredFruits() {
            return this.fruits.filter(el => {
              return el.match(this.filterText)
            })
          }
        }
      }

    -------- App.vue -----------------------------

      <template>
        <div>
          <input v-model='filterText'>
          <ul>
            <li v-for='fruit in filteredFruits'>{{ fruit }}</li>
          </ul>
        </div>
      </template>

      <script>
        import { fruitMixin } from './fruitMixin.js'

        export default   {
          mixins: [fruitMixin]
        }
      </script>

-------------------------------------------------------------------------------
059) mixin - lifecycles

    Mixiny podobnie jak komponenty, mają metody lifecycle'owe
    Przy czym nawet jeśli obie wystepują naraz i mają taką samą nazwę
    najpierw wykonywana jest meotda mixina, a potem komponentu

    Metoda 'created' komponentu, może więc nadpisać metodę 'created' mixina

    -------- fruitMixin.js -----------------------------

      export const fruitMixin = {
        data() {
          return {
            fruits: ['Apple', 'Banana', 'Mango', 'Melon'],
            filterText: ''
          }
        },
        computed: {
          filteredFruits() {
            return this.fruits.filter( el => {
              return el.match(this.filterText)
            })
          }
        },
        created() {
          console.log('fruitMixin: created')
        }
      }

    -------- Footer.vue -----------------------------

      <template>
        <div>
          <input v-model='filterText'>
          <ul>
            <li v-for='fruit in filteredFruits'>{{ fruit }}</li>
          </ul>
        </div>
      </template>

      <script>
        import { fruitMixin } from './fruitMixin'

        export default   {
          mixins: [fruitMixin],
          created() {
            console.log('Footer: created')
          }
        }
      </script>


-------------------------------------------------------------------------------
060) mixin - global

    Jest odpalany automatycznie przy każdym komponencie,
    więc w praktyce używa się go tylko przy tworzeniu pluginów:

      import Vue from 'vue'
      import App from './App.vue'

      Vue.mixin({
        created() {
          console.log('Global Mixin - created Hook')
        }
      })

      new Vue({
        render: h => h(App)
      }).$mount('#app')

-------------------------------------------------------------------------------
063) routing - hello world

      Udemy Schwartsmuller Vue #223-225

      tag <router-view> wyświetla zawartość aktualnej route'y
      W chwili odpalenia strony, będzie to root route: /

      a) yarn add vue-router

      b) zrobić plik z routami: routes.js

      c) w main.js zaimportować vue-router, zarejestrować router i routy

      d) wbić do sekcji <template> pliku App.vue:
          <router-view></router-view>

      Domyślnym trybem formatu adresu jest 'hash', stąd

        http://localhost:8080/#/jakasRouta

      Można to zmienić, ustawiając mode: 'history'. Wtedy adres =

        http://localhost:8080/jakasRouta

    ------------ main.js ----------------------------------

      import Vue from 'vue'
      import VueRouter from 'vue-router'
      import App from './App.vue'
      import { routes } from './routes'

      Vue.use(VueRouter)

      const router = new VueRouter({
        routes,
        mode: 'history'
      })

      new Vue({
        router,
        render: h => h(App)
      }).$mount('#app')

    ------------ routes.js ----------------------------------

      import Kumpo from './components/Kumpo/Kumpo.vue'
      import Counter from './components/Counter/Counter.vue'
      import Colors from './components/Colors/Colors.vue'

      export const routes = [
        { path: '', component: Kumpo },
        { path: '/counter', component: Counter },
        { path: '/colors', component: Colors }
      ]

    ------------ App.vue ----------------------------------

      <template>
        <router-view></router-view>
      </template>

    ------------ Kumpo.vue ----------------------------------

      <template>
        <h2>Kumpo</h2>
      </template>

    ------------ Colors.vue ----------------------------------

      <template>
        <h2>Colors</h2>
      </template>

    ------------ Counter.vue ----------------------------------

      <template>
        <h2>Counter</h2>
      </template>

-------------------------------------------------------------------------------
064) routing - links

      Udemy Schwartsmuller Vue #226

      ------------ main.js ----------------------------------

        import Vue from 'vue'
        import VueRouter from 'vue-router'
        import App from './App.vue'
        import { routes } from './routes'

        Vue.use(VueRouter)

        const router = new VueRouter({
          routes,
          mode: 'history'
        })

        new Vue({
          el: '#app',
          router,
          render: h => h(App)
         })

      ------------ routes.js ----------------------------------

        import Home from './Home'
        import Header from './Header'
        import Footer from './Footer'

        export const routes = [
          { path: '', component: Home },
          { path: '/header', component: Header },
          { path: '*', component: Footer }
        ]

      ------------ App.vue ----------------------------------

        <template>
          <div>
            <router-view></router-view>
            <router-link to="/" active-class='active'><a>Home</a></router-link>
            <router-link to="/header" active-class='active'><a>Header</a></router-link>
          </div>
        </template>

      ------------ Home.vue ----------------------------------

        <template>
          <h1>Home</h1>
        </template>

      ------------ Header.vue ----------------------------------

        <template>
          <h1>Header</h1>
        </template>

      ------------ Footer.vue ----------------------------------

        <template>
          <h2>Footer</h2>
        </template>

-------------------------------------------------------------------------------
065) routing - navigating

      Udemy Vue (Schwartsmuller) - #228 Code Imperative Navigation

      By po kliku w batona przenieść się do innej strony, użyj metody
        this.$router.push('/header')

      ------------ Footer.vue ----------------------------------

      <template>
        <button @click='gotoHeader'>Go To Header</button>
      </template>

      <script>
        export default   {
          methods: {
            gotoHeader() {
              this.$router.push('/header')
            }
          }
        }
      </script>

-------------------------------------------------------------------------------
066) routing - z parametrem

      Udemy Schwartsmuller Vue: #229-230 Fetching and Using Route Parameters

      a) route'a

          export const routes = [
            { path: '/footer/:id', component: Footer },
          ]

      b) odebranie parametru na stronie docelowej:

          data() {
            return {
              id: this.$route.params.id
            }
          }

      c) opcjonalnie link z parametrem (albo wbicie ścieżki z ręki)

          <router-link to="/footer/10"

      ------------ main.js -------------------------------------

        import Vue from 'vue'
        import VueRouter from 'vue-router'
        import App from './App.vue'
        import { routes } from './routes'

        Vue.use(VueRouter)

        const router = new VueRouter({
          routes,
          mode: 'history'
        })

        new Vue({
          router,
          render: h => h(App)
        }).$mount('#app')


      ------------ routes.js -------------------------------------

        import Kumpo from './components/Kumpo/Kumpo'
        import Counter from './components/Counter/Counter'
        import Colors from './components/Colors/Colors'

        export const routes = [
          { path: '', component: Kumpo },
          { path: '/counter', component: Counter },
          { path: '/counter:id', component: Counter },
          { path: '/colors', component: Colors },
          { path: '*', component: Kumpo },
        ]

      ------------ App.vue -------------------------------------

        <template>
          <div>
            <router-view/><br>
            <router-link to='/'><a>Kumpo</a></router-link><br>
            <router-link to='/counter'><a>Counter</a></router-link><br>
            <router-link to='/colors'><a>Colors</a></router-link>
          </div>
        </template>

      ------------ Kumpo.vue ----------------------------------

        <template>
          <div>Kumpo</div>
        </template>

      ------------ Colors.vue ----------------------------------

        <template>
          <div>Colors</div>
        </template>

      ------------ Counter.vue ----------------------------------

        <template>
          <div>
            Counter
            <h2>Przekazane Id: {{ id }}</h2>
          </div>
        </template>

        <script>
          export default {
            data() {
              return {
                id: this.$route.params.id
              }
            }
          }
        </script>

-------------------------------------------------------------------------------
067) routing - watch route

      Udemy Schwartsmuller Vue: #231 Changes in Route Parameters

      Ponieważ wyświetlanie parametru routy odbywa się cały czas w tym samym
      komponencie, zmiana parametru routy nie sprawia, że jest on na nowo renderowany

      Czyli, w poniższym przykładzie, nawet klikając na linki: Footer 1 i Footer2
      powodujące zmianę parametru z:

      http://localhost:8080/footer/1  na

      http://localhost:8080/footer/2

      ..wyświetlany będzie cały czas '1'

      Rozwiązaniem jest ustawienie watcha na parametr routy:

        watch: {
          '$route'(to, from) {
            this.id = to.params.id
          }
        }

      ------------ main.js ----------------------------------

          import Vue from 'vue'
          import VueRouter from 'vue-router'
          import App from './App.vue'
          import { routes } from './routes'

          Vue.use(VueRouter)

          const router = new VueRouter({
            routes,
            mode: 'history'
          })

          new Vue({
            el: '#app',
            router,
            render: h => h(App)
          })


      ------------ routes.js ----------------------------------

          import Home from './home'
          import Header from './header'
          import Footer from './footer'

          export const routes = [
            { path: '', component: Home },
            { path: '/header', component: Header },
            { path: '/footer/:id', component: Footer },
            { path: '*', component: Footer }
          ]

      ------------ App.vue ----------------------------------

        <template>
          <div>
            <ul>
              <router-link to="/footer/1" tag='li' active-class='active' exact><a>Footer 1</a></router-link>
              <router-link to="/footer/2" tag='li' active-class='active' exact><a>Footer 2</a></router-link>
              <router-link to="/" tag='li' active-class='active'><a>Colors</a></router-link>
            </ul>
            <router-view></router-view>
          </div>
        </template>

      ------------ Footer.vue ----------------------------------

        <template>
          <div>
            <button @click='gotoHeader'>Go To Header</button>
            <h3>Loaded Id: {{ id }}</h3>
          </div>
        </template>

        <script>
          export default   {
            watch: {
              '$route'(to, from) {
                this.id = to.params.id
              }
            },
            methods: {
              gotoHeader() {
                this.$router.push('./Header')
              }
            }
          }
        </script>

-------------------------------------------------------------------------------
068) routing - named routes

      Udemy Schwartsmuller Vue #235 Named Routes

      Aby w batonie nie wbijać całej ścieżki, można w jej definicji
      dodać parametr 'name',

        export const routes = [
          { path: '/footer/:id', component: Colors, name: 'c1' },
        ]

      .. a potem nim się posłużyć

      <router-link to="{ name: 'col'}">GoTo Id</router-link>

    ------------- routes.js -------------------------------

      import Home from './home'
      import Header from './header'
      import Footer from './footer'
      import Colors from './colors'

      export const routes = [
        { path: '', component: Home },
        { path: '/header', component: Header },
        { path: '/footer/', component: Footer },
        { path: '/footer/:id', component: Colors, name: 'c1' },
        { path: '*', component: Footer }
      ]

    ------------- App.vue -------------------------------

      <template>
        <div>
          <router-view></router-view>
          <router-link to="/" tag='li' active-class='active' exact><a>Home</a></router-link>
          <router-link to="/footer" tag='li' active-class='active' exact><a>Footer</a></router-link>
          <router-link to="/footer/1" tag='li' active-class='active' exact><a>Footer 1</a></router-link>
          <router-link to="/footer/2" tag='li' active-class='active' exact><a>Footer 2</a></router-link>
        </div>
      </template>

    ------------- Footer.vue -------------------------------

      <template>
        <div>
          <h3>Footer</h3>
          <router-link :to="{ name: 'c1'}">GoTo Colors </router-link>
        </div>
      </template>

      <script>
        export default   {
          watch: {
            '$route'(to, from) {
              this.id = to.params.id
            }
          }
        }
      </script>

    ------------- Colors.vue -------------------------------

      <template>
        <h2>Colors</h2>
      </template>

-------------------------------------------------------------------------------
069) routing - query parameters

      By przesłać query parameters jak w poniższej routcie:
         http://localhost:8080/?locale=en&q=100

      trzeba użyć:

          <router-link
            tag='button'
            :to="{ name: 'sf1', query: { locale: 'en', q: 100 }}">
            GoTo Id
          </router-link>

      Parametry odbiera się w komponencie docelowym, przez:

        <h3>locale: {{ $route.query.locale }} </h3>

      ------------------- main.js ---------------------------------

        import Vue from 'vue'
        import VueRouter from 'vue-router'
        import App from './App.vue'
        import { routes } from './routes'

        Vue.use(VueRouter)

        const router = new VueRouter({
          routes,
          mode: 'history'
        })

        new Vue({
          el: '#app',
          router,
          render: h => h(App)
        })

      ------------------- routes.js ---------------------------------

        import Home from './home'
        import Header from './header'
        import Footer from './footer'
        import Colors from './colors'

        export const routes = [
          { path: '', component: Home },
          { path: '/header', component: Header },
          { path: '/footer/', component: Footer },
          { path: '/colors', component: Colors, name: 'colors' },
          { path: '*', component: Footer }
        ]

      -------------------  App.vue ---------------------------------

        <template>
          <div>
            <router-view></router-view>
            <router-link to="/" tag='li' active-class='active' exact><a>Home</a></router-link>
            <router-link to="/footer" tag='li' active-class='active' exact><a>Footer</a></router-link>
          </div>
        </template>


      -------------------  Footer.vue ---------------------------------

        <template>
          <router-link tag='button' :to="{ name: 'colors', query: { locale: 'en', q: 100 }}">
            Send query
          </router-link>
        </template>

      -------------------  Colors.vue ---------------------------------

        <template>
          <div>
            <h3>locale: {{ $route.query.locale }} </h3>
            <h3>q: {{ $route.query.q }} </h3>
          </div>
        </template>

-------------------------------------------------------------------------------
070) routing - named router views

      Tag <router-view> pliku App, sluży do wyświetlania komponentu leżącego pod adresem route'y

        <router-view name='header-top'></router-view>
        <router-view></router-view>
        <router-view name='header-bottom'></router-view>

      W treści route'y (routes.js) podhacza się więc obiekt 'components',
      do którego wpisuje się wszystkie mające być wyświetlane tam komponenty

      export const routes = [
        { path: '', name: 'home', components: {
            default: Colors,
            'header-top': Header,
            'header-bottom': Footer
        }}
      ]

      ------------------- routes.js ---------------------------------

        import Home from './Home'
        import Header from './Header'
        import Footer from './Footer'

        export const routes = [
          { path: '', name: 'home', components: {
              default: Home,
              'header-top': Header,
              'header-bottom': Footer
          }},

          { path: '/header', component: Header },
          { path: '/footer', component: Footer, name: 'foo' },
        ]

      ------------------- App.vue ---------------------------------

        <template>
          <div>
            <router-view></router-view>
            <router-link to="/footer" tag='li' active-class='active'><a>Footer</a></router-link>
            <router-link to="/" tag='li' active-class='active'><a>Colors</a></router-link>
            <router-view name='header-top'></router-view>
            <router-view name='header-bottom'></router-view>
          </div>
        </template>

        <script>
          import Home from './Home.vue'
          import Header from './Header.vue'
          import Footer from './Footer.vue'
        </script>

      ------------------- Home.vue ---------------------------------

        <template>
          <h2>Home</h2>
        </template>

      ------------------- Header.vue ---------------------------------

        <template>
          <h3>Header</h3>
        </template>

      ------------------- Footer.vue ---------------------------------

        <template>
          <h3>Footer</h3>
        </template>

-------------------------------------------------------------------------------
071) routing - redirect

      Po kluczu 'redirect', można podać ścieżkę lub jej nazwę:

      { path: '/naglowek', redirect: '/header' }
      { path: '/main', redirect: { name: 'home'} }

    ---------- routes.js -----------------------------------------

      export const routes = [
        { path: '/header', component: Header },
        { path: '/footer', component: Footer, name: 'foo' },
        { path: '/naglowek', redirect: '/header' },
        { path: '/main', redirect: { name: 'home'}}
      ]

-------------------------------------------------------------------------------
072) routing - catchAll

      Ruta z wildcardem, najlepiej by była ostatnia (konwencja), ale nie musi

      { path: '*', redirect: { name: 'home'}}

    ---------- routes.js -----------------------------------------

      export const routes = [
        { path: '/header', component: Header },
        { path: '/footer', component: Footer, name: 'foo' },
        { path: '/naglowek', redirect: '/header' },
        { path: '/main', redirect: { name: 'home'}}
        { path: '*', redirect: { name: 'home'}}
      ]

-------------------------------------------------------------------------------
073) routing - kontrola dostępu: beforeEach, beforeEnter i beforeRouteEnter

      Router ma 3 hooki kontrolujące uprawnienia dostępu do route:

        a) globalny: 'router.beforeEach' - w main.js
        b) pośredni: 'beforeEnter' - w routes.js
        c) lokalny: 'beforeRouteEnter' - w kumponencie

      Każdy hak musi się kończyć metodą:

        a) next() - routing wczyta nową stronę
        b) next(false) albo brak next() - routing nie wczyta nowej strony
        c) next('/') - routing zrobi redirecta

    -------------- main.js ---------------------------------

      import Vue from 'vue'
      import VueRouter from 'vue-router'
      import App from './App.vue'
      import { routes } from './routes'

      Vue.use(VueRouter)

      const router = new VueRouter({
        routes,
        mode: 'history'
      })

      router.beforeEach((to, from, next) => {
        console.log('beforeEach - main')
        console.log('from.path', from.path)
        console.log('to.path', to.path)
        console.log('__________________________')
        next()
      })

      new Vue({
        el: '#app',
        router,
        render: h => h(App)
      })


    -------------- routes.js ---------------------------------

      import Home from './home'
      import Header from './header'
      import Footer from './footer'

      export const routes = [
        { path: '', component: Home },
        { path: '/home', component: Home },
        { path: '/header', component: Header },
        { path: '/footer', component: Footer, beforeEnter: (from, to, next) => {
          console.log('Inside /footer route')
          console.log('beforeEach - main')
          console.log('from.path', from.path)
          console.log('to.path', to.path)
          console.log('__________________________')
          next()
        }},
        { path: '*', component: Footer  }
      ]


    -------------- App.vue ---------------------------------

      <template>
        <div>
          <router-view></router-view>
          <router-link to="/" active-class='active'><a>Home</a></router-link>
          <router-link to="/header" active-class='active'><a>Header</a></router-link>
          <router-link to="/footer" active-class='active'><a>Footer</a></router-link>
        </div>
      </template>


    -------------- Home.vue ---------------------------------

      <template>
        <h1>Home</h1>
      </template>

    -------------- Header.vue ---------------------------------

      <template>
        <h1>Header</h1>
      </template>

    -------------- Footer.js ---------------------------------

      <template>
        <h1>Footer</h1>
      </template>

      <script>
        export default {
          beforeRouteEnter(to, from, next) {
            console.log('Inside Footer component')
            console.log('beforeEach - main')
            console.log('from.path', from.path)
            console.log('to.path', to.path)
            console.log('__________________________')

            const authorized = true
            authorized ? next() : next('/')
          }
        }
      </script>

-------------------------------------------------------------------------------
074) routing - kontrola wyjścia: beforeRouteLeave

    Udemy Schwartsmuller Vue #245 beforeRouteLeaveGuard

    Sprawdza czy pozwolić wyjść z obecnej route'y
    Pozostałe pliki jak w punkcie powyżej

    -------------- Footer.js ---------------------------------

      <template>
        <div>
          <h1>Footer: {{ confirmed }}</h1>
          <button @click='confirmed=true'>Confirm</button>
        </div>
      </template>

      <script>
        export default {
          data() {
            return {
              confirmed: false
            }
          },
          beforeRouteLeave(to, from, next) {
            if(this.confirmed) {
              next()
            }
            else {
              confirm('Are you sure ?') ? next() : next(false)
            }
          }
        }
      </script>

-------------------------------------------------------------------------------
075) routing - lazy loading

    Udemy Schwartsmuller Vue #246 Loading Routes Lazily

-------------------------------------------------------------------------------
080) vuex - hello world 1 (props)

    Udemy Schwartsmuller Vue #252 Using the Centralized State

    ------------ main.js ---------------------------------------

      import Vue from 'vue'
      import App from './App.vue'

      new Vue({
        el: '#app',
        render: h => h(App)
      })

    ------------ App.vue ---------------------------------------

      <template>
        <div>
          <result :counter='counter'></result>
          <counter @updated='counter += $event'></counter>
        </div>
      </template>

      <script>
        import Counter from './Counter.vue'
        import Result from './Result.vue'

        export default {
          components: {
            counter: Counter,
            result: Result
          },
          data() {
            return {
              counter: 0
            }
          }
        }
      </script>

    ------------ Counter.vue ---------------------------------------

      <template>
        <div>
          <button @click='inc'>Inc</button>
          <button @click='dec'>Dec</button>
        </div>
      </template>

      <script>
        export default {
          methods: {
            inc() {
              this.$emit('updated', 1)
            },
            dec() {
              this.$emit('updated', -1)
            }
          }
        }
      </script>

    ------------ Result.vue ---------------------------------------

      <template>
        <h1>Counter is: {{ counter }}</h1>
      </template>

      <script>
        export default {
          props: ['counter']
        }
      </script>

-------------------------------------------------------------------------------------------
081) vuex - hello world 2 (vuex)

    Udemy Schwartsmuller Vue #252 Using the Centralized State

    a) stworzyć plik /store/store.js

    b) zarejestrować go w main.js

    c) stworzyć komponenty zmieniające stan zmiennej ze store'a

    d) stworzyc App.vue prezentujący stan zmiennej ze store'a

    e) musi być computed; methods nie da rady

          computed: {
            counter() {
              return this.$store.state.counter
            }
          }

    ------------ /store/store.js -------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        state: {
          counter: 0
        }
      })

    ------------ main.js ---------------------------------------

      import Vue from 'vue'
      import App from './App.vue'
      import { store } from './store/store'

      new Vue({
        el: '#app',
        store,
        render: h => h(App)
      })

    ------------ App.vue ---------------------------------------

      <template>
        <div>
          <result></result>
          <counter></counter>
        </div>
      </template>

      <script>
        import counter from './Counter.vue'
        import result from './Result.vue'

        export default {
          components: {
            counter, result
          }
        }
      </script>

    ------------ Counter.vue ---------------------------------------

      <template>
        <div>
          <button @click='inc'>Inc</button>
          <button @click='dec'>Dec</button>
        </div>
      </template>

      <script>
        export default {
          methods: {
            inc() {
              this.$store.state.counter++
            },
            dec() {
              this.$store.state.counter--
            }
          }
        }
      </script>

    ------------ Result.vue ---------------------------------------

      <template>
        <h1>Counter is: {{ counter }}</h1>
      </template>

      <script>
        export default {
          computed: {
            counter() {
              return this.$store.state.counter
            }
          }
        }
      </script>

-------------------------------------------------------------------------------------------
082) vuex - getters

      Przeniesienie części logiki z komponentu do store'a

      W stosunku do wersji z punktu powyżej:
        a) dodaje się tylko sekcję getters w store.js
        b) używa gettersa w Result.vue

      ------------ /store/store.js -------------------------------

        import Vue from 'vue'
        import Vuex from 'vuex'

        Vue.use(Vuex)

        export const store = new Vuex.Store({
          state: {
            counter: 0
          },
          getters: {
            dblCounter(state) {
              return state.counter * 2
            }
          }
        })

      ------------ main.js ---------------------------------------

        import Vue from 'vue'
        import App from './App.vue'
        import { store } from './store/store'

        new Vue({
          el: '#app',
          store,
          render: h => h(App)
        })

      ------------ App.vue ---------------------------------------

        <template>
          <div>
            <result></result>
            <counter></counter>
          </div>
        </template>

        <script>
          import result from './Result'
          import counter from './Counter'

          export default {
            components: {
              result, counter
            }
          }
        </script>

      ------------ Counter.vue ---------------------------------------

        <template>
          <div>
            <button @click='inc'>Inc</button>
            <button @click='dec'>Dec</button>
          </div>
        </template>

        <script>
          export default {
            methods: {
              inc() {
                this.$store.state.counter++
              },
              dec() {
                this.$store.state.counter--
              }
            }
          }
        </script>

      ------------ Result.vue ---------------------------------------

        <template>
          <div>
           <h1>Wynik: {{ counter }} </h1>
           <h2>Podwójny: {{ dblCounter }} </h2>
          </div>
        </template>

        <script>
          export default {
            computed: {
              counter() {
                return this.$store.state.counter
              },
              dblCounter() {
                return this.$store.getters.dblCounter
              }
            }
          }
        </script>


-------------------------------------------------------------------------------------------
083) vuex - mapGetters

    Przy więcej niż 1 getterze, dubluje sie kod 'this.$store.getters'

      export default {
        computed: {
          result() {
            return this.$store.getters.doubleCounter
          },
          clicks() {
            return this.$store.getters.clicksCounter
          }
      }

    By tego uniknąć pomocna jest metoda mapGetters:

    ------------- Result.vue --------------

      <template>
        <div>
          <h1> Result: {{ doubleCounter }} </h1>
          <h2> Clicks: {{ clicksCounter }} </h2>
        </div>
      </template>

      <script>
        import { mapGetters } from 'vuex'

        export default {
          computed: {
            ...mapGetters([
              'doubleCounter', 'clicksCounter'
            ]),
            myComputedMetod() {

            }
          }
        }
      </script>

-------------------------------------------------------------------------------------------
084) vuex - mutations

      Podobnie jak scentralizowane zostały getry,
      centralizujemy w store.js swetry, czyli mutacje

      Mutację odpala się poleceniem commit:
        this.$store.commit('inc')

    ------------ store.js ---------------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        state: {
          counter: 0
        },
        getters: {
          doubleCounter(state) {
            return state.counter * 2
          },
          clicksCounter(state) {
            return state.counter + ' clicks'
          }
        },
        mutations: {
          inc(state) {
            state.counter++
          },
          dec(state) {
            state.counter--
          }
        }
      })

    ------------ main.js ---------------------------------------

      import Vue from 'vue'
      import App from './App.vue'
      import { store } from './store/store'

      new Vue({
        el: '#app',
        store,
        render: h => h(App)
      })

    ------------ App.vue ---------------------------------------

      <template>
        <div>
          <result></result>
          <counter></counter>
        </div>
      </template>

      <script>
        import counter from './Counter'
        import result from './Result'

        export default {
          components: {
            result, counter
          }
        }
      </script>

    ------------ Counter.vue ---------------------------------------

      <template>
        <div>
          <button @click='inc'>Inc</button>
          <button @click='dec'>Dec</button>
        </div>
      </template>

      <script>
        export default {
          methods: {
            inc() {
              this.$store.commit('inc')
            },
            dec() {
              this.$store.commit('dec')
            }
          }
        }
      </script>

    ------------ Result.vue ---------------------------------------

      <template>
        <div>
          <h1> Result: {{ doubleCounter }} </h1>
          <h2> Clicks: {{ clicksCounter }} </h2>
        </div>
      </template>

      <script>
        import { mapGetters } from 'vuex'

        export default {
          computed: {
            ...mapGetters([
              'doubleCounter', 'clicksCounter'
            ]),
            myComputedMetod() {

            }
          }
        }
      </script>

-------------------------------------------------------------------------------------------
085) vuex - actions

    Akcje służą do odpalania mutacji asynchronicznych
    Jeśli takie nie wystepują, można używać mutacji
    Jeśli występują mutacje synchroniczne i asynchroniczne,
    lepiej do wszystkich używać akcji

    a) dodaje się sekcję 'actions' do store.js:

        actions: {
          incCounter(context) {
            context.commit('incCounter')
          }

    b) w sekcji computed, komponentu, używa się składni
        this.$store.dispatch('nazwaAkcji')

        methods: {
          incCounter() {
            this.$store.dispatch('incCounter')
          }

    ------------ store.js ---------------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        state: {
          counter: 0
        },
        getters: {
          getCounter(state) {
            return state.counter
          },
          getDoubleCounter(state) {
            return state.counter * 2
          }
        },
        mutations: {
          incCounter(state) {
            state.counter++
          },
          decCounter(state) {
            state.counter--
          }
        },
        actions: {
          incCounter(context)
            context.commit('incCounter')
          },
          decCounter(context) {
            context.commit('decCounter')
          }
        }
      })

    ------------ main.js ---------------------------------------

      import Vue from 'vue'
      import App from './App.vue'
      import { store } from './store/store'

      new Vue({
        el: '#app',
        store,
        render: h => h(App)
      })

    ------------ App.vue ---------------------------------------

      <template>
        <div>
          <result></result>
          <counter></counter>
        </div>
      </template>

      <script>
        import result from './Result.vue'
        import counter from './Counter.vue'

        export default {
          components: {
            result, counter
          }
        }
      </script>


    ------------ Counter.vue ---------------------------------------

      <template>
        <div>
          <button @click='incCounter'>Inc</button>
          <button @click='decCounter'>Dec</button>
        </div>
      </template>


      <script>
        export default {
          methods: {
            incCounter() {
              this.$store.dispatch('incCounter')
            },
            decCounter() {
              this.$store.dispatch('decCounter')
            }
          }
        }
      </script>

    ------------ Result.vue ---------------------------------------

      <template>
        <div>
          <h1>Result: {{ getResult }}</h1>
          <h2>Dbl Result: {{ getDoubleResult }}</h2>
        </div>
      </template>

      <script>
        export default {
          computed: {
            getResult() {
              return this.$store.getters.getCounter
            },
            getDoubleResult() {
              return this.$store.getters.getDoubleCounter
            }
          }
        }
      </script>


-------------------------------------------------------------------------------------------
086) vuex - async actions

    Przykład zastosowania akcji asynchronicznych w akcjach

    ---------- store.js -----------------------------------------

    actions: {
      incCounter(context) {
        setTimeout(() => {
          context.commit('incCounter')
        }, 2000)
      },
      decCounter(context) {
        setTimeout(() => {
          context.commit('decCounter')
        }, 2000)
      }
    }

-------------------------------------------------------------------------------------------
087) vuex - action with payload

    Udemy Schwartsmuller Vue #62 Mapping Actions to Methods

    Metoda może zawierać parametr (tzw payload)
    Może nim być prymityw (ale tylko jeden), albo obiekt

    --------- Counter.vue ----------------------------------

      <template>
        <div>
          <button @click='inc({ step: 20, city: "Warsaw"})'>Inc</button>
          <button @click='dec'>Dec</button>
        </div>
      </template>

      <script>
        export default {
          methods: {
            inc(payload) {
              this.$store.dispatch('incCounter', payload)
            },
            dec() {
              this.$store.dispatch('decCounter')
            }
          }
        }
      </script>

    --------- store.js  ----------------------------------

      mutations: {
        incCounter(state, payload) {
          console.log('payload.city = ', payload.city)
          state.counter += payload.step
        }
      },
      actions: {
        incCounter(context, payload) {
          console.log('payload', payload)
          context.commit('incCounter', payload)
        }
      }

-------------------------------------------------------------------------------------------
088) vuex - modularyzacja

    Gettersy, mutacje i akcje można przenieść do osobnych plików

    ---------- store.js --------------------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'

      import * as actions from './actions'
      import * as mutations from './mutations'
      import * as getters from './getters'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        state: {
          counter: 0
        },
        getters,
        mutations,
        actions
      })


    ---------- getters.js --------------------------------------------

      export const getCounter = state => {
        return state.counter
      }

      export const getDoubleCounter = state => {
        return state.counter * 2
      }


    ---------- mutations.js --------------------------------------------

      export const incCounter = (state, payload) => {
        console.log('payload.city = ', payload.city)
        state.counter += payload.step
      }

      export const decCounter = state => {
        state.counter--
      }

    ---------- actions.js --------------------------------------------

      export const incCounter = (context, payload) => {
        console.log('payload', payload);
        context.commit('incCounter', payload)
      }

      export const decCounter = (context, payload) => {
        context.commit('decCounter')
      }

-------------------------------------------------------------------------------------------
089) vuex - moduły

    Jeśli store zawiera stany kilku różnych obiektów,
    można je podzielić na substory i przenieść do osobnych plików
    A potem zaimportować do sekcji modules: { } pliku store.js

    ---------- store.js --------------------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'
      import counter from './modules/counter'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        modules: {
          counter
        }
      })

    ---------- store/modules/counter.js --------------------------------------------

      const state = {
        counter: 0
      }

      const getters = {
        getCounter(state) {
          return state.counter
        },
        getDoubleCounter(state) {
          return state.counter * 2
        }
      }

      const mutations = {
        incCounter(state) {
          state.counter++
        },
        decCounter(state) {
          state.counter--
        }
      }

      const actions = {
        incCounter(context) {
          context.commit('incCounter')
        },
        decCounter(context) {
          context.commit('decCounter')
        }
      }

      export default {
        state, getters, mutations, actions
      }

-------------------------------------------------------------------------------------------
090) vuex - moduł z podziałem na pliki

    Store w module, można podzielić bardziej, tzn na osobne pliki
    zawierające poszczególne sekcje jak getters, mutations itd

    ---------- store.js --------------------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'
      import counter from './modules/counter'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        modules: {
          counter
        }
      })

    ---------- store/modules/counter.js --------------------------------------------

      import getters from './getters'

      const state = {
        counter: 0
      }

      const mutations = {
        incCounter(state) {
          state.counter++
        },
        decCounter(state) {
          state.counter--
        }
      }

      const actions = {
        incCounter(context) {
          context.commit('incCounter')
        },
        decCounter(context) {
          context.commit('decCounter')
        }
      }

      export default {
        state, getters, mutations, actions
      }

    ---------- store/modules/getters.js --------------------------------------------

      export default {
        getCounter(state) {
          return state.counter
        },
        getDoubleCounter(state) {
          return state.counter * 2
        }
      }

-------------------------------------------------------------------------------------------
091) vuex - Two-Way-Binding v-model and Vuex

    Udemy Schwartsmuller Vue #264 Two-Way-Binding v-model and Vuex

    Ogarnianie stanu przy input boksie wymaga posłużenia się metodą
    get i set w metodzie sekcji computed:

      computed: {
        value: {
          get() {
            return this.$store.getters.value
          },
          set(value) {
            this.$store.dispatch('updateValue', value)
          }
        }
      }

    ---------- main.js ---------------------------------------------

      import Vue from 'vue'
      import App from './App.vue'
      import { store } from './store/store'

      new Vue({
        el: '#app',
        store,
        render: h => h(App)
      })

    ---------- store.js ---------------------------------------------

      import Vue from 'vue'
      import Vuex from 'vuex'

      Vue.use(Vuex)

      export const store = new Vuex.Store({
        state: {
          value: 0
        },
        getters: {
          value(state) {
            return state.value
          }
        },
        mutations: {
          updateValue(state, payload) {
            state.value = payload
          }
        },
        actions: {
          updateValue(context, payload) {
            context.commit('updateValue', payload)
          }
        }
      })

    ---------- App.vue ---------------------------------------------

      <template>
        <div>
          <input v-model='value'>
          {{ value }}
        </div>
      </template>

      <script>
        export default {
          computed: {
            value: {
              get() {
                return this.$store.getters.value
              },
              set(value) {
                this.$store.dispatch('updateValue', value)
              }
            }
          }
        }
      </script>

-------------------------------------------------------------------------------
092) vuex - ajax

    Problem 1(apka 'koszyk2'): po wyświetleniu tabeli, metoda:

       created() {
         this.$store.dispatch('addAllShops')
       }

    .. powinna odpalać dispatcha do actions: addAllShops,
    który powinien wysłać ściagnięte dane komitem

        addAllShops(context) {
          axios
            .get('http://localhost:3000/biedry')
            .then(res => {
              context.commit('ADD_ALL_SHOPS', res.data)
            })
            .catch(err => console.log(err))
        },

    .. do mutations: 'ADD_ALL_SHOPS', który powinien zmutować stan:

        mutations: {
          ADD_ALL_SHOPS(state, payload) {
            state.allShops = payload
          }

    Wszystko ww działało i VueDevTools pokazywał getters.getAllShops zawierajacy dane sklepów
    ale sklepy się w tabeli nie wyświetlały.

    Pomogło:
      a) dodanie do ShopsTable metody computed:

          computed: {
            items() {
              console.log('this.$store.getters.getAllShops', this.$store.getters.getAllShops)
              return this.$store.getters.getAllShops
            }
          }

      b) ustawienie items jako wyniku funkcji items() umieszczonej w computed:

          data() {
            return {
              items: items() || []
            }
          }

    Problem 2(apka 'koszyk2'): mimo wyświetlenia tabeli z danymi, ignorowane były
    ustawienia kolumn zawarte w tablicy 'fields' (bootstrap-vue).
    Wyświetlany był komunikat, by uczynić 'fields' reaktywnymi.

    Pomogło:

      a) ShopsTable.vue - dopisanie do obiektu computed, funkcji 'fields':

          computed: {
            (..)
            fields() {
              return this.$store.getters.getFields
            }
          }

      b) store.js - dopisanie do obiektu state:
          i) subobiektu 'fields'
          ii) gettersa 'getFields'

          state: {
            (..)
            fields: [
              'index',
              {
                key: "shopName",
                label: "Sklep",
                sortable: true
              }
              (..)
            ]
          },
          getters: {
            getFields(state) {
              return state.fields
            }

  --------- ShopsTable.vue ---------------------

    <template>
      <div>
        <b-container fluid>
          <b-row>
            <b-table striped hover bordered :items="items" :fields="fields">

              <template slot="index" slot-scope="data">{{ data.index + 1 }}</template>
              <template slot="total" slot-scope="data">{{ data.value * 100 }}</template>

              <span slot="google" slot-scope="data" v-html="data.value">{{ data.value }}</span>
              <span slot="jakd" slot-scope="data" v-html="data.value">{{ data.value }}</span>
              <span slot="gmaps" slot-scope="data" v-html="data.value">{{ data.value }}</span>

            </b-table>
          </b-row>
        </b-container>
      </div>
    </template>

    <script>
    import axios from 'axios'

    export default {
      created() {
        this.$store.dispatch('addAllShops')
      },
      computed: {
        items() {
          console.log('this.$store.getters.getAllShops', this.$store.getters.getAllShops)
          return this.$store.getters.getAllShops
        },
        fields() {
          console.log('this.$store.getters.getFields', this.$store.getters.getFields)
          return this.$store.getters.getFields
        }
      },
      data() {
        return {
          items: items() || []
        }
      }
    }
    </script>

  --------- store.js ---------------------

    import Vue from 'vue'
    import Vuex from 'vuex'
    import axios from 'axios'
    import { filteredShops } from '../components/search/filteredShops'

    Vue.use(Vuex)

    export const store = new Vuex.Store({
      state: {
        allShops: [],
        selectedShops: [],
        homeGPS: {},
        fields: [
          'index',
          {
            key: "shopName",
            label: "Sklep",
            sortable: true
          },
          {
            key: "address",
            label: "Adres",
            sortable: true
          },
         (... 10 innych pól)
        ]
      },
      getters: {
        getAllShops(state) {
          return state.allShops
        },
        getFields(state) {
          return state.fields
        },
      },
      mutations: {
        ADD_ALL_SHOPS(state, payload) {
          state.allShops = payload
        },
      },
      actions: {
        addAllShops(context) {
          axios
            .get('http://localhost:3000/biedry')
            .then(res => {
              context.commit('ADD_ALL_SHOPS', res.data)
            })
            .catch(err => console.log(err))
        },

-------------------------------------------------------------------------------------------
093) vuex-persistedstate

      https://codesandbox.io/s/80k4m2598?autoresize=1
      https://github.com/robinvdvleuten/vuex-persistedstate

      Pamięta wprowadzony stan, mimo refresza strony (F5).
      Zamiast local storage może używać cookies

      vuex-persistedstate

   ------ index.html ------------------------------

    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8">
        <title>koszyk2</title>
      </head>
      <body>
      <div id="app">
        <p>{{ count }}</p>
        <p>
          <button @click="increment">+</button>
          <button @click="decrement">-</button>
        </p>
        <small>
          Check out your localStorage to see the updates.
        </small>
      </div>

      <script src="/dist/build.js"></script>


      </body>
    </html>

   ------ store.js ------------------------------

    import Vue from 'vue'
    import Vuex from 'vuex'
    import createPersistedState from 'vuex-persistedstate'

    Vue.use(Vuex)

    const store = new Vuex.Store({
      state: {
        count: 0
      },
      plugins: [createPersistedState()],
      mutations: {
        increment: state => state.count++,
        decrement: state => state.count--
      }
    });


-------------------------------------------------------------------------------------------
094) vuex - wydzielenie ajaksów ze store'a do pliku zewn

     Wg best practises ajaxy powinny być w storze.
     Ale przez nie store puchnie niemiłosiernie
     Dlatego dobrze je wywalić do pliku zewn

     Ważne by wyłać funkcję, jako jeden z parametróe przekazując context
     Inaczej, context.commit nie będzie się miał jak wykonać

   --------- store.js --------------------------------------

    import Vue from 'vue'
    import Vuex from 'vuex'
    import { fields } from '../data/data'
    import { ajaxAddAllShops, ajaxFindSelectedShops } from '../services/ajax'

    Vue.use(Vuex)

    export const store = new Vuex.Store({
      state: {
        allShops: [],
        selectedShops: [],
        homeGPS: {},
        items:[],
        fields: []
      },
      getters: {
        getAllShops(state) {
          return state.allShops
        },
        getItems(state) {
          return state.items
        },
        getFields(state) {
          return state.fields
        },
        getHomeGPS(state) {
          return state.homeGPS
        }
      },
      mutations: {
        ADD_ALL_SHOPS(state, payload) {
          state.allShops = payload
        },
        FIND_SELECTED_SHOPS(state, shopsInRadius) {
          state.allShops = shopsInRadius
        },
        GET_FIELDS(state, selectedFields) {
          console.log('GET_FIELDS: selectedFields', selectedFields)
          state.fields = selectedFields
        }
      },
      actions: {
        addAllShops(context) {
          ajaxAddAllShops(context)
        },
        findSelectedShops(context, homeData) {
          ajaxFindSelectedShops(context, homeData)
        },
        getFields(context, stocksSelected) {
          const stocksSelectedFull = ['shopName', 'address', 'google','jakd', 'gmaps'].concat(stocksSelected)
          const selectedFields = fields.filter(el => {
            return stocksSelectedFull.includes(el.key)
          })
          context.commit('GET_FIELDS', selectedFields)
        }
      }
    })

   --------- /src/services/ajax.js --------------------------------------

    import axios from 'axios'
    import { filteredShops } from './filteredShops'

    export const ajaxAddAllShops = context => {
      axios
      .get('http://localhost:3000/biedry')
      .then(res => {
        context.commit('ADD_ALL_SHOPS', res.data)
      })
      .catch(err => console.log(err))
    }

    export const ajaxFindSelectedShops = (context, homeData) => {
      const key = '224e8e01cf8f43a0aabb1b68341904a1'
      const encodedAddress = encodeURI(homeData.street + ' ' + homeData.streetNumber + ', ' + homeData.city)
      const url = 'https://api.opencagedata.com/geocode/v1/json?q=' + encodedAddress + '&key=' + key + '&language=pl&pretty=1'

      axios.get(url)
        .then(res => {
          const homeGPS = {
            lat: res.data.results[0].geometry.lat,
            lon: res.data.results[0].geometry.lng,
            radius: homeData.radius
          }

        const shopsInRadius = filteredShops(homeData.shops, homeGPS)
        context.commit('FIND_SELECTED_SHOPS', shopsInRadius)
        })
        .catch(err => console.log('My error: ', err))
    }

-------------------------------------------------------------------------------------------
095) vuex - wydzielenie templatki do pliku zewn (CLI 3)

      Trzeba tylko pamiętać, by wywalić z pliku html tagi <template>
      by się nue dublowały z tym tagiem w pliku .vue

   ------- ShopsTable.vue --------------------------------------

      <template src="./ShopsTable.html"></template>

      (..)

   ------- ShopsTable.html --------------------------------------

      <div>
        <b-container fluid>
          <b-row>
            <b-table striped hover bordered :items="items" :fields="fields">

              <template slot="index" slot-scope="data">{{ data.index + 1 }}</template>
              <template slot="total" slot-scope="data">{{ data.value * 100 }}</template>

              <span slot="google" slot-scope="data" v-html="data.value">{{ data.value }}</span>
              <span slot="jakd" slot-scope="data" v-html="data.value">{{ data.value }}</span>
              <span slot="gmaps" slot-scope="data" v-html="data.value">{{ data.value }}</span>

            </b-table>
          </b-row>
        </b-container>
      </div>

-------------------------------------------------------------------------------------------
096) vuex - mapState

      forum.vuejs.org/t/vuex-mapgetters-vs-mapstate/18447/3
      vuex.vuejs.org/guide/getters.html

      Przy użyciu metody mapState, gettery zastąpić można zwracaniem funkcji state'a

      Zamiast:
        devs() {
          return this.$store.getters.readDevs
        },

      .. można użyć:
           devs: state => state.devs,


      Accessing a state value directly this.$store.state.myList or mapState(['myList'])
      is no different than accessing a data property on a component. Nothing wrong with this.
      This is when you need a straight value.

      Getters are computed properties. They are mainly used for derived values based on other values.
      Again much like computed properties on a component. There is no major benefit to use getters
      if you are just doing a straight one to one value in a store.
      In fact, you may never need to use Getters if all you need are straight values out of your store.

      Czyli, gettersy jako sekcja w storze mają sens wtedy jeśli wartość ze state'a, potrzebuje dodatkowej obróbki, np:

       Lets say you have an array of integers, and you want a getter that provides the sum value of that array.
       You can do that in a getter and derive your value from your list.

       Whenever the list updates, so does that getter on the fly.
       But if you just want to access your array straight up, just do mapState.

        getters: {
          readDevs: state => state.devs + state.DevsNaUrlopach - stateDevsNaSzkoleniach
        },

      Jeśli taka obróbka nie jest potrzebna, a chodzi tylko o zwrócenie wartości zmiennej state'a,
      nie rób ww sekcji getters w storze, a tylko w sekcji copmuted komponentu, pobierz wartość ww zmiennej

      Jeśli w komponencie, niektóre gettery są w metodach, przesuń je do sekcji computed
      W sekcji copmuted są tylko wartości podlegające obliczeniom, a więc:

        formTitle() {
          return 'Developer Data'
        },

      .. nie ma sensu. Przenieś go do data(), jako formTitle: 'Developer Data'

    ----------- Kumpo.vue - bez mapState -------------------------

    computed: mapState ({
      devs() {
        return this.$store.getters.readDevs
      },

      formTitle() {
        return 'Developer Data'
      },

      dialog() {
        return this.$store.getters.getOpenDialog || false
      },

      progressBar() {
        return this.$store.getters.getProgressBar
      },
    }),

    ----------- Kumpo.vue - mapState -------------------------

    <script>
    import { mapState } from 'vuex'

    computed: mapState ({
      devs: state => state.devs,
      formTitle: 'Developer Data',
      dialog: state => state.openDialog || false,
      progressBar: state => state.progressBar
    }),


-------------------------------------------------------------------------------
097) bootstrap-vue - tips

      a) można używać flexa w wersji bootstrap:

          https://getbootstrap.com/docs/4.0/utilities/flex/

        .. dodając klasę z nim do kontrolki:
          <b-form-checkbox-group
            class='d-flex justify-content-md-between'>

-------------------------------------------------------------------------------
098) bootstrap-vue  hello world

    https://bootstrap-vue.js.org/docs/components/layout

    tuba: Bootstrap with Vue.js

    a) stwórz nowy projekt:
        vue init webpack-simple nazwaProjektu

    b) do main.js wklej:

        import BootstrapVue from 'bootstrap-vue'
        import 'bootstrap/dist/css/bootstrap.css'
        import 'bootstrap-vue/dist/bootstrap-vue.css'

        Vue.use(BootstrapVue)

    c) zrób App.vue:

        ctrl + shift + p: 'lorem' > paragraph

        <template>
          <div>
            <b-container class="bv-example-row">
              <b-row>
                <b-col>Reprehenderit sint anim cupidatat et aliqua duis. Incididunt ad cupidatat nostrud excepteur qui veniam sint non enim ad laboris. Aliquip velit do ex culpa cupidatat. Ad proident laborum duis non consectetur magna nulla quis nostrud commodo enim adipisicing sunt. Lorem sunt cupidatat in laboris aliquip culpa sit do. Nulla proident fugiat magna laboris occaecat duis est nulla.</b-col>
                <b-col>Reprehenderit sint anim cupidatat et aliqua duis. Incididunt ad cupidatat nostrud excepteur qui veniam sint non enim ad laboris. Aliquip velit do ex culpa cupidatat. Ad proident laborum duis non consectetur magna nulla quis nostrud commodo enim adipisicing sunt. Lorem sunt cupidatat in laboris aliquip culpa sit do. Nulla proident fugiat magna laboris occaecat duis est nulla.</b-col>
                <b-col>Reprehenderit sint anim cupidatat et aliqua duis. Incididunt ad cupidatat nostrud excepteur qui veniam sint non enim ad laboris. Aliquip velit do ex culpa cupidatat. Ad proident laborum duis non consectetur magna nulla quis nostrud commodo enim adipisicing sunt. Lorem sunt cupidatat in laboris aliquip culpa sit do. Nulla proident fugiat magna laboris occaecat duis est nulla.</b-col>
              </b-row>
            </b-container>
          </div>
        </template>

    d) odpal: yarn dev

    e) na ekranie będą idące od góry 3 kolumny tekstu
       Możesz dodać ww linie <b-col>

-------------------------------------------------------------------------------------------
099)  bootstrap-vue - import wybranych kawałków biblioteki

      https://bootstrap-vue.js.org/docs/

      If you would like to only pull in a specific component or set of components, you can do this by directly importing those components.

      To cherry pick a component/directive, start by importing it in the file where it is being used:

      import bModal from 'bootstrap-vue/es/components/modal/modal'
      import bModalDirective from 'bootstrap-vue/es/directives/modal/modal'
      Then add it to your component definition:

      Vue.component('my-component', {
          components: {
              'b-modal': bModal
          },
          directives: {
              'b-modal': bModalDirective
          }
          // ...
      })
      Or register them globally:

      Vue.component('b-modal', bModal);
      Vue.directive('b-modal', bModalDirective);

-------------------------------------------------------------------------------------------
100) bootstrap-vue - szerokości kolumn, marginesy i paddingi

        https://bootstrap-vue.js.org/docs/reference/spacing-classes

        Przy responsywnych szerokościach kolumn, przez: offset-md="liczba"
        <b-col md="4" offset-md="2">Tekst 1</b-col>

        Przykłady:

        .. class="mt-3 pb-2"

        mt-3 = margines top = 3 (1 spacer)
        mx-5 = margines left i right = 5 (1.5 spacera)

        pb-2 = padding bottom = 2 (0.5 spacera)
        pr-4 = padding right = 4 (1.5 spacera)

        Klasy i paddingi tworzone są w formacie:

         { property } { sides } - { size } - dla xs  i
         { property } { sides } - { breakpoint } - { size } dla sm, md, lg i xl

        Where property is one of:

        m - for classes that set margin
        p - for classes that set padding

        Gdzie margin lub padding jest:

        t - top
        b - bottom
        l - left
        r - right
        x - left and right
        y - top and bottom

        blank - for classes that set a margin or padding on all 4 sides of the element,

        rozmiar:

        0 - 0
        1 - $spacer * .25
        2 - $spacer * .5
        3 - $spacer * 1
        4 - $spacer * 1.5
        5 - $spacer * 3



-------------------------------------------------------------------------------------------
101) bootstrap-vue - layout and grid: container

      https://bootstrap-vue.js.org/docs/components/layout

      <b-container>
        <b-row>
          <b-col>Tekst 1</b-col>
          <b-col>Tekst 2</b-col>
          <b-col>Tekst 3</b-col>
        </b-row>

        <b-row>
          <b-col>Tekst 4</b-col>
          <b-col>Tekst 5</b-col>
          <b-col>Tekst 6</b-col>
        </b-row>

      </b-container>

      <b-container> - podstawowy i wymagany element Bootstrap

      <b-container> ustawia marginesy, czyli po pustej kolumnie z lewej i prawej
      <b-container fluid> bez marginesów; 100% szerokości

      Fixed width container, based on viewport breakpoints:
        <b-container> </b-container>

      Fluid container which is always 100% width, regardless of viewport breakpoint:
        <b-container fluid> </b-container>

-------------------------------------------------------------------------------------------
102) bootstrap-vue - layout and grid: row i column

      https://bootstrap-vue.js.org/docs/components/layout

      <b-container>
        <b-row>
          <b-col>Tekst 1</b-col>
          <b-col>Tekst 2</b-col>
          <b-col>Tekst 3</b-col>
        </b-row>
      </b-container>

      <b-row no-gutters> - usuwa paddinga między kolumnami
      <b-form-row> - mniejszy padding między kolumnami

      Treść ma być w <b-col> i tylko one mogą być dziećmi <b-row>

      <b-col cols="3"> - określa szerokość kolumny
      <b-col></b-col> - wstawia pustą kolumnę


-------------------------------------------------------------------------------------------
103) bootstrap-vue - layout and grid: offset

      https://bootstrap-vue.js.org/docs/components/layout

      Przesunięcie kolumny uzyskuje się przez:
        offset="liczba"

      Przy responsywnych szerokościach kolumn, przez: offset-md="liczba"
        <b-col md="4" offset-md="2">Tekst 1</b-col>
    ----------------------------------------------------

      <b-container class="bv-example-row">
        <b-row>
          <b-col class='b-col'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni tempora sit ducimus, rem veniam voluptatum rerum, accusamus veritatis perspiciatis iure ex itaque distinctio suscipit ullam excepturi porro. Officia, consectetur corporis?</b-col>
          <b-col offset="2" class='b-col'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni tempora sit ducimus, rem veniam voluptatum rerum, accusamus veritatis perspiciatis iure ex itaque distinctio suscipit ullam excepturi porro. Officia, consectetur corporis?</b-col>
          <b-col class='b-col'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni tempora sit ducimus, rem veniam voluptatum rerum, accusamus veritatis perspiciatis iure ex itaque distinctio suscipit ullam excepturi porro. Officia, consectetur corporis?</b-col>
        </b-row>
      </b-container>

      <style scoped>
        .b-col {
          border: 1px solid red;
          background: #ccc
        }
      </style>

-------------------------------------------------------------------------------------------
104) bootstrap-vue - responsive classes (mobile stacking)

      https://bootstrap-vue.js.org/docs/components/layout

      <b-container>
        <b-row>
          <b-col cols="4">Tekst 1</b-col>
          <b-col cols="4">Tekst 2</b-col>
          <b-col cols="4">Tekst 3</b-col>
        </b-row>
      </b-container>

      Gdy do określania szerokości użyty jest 'cols',
      niezależnie od szerokości ekranu, kolumny zawsze będą stały pionowo

      W przypadku mobilków, dobrze by się stackowały (ustawiały jedna na drugiej)

      Do tego służy (max szerokość kontenera):
      'xs' auto
      'sm' 540
      'md' 720
      'lg' 960
      'xl' 1140

      Określa on breakpoint, tzn przy jakiej szerokosci ekranu, ma nastapić stackowanie:

      <b-container>
        <b-row>
          <b-col md="4">Tekst 1</b-col>
          <b-col md="4">Tekst 2</b-col>
          <b-col md="4">Tekst 3</b-col>
        </b-row>
      </b-container>


-------------------------------------------------------------------------------------------
105) bootstrap-vue - align: vertical

      https://bootstrap-vue.js.org/docs/components/layout

      <template>
        <div>
         <b-container>
           <b-row align-v="start" class="height">
             <b-col class='col'>1 of three columns</b-col>
             <b-col class='col'>2 of three columns</b-col>
             <b-col class='col'>3 of three columns</b-col>
           </b-row>

           <br>

           <b-row align-v="center" class="height">
             <b-col class='col'>1 of three columns</b-col>
             <b-col class='col'>2 of three columns</b-col>
             <b-col class='col'>3 of three columns</b-col>
           </b-row>

           <br>
           <br>

           <b-row align-v="end" class="height">
             <b-col class='col'>1 of three columns</b-col>
             <b-col class='col'>2 of three columns</b-col>
             <b-col class='col'>3 of three columns</b-col>
           </b-row>

         </b-container>
        </div>
      </template>

      <style>
        .height {
          min-height: 10rem;
          background: lightgray;
        }
        .col {
          border: 1px solid red;
        }
      </style>

-------------------------------------------------------------------------------------------
106) bootstrap-vue - align: horizontal

      https://bootstrap-vue.js.org/docs/components/layout

      <template>
        <div>
         <b-container>

            <b-row align-h="start" class="height">
              <b-col class="col" cols="4">Start</b-col>
              <b-col class="col" cols="4">Start</b-col>
            </b-row>

            <hr>

            <b-row align-h="center" class="height">
              <b-col class="col" cols="4">Center</b-col>
              <b-col class="col" cols="4">Center</b-col>
            </b-row>

            <hr>

            <b-row align-h="end" class="height">
              <b-col class="col" cols="4">End</b-col>
              <b-col class="col" cols="4">End</b-col>
            </b-row>

            <hr>

            <b-row align-h="around" class="height">
              <b-col class="col" cols="4">Around</b-col>
              <b-col class="col" cols="4">Around</b-col>
            </b-row>

            <hr>

            <b-row align-h="between" class="height">
              <b-col class="col" cols="4">Between</b-col>
              <b-col class="col" cols="4">Between</b-col>
            </b-row>

         </b-container>
        </div>
      </template>

      <style>
        .height {
          min-height: 10rem;
          background: lightgray;
        }
        .col {
          border: 1px solid red;
        }
      </style>

-------------------------------------------------------------------------------------------
107) bootstrap-vue - button

      https://bootstrap-vue.js.org/docs/components/button

      <template>
        <div>
        <b-container fluid>
          <b-row>
            <b-col><b-button size="sm" variant="primary">Primary sm</b-button></b-col>
            <b-col><b-button size="md" variant="secondary">Secondary md</b-button></b-col>
            <b-col><b-button size="lg" variant="success">Success lg</b-button></b-col>
            <b-col><b-button size="lg" variant="outline-success">Success lg</b-button></b-col>
            <b-col><b-button size="lg" variant="warning">Warning lg</b-button></b-col>
            <b-col><b-button size="lg" variant="danger" @click='klik'>Danger lg</b-button></b-col>
            <b-col><b-button size="lg" variant="link">Link lg</b-button></b-col>
          </b-row>
        </b-container>
        </div>
      </template>

      <script>
        export default {
          methods: {
            klik() {
              console.log('Klik !')
            }
          }
        }
      </script>

-------------------------------------------------------------------------------------------
108) bootstrap-vue - alert

      https://bootstrap-vue.js.org/docs/components/alert

      <template>
        <div>
          <b-btn @click="showAlert=true"
                 variant="info"
                 class="m-1">
                 Show alert
          </b-btn>

          <b-alert variant="danger"
                   dismissible
                   :show="showAlert"
                   @dismissed="showAlert=false">
                   Alert!
          </b-alert>

        </div>
      </template>

      <script>
        export default {
          data () {
            return {
              showAlert: false
            }
          }
        }
      </script>


-------------------------------------------------------------------------------------------
109) bootstrap-vue - form 1

      <template>
        <div>
          <b-form inline>
            <b-input class="mr-sm-2" placeholder="Username" />
            <b-input class="mr-sm-2"  placeholder="Password" />
            <b-form-checkbox class="mr-sm-2">Remember me</b-form-checkbox>
            <b-button variant="primary">Save</b-button>
          </b-form>
        </div>
      </template>

-------------------------------------------------------------------------------------------
110) bootstrap-vue - form 2

    Z tajemniczych przyczyn, modyfikator .lazy nie działa (.number - działa)
       v-model.lazy.number="form.age"

    <template>
      <b-container >
        <!-- User Interface controls -->
        <b-row>
          <b-col md="4" class="my-1">
            <b-form-group horizontal label="Filter" class="mb-0">
              <b-input-group>
                <b-form-input v-model="filter" placeholder="Type to Search" />
                <b-input-group-append>
                  <b-btn :disabled="!filter" @click="filter = ''">Clear</b-btn>
                </b-input-group-append>
              </b-input-group>
            </b-form-group>
          </b-col>

          <b-col md="4" class="my-1">
            <b-form-group horizontal label="Sort" class="mb-0">
              <b-input-group>
                <b-form-select v-model="sortBy" :options="sortOptions">
                  <option slot="first" :value="null">-- none --</option>
                </b-form-select>
                <b-form-select :disabled="!sortBy" v-model="sortDesc" slot="append">
                  <option :value="false">Asc</option>
                  <option :value="true">Desc</option>
                </b-form-select>
              </b-input-group>
            </b-form-group>
          </b-col>
        </b-row>

        <!-- Main table element -->
        <b-table show-empty
                 stacked="md"
                 :items="items"
                 :fields="fields"
                 :current-page="currentPage"
                 :per-page="perPage"
                 :filter="filter"
                 :sort-by.sync="sortBy"
                 :sort-desc.sync="sortDesc"
                 :sort-direction="sortDirection"
                 @filtered="onFiltered"
                 class='mt-5'
                 md="8">

          <template slot="name" slot-scope="row">{{row.value.first}} {{row.value.last}}</template>
          <template slot="isActive" slot-scope="row">{{row.value?'Yes :)':'No :('}}</template>
          <template slot="actions" slot-scope="row">
            <!-- We use @click.stop here to prevent a 'row-clicked' event from also happening -->
            <b-button size="sm" @click.stop="info(row.item, row.index, $event.target)" class="mr-0">
              Info modal
            </b-button>
            <b-button size="sm" @click.stop="row.toggleDetails">
              {{ row.detailsShowing ? 'Hide' : 'Show' }} Details
            </b-button>
          </template>
          <template slot="row-details" slot-scope="row">
            <b-card>
              <ul>
                <li v-for="(value, key) in row.item" :key="key">{{ key }}: {{ value}}</li>
              </ul>
            </b-card>
          </template>
        </b-table>

        <b-row>
          <b-col md="2" class="my-1">
            <b-pagination :total-rows="totalRows" :per-page="perPage" v-model="currentPage" class="my-0" />
          </b-col>

          <b-col md="5" class="my-1 ml-5">
            <b-form-group horizontal label="Per page" class="ml-5" >
              <b-form-select :options="pageOptions" v-model="perPage" />
            </b-form-group>
          </b-col>
        </b-row>

        <!-- Info modal -->
        <b-modal id="modalInfo" @hide="resetModal" :title="modalInfo.title" ok-only>
          <pre>{{ modalInfo.content }}</pre>
        </b-modal>

      </b-container>
    </template>

    <script>
    const items = [
      { isActive: true, age: 40, name: { first: 'Dickerson', last: 'Macdonald' } },
      { isActive: false, age: 21, name: { first: 'Larsen', last: 'Shaw' } },
      { isActive: false, age: 9, name: { first: 'Mini', last: 'Navarro' }, _rowVariant: 'success'},
      { isActive: false, age: 89, name: { first: 'Geneva', last: 'Wilson' } },
      { isActive: true, age: 38, name: { first: 'Jami', last: 'Carney' } },
      { isActive: false, age: 27, name: { first: 'Essie', last: 'Dunlap' } },
      { isActive: true, age: 40, name: { first: 'Thor', last: 'Macdonald' } },
      { isActive: true, age: 87, name: { first: 'Larsen', last: 'Shaw' }, _cellVariants: { age: 'danger', isActive: 'warning' }},
      { isActive: false, age: 26, name: { first: 'Mitzi', last: 'Navarro' } },
      { isActive: false, age: 22, name: { first: 'Genevieve', last: 'Wilson' } },
      { isActive: true, age: 38, name: { first: 'John', last: 'Carney' } },
      { isActive: false, age: 29, name: { first: 'Dick', last: 'Dunlap' } }
    ]

    export default {
      data () {
        return {
          items: items,
          fields: [
            { key: 'name', label: 'Person Full name', sortable: true, sortDirection: 'desc' },
            { key: 'age', label: 'Person age', sortable: true, 'class': 'text-center' },
            { key: 'isActive', label: 'is Active' },
            { key: 'actions', label: 'Actions' }
          ],
          currentPage: 1,
          perPage: 5,
          totalRows: items.length,
          pageOptions: [ 5, 10, 15 ],
          sortBy: null,
          sortDesc: false,
          sortDirection: 'asc',
          filter: null,
          modalInfo: { title: '', content: '' }
        }
      },
      computed: {
        sortOptions () {
          // Create an options list from our fields
          return this.fields
            .filter(f => f.sortable)
            .map(f => { return { text: f.label, value: f.key } })
        }
      },
      methods: {
        info (item, index, button) {
          this.modalInfo.title = `Row index: ${index}`
          this.modalInfo.content = JSON.stringify(item, null, 2)
          this.$root.$emit('bv::show::modal', 'modalInfo', button)
        },
        resetModal () {
          this.modalInfo.title = ''
          this.modalInfo.content = ''
        },
        onFiltered (filteredItems) {
          // Trigger pagination to update the number of buttons/pages due to filtering
          this.totalRows = filteredItems.length
          this.currentPage = 1
        }
      }
    }
    </script>


-------------------------------------------------------------------------------------------
111) bootstrap-vue - login form (flex)

      https://www.w3schools.com/cssref/css3_pr_justify-content.asp
      https://www.w3schools.com/cssref/tryit.asp?filename=trycss3_justify-content

       <div class='d-flex justify-content-between'>
       justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit;


      https://bootstrap-vue.js.org/docs/components/table

      <template>
        <div>
          <b-container>
            <b-row>
             <b-col md="4">

              <b-form @submit="onSubmit" @reset="onReset" v-if="show" >

                <h2>Signup Form</h2>

                  <b-form-input id="email"
                                type="email"
                                v-model="form.email"
                                required
                                placeholder="Enter email"
                                class="mt-4">
                  </b-form-input>

                  <b-form-input id="password"
                                type="text"
                                v-model="form.password"
                                required
                                placeholder="Password"
                                class="mt-3">
                  </b-form-input>

                  <b-form-select id="city"
                                 :options="city"
                                 v-model="form.city"
                                 class="mt-3">
                  </b-form-select>

                  <b-form-textarea id="textarea"
                                   v-model="form.textarea"
                                   placeholder="Enter something"
                                   :rows="3"
                                   :max-rows="6"
                                   class="mt-3">
                  </b-form-textarea>

                <b-form-group>
                  <b-form-checkbox-group id="checked" v-model="form.checked" class='mt-2'>
                    <b-form-checkbox id="call" value="call">Call me</b-form-checkbox>
                    <b-form-checkbox id="mail" value="mail">Mail me</b-form-checkbox>
                  </b-form-checkbox-group>
                </b-form-group>

                <b-form-group>
                  <b-form-radio-group id="selected"
                                      v-model="form.selected"
                                      :options="options">
                  </b-form-radio-group>
                </b-form-group>

                <div class='d-flex justify-content-between'>
                  <div>
                    <b-button id="submit" type="submit" variant="primary">Submit</b-button>
                    <b-button id="reset" type="reset" variant="danger">Reset</b-button>
                  </div>
                  <div>
                    <a href='#'>Forgot Password</a>
                  </div>
                </div>

              </b-form>
            </b-col>
            </b-row>
          </b-container>
        </div>
      </template>

      <script>
      export default {
        data() {
          return {
            form: {
              email: "",
              password: "",
              city: null,
              textarea: "",
              checked: [],
              selected: []
            },
            city: [
              { text: "Select city ..", value: null },
              "Warszawa",
              "Kraków",
              "Poznan",
              "Łódź"
            ],
            options: [
              { text: 'Male', value: 'male' },
              { text: 'Female', value: 'female' }
            ],
            show: true
          };
        },
        methods: {
          onSubmit(e) {
            e.preventDefault()
            alert(JSON.stringify(this.form))
          },
          onReset(e) {
            e.preventDefault();
            /* Reset our form values */
            this.form.email = ""
            this.form.password = ""
            this.form.city = null
            this.form.textarea = ""
            this.form.checked = []
            /* Trick to reset/clear native browser form validation state */
            this.show = false
            this.$nextTick(() => {
              this.show = true
            });
          }
        }
      }
      </script>


-------------------------------------------------------------------------------------------
112) bootstrap-vue - modal

    ------- Shops.html ----------------------------------------------------

      <b-modal ref="modalStreet" data-test="modalStreet" hide-footer>

        <div class="d-block text-center">
          <h3>Brak ulicy</h3>
        </div>

        <b-btn class="mt-3" variant="success" block @click="hideModalStreet">
          Zamknij
        </b-btn>

      </b-modal>

    ------- Shops.vue ----------------------------------------------------

      methods: {
        search() {
          if (!this.city) {
            return this.$refs.modalCity.show()
          }
        },
        hideModalStreet() {
          this.$refs.modalStreet.hide()
        }


-------------------------------------------------------------------------------------------
113) bootstrap-vue - tooltip

      <template>
        <div class="text-center my-3">
          <b-btn v-b-tooltip.hover title="I'm a tooltip!">Hover Me</b-btn>
        </div>
      </template>

-------------------------------------------------------------------------------------------
114a) bootstrap-vue - table 1

      Prosta tabela z sortowaniem

      Pełny grid z paginacją i filtrowaniem:
      https://bootstrap-vue.js.org/docs/components/table#complete-example

      <template>
        <b-container>
          <b-row>
            <b-table striped hover bordered dark :items="items" :fields="fields" >
            </b-table>
          </b-row>
        </b-container>
      </template>

      <script>
      export default {
        data () {
          return {
            // Note 'isActive' is left out and will not appear in the rendered table
            fields: [
              {
                key: 'last_name',
                label: 'Zmieniona nazwa kolumny',
                sortable: true
              },
              {
                key: 'first_name',
                sortable: true
              },
              {
                key: 'age',
                label: 'Person age',
                sortable: true,
                // Variant applies to the whole column, including the header and footer
                variant: 'danger'
              }
            ],
            items: [
              { isActive: true, age: 40, first_name: 'Dickerson', last_name: 'Macdonald' },
              { isActive: false, age: 21, first_name: 'Larsen', last_name: 'Shaw' },
              { isActive: false, age: 89, first_name: 'Geneva', last_name: 'Wilson' },
              { isActive: true, age: 38, first_name: 'Jami', last_name: 'Carney' }
            ]
          }
        }
      }
      </script>

-------------------------------------------------------------------------------------------
114b) bootstrap-vue - table 2

      Poniżej widać jak można na końcu tabeli jest kolumna z czekboksami
      i jak po kliknięciu któregoś można dostać dane zawarte w każdym polu rowu
      klikniętego czekboksa

    ------- Table.html -----------------------------------

      <div v-cloak>
        <b-container>
          <b-row v-cloak>
            <b-table id="table"
                     data-test="table"
                     striped
                     hover
                     bordered
                     :items="items"
                     :fields="fields">

              <template slot="checkbox" slot-scope="row">
                <b-form-checkbox :value="row"
                                 @click.native.stop
                                 @change="onRowClicked"
                                 v-model="row.item.selected">
                </b-form-checkbox>
              </template>

              <template slot="index" slot-scope="data">{{ data.index + 1 }}</template>
              <span slot="link" slot-scope="data" v-html="data.value">{{ data.value }}</span>

            </b-table>
          </b-row>
        </b-container>
      </div>

    ------- Table.vue -----------------------------------

      <template src="./Table.html"></template>

      <script>
      export default {
        data() {
          return {
            selected: []
          }
        },
        computed: {
          items() {
            return this.$store.getters.getTodaysPrograms
          },
          fields() {
            return [
              {
                key: 'index',
                label: '#'
              },
              // (...)
              {
                key: 'checkbox',
                label: ''
              },
            ]
          },
        },
        methods: {
          //(..)
          onRowClicked(item) {
            console.log('title = ', item.item.title)
          }
        }
      }
      </script>

-------------------------------------------------------------------------------------------
115) bootstrap-vue - navbar

      <template>
        <div>
          <b-navbar toggleable="md" type="dark" variant="info">

            <b-navbar-toggle target="nav_collapse"></b-navbar-toggle>

            <b-navbar-brand href="#">NavBar</b-navbar-brand>

            <b-collapse is-nav id="nav_collapse">

              <b-navbar-nav>
                <b-nav-item href="#">Link</b-nav-item>
                <b-nav-item href="#" disabled>Disabled</b-nav-item>
              </b-navbar-nav>

              <!-- Right aligned nav items -->
              <b-navbar-nav class="ml-auto">

                <b-nav-form>
                  <b-form-input size="sm" class="mr-sm-2" type="text" placeholder="Search"/>
                  <b-button size="sm" class="my-2 my-sm-0" type="submit">Search</b-button>
                </b-nav-form>

                <b-nav-item-dropdown text="Lang" right>
                  <b-dropdown-item href="#">EN</b-dropdown-item>
                  <b-dropdown-item href="#">ES</b-dropdown-item>
                  <b-dropdown-item href="#">RU</b-dropdown-item>
                  <b-dropdown-item href="#">FA</b-dropdown-item>
                </b-nav-item-dropdown>

                <b-nav-item-dropdown right>
                  <!-- Using button-content slot -->
                  <template slot="button-content">
                    <em>User</em>
                  </template>
                  <b-dropdown-item href="#">Profile</b-dropdown-item>
                  <b-dropdown-item href="#">Signout</b-dropdown-item>
                </b-nav-item-dropdown>
              </b-navbar-nav>

            </b-collapse>
          </b-navbar>

        </div>
      </template>

-------------------------------------------------------------------------------------------
116) bootstrap-vue - card

      <template>
        <div>
          <b-card title="Card Title"
                  img-src="https://picsum.photos/300/150/?image=41"
                  img-alt="Image"
                  img-top
                  tag="article"
                  style="max-width: 20rem;"
                  class="mb-2">

            <p class="card-text">
              Some quick example text to build on the card title and make up the bulk of the card's content.
            </p>

            <b-button href="#" variant="primary">Go somewhere</b-button>

          </b-card>
        </div>
      </template>

-------------------------------------------------------------------------------------------
117) bootstrap-vue - dropdown

      <template>
        <div>
          <b-dropdown id="ddown1" text="Dropdown Button" class="m-md-2">
            <b-dropdown-item>First Action</b-dropdown-item>
            <b-dropdown-item>Second Action</b-dropdown-item>
            <b-dropdown-item>Third Action</b-dropdown-item>
            <b-dropdown-divider></b-dropdown-divider>
            <b-dropdown-item>Something else here...</b-dropdown-item>
            <b-dropdown-item disabled>Disabled action</b-dropdown-item>
          </b-dropdown>
        </div>
      </template>


-------------------------------------------------------------------------------------------
118) bootstrap-vue - dropup

      <template>
        <div>
          <b-dropdown id="ddown1" dropup text="Dropdown Button" class="m-md-2">
            <b-dropdown-item>First Action</b-dropdown-item>
            <b-dropdown-item>Second Action</b-dropdown-item>
            <b-dropdown-item>Third Action</b-dropdown-item>
            <b-dropdown-divider></b-dropdown-divider>
            <b-dropdown-item>Something else here...</b-dropdown-item>
            <b-dropdown-item disabled>Disabled action</b-dropdown-item>
          </b-dropdown>
        </div>
      </template>

-------------------------------------------------------------------------------------------
119) bootstrap-vue - toggle collapse

      <template>
        <div>
          <b-btn v-b-toggle.collapse1 variant="primary">Toggle Collapse</b-btn>
          <b-collapse id="collapse1" class="mt-2">
            <b-card>
              <p class="card-text">Collapse contents Here</p>
              <b-btn v-b-toggle.collapse1_inner size="sm">Toggle Inner Collapse</b-btn>
              <b-collapse id=collapse1_inner class="mt-2">
                <b-card>Hello!</b-card>
              </b-collapse>
            </b-card>
          </b-collapse>
        </div>
      </template>


-------------------------------------------------------------------------------------------
120) bootstrap-vue - select

      <template>
        <div>
          <b-form-select v-model="selected" :options="options"  @change="onChangedSelection" class="mb-3" />
          <b-form-select v-model="selected" :options="options" class="mb-3" size="sm" />
          <div>Selected: <strong>{{ selected }}</strong></div>
        </div>
      </template>

      <script>
      export default {
        data () {
          return {
            selected: null,
            options: [
              { value: null, text: 'Please select an option' },
              { value: 'a', text: 'This is First option' },
              { value: 'b', text: 'Selected Option' },
              { value: {'C': '3PO'}, text: 'This is an option with object value' },
              { value: 'd', text: 'This one is disabled', disabled: true }
            ]
          }
        },
        methods: {
          onChangedSelection(e) {
            console.log('changedSelection')
            console.log(e.target.value)
          }
      }
      </script>

-------------------------------------------------------------------------------------------
121) bootstrap-vue - textarea

      <template>
        <div>
          <b-form-textarea id="textarea1"
                           v-model="text"
                           placeholder="Enter something"
                           :rows="3"
                           :max-rows="6">
          </b-form-textarea>
          <pre class="mt-3">{{ text }}</pre>
        </div>
      </template>

      <script>
      export default {
        data () {
          return {
            text: ''
          }
        }
      }
      </script>

-------------------------------------------------------------------------------------------
122) bootstrap-vue - input

      <template>
        <div>
          <b-form-input v-model="text1"
                        type="text"
                        placeholder="Enter your name">
          </b-form-input>

          <p>Value: {{ text1 }}</p>

        </div>
      </template>

      <script>
        export default {
          data () {
            return {
              text1: ''
            }
          }
        }
      </script>

-------------------------------------------------------------------------------------------
123) bootstrap-vue - radio

      <template>
        <div>
          <b-form-group label="Radios using <code>options</code>">
            <b-form-radio-group id="radios1" v-model="selected" :options="options">
            </b-form-radio-group>
          </b-form-group>

          <div >
            Selected: <strong>{{ selected }}</strong>
          </div>
        </div>
      </template>

      <script>
      export default {
        data () {
          return {
            selected: 'first',
            options: [
              { text: 'Adam', value: 'first' },
              { text: 'Barbiak', value: 'second' },
              { text: 'Czesiu', value: 'third', disabled: true },
              { text: 'Darek', value: { fourth: 4 } }
            ]
          }
        }
      }
      </script>

-------------------------------------------------------------------------------------------
124) bootstrap-vue - table i checkboksy (tvui): 1

      W moim projekcie TVui do wybierania z tygodniowego programu 140 stacji TV
      ulubionych programów, była tabela pokazująca do 1,000 rekordów,
      z pustym czekboksem. Klikniecie w niego, ulubiało dany program.
      Potem klik w batona Show, wyświetlał tylko czeknięte programy

      Problem:
        Po kliku w drugiego czekboksa, wyskakiwał błąd 'Converting circular structure to JSON'

      Rozw:
        Pomogło wywalenie całkiem atrybutu v-model:

          <b-form-checkbox (..) v-model="row.item.selected"> </b-form-checkbox>

    ------------ Table.html ---------------------------------------------

      <div v-cloak>
        <b-container>
          <b-row v-cloak>
            <b-table id="table"
                     data-test="table"
                     striped
                     hover
                     dark
                     bordered
                     :items="items"
                     :fields="fields">

              <template slot="checkbox" slot-scope="row">
                <b-form-checkbox :value="row"
                                 :unchecked-value="row.item.id"
                                 @change="onRowClicked">
                </b-form-checkbox>
              </template>

              <template slot="index" slot-scope="data">{{ data.index + 1 }}</template>
              <span slot="link" slot-scope="data" v-html="data.value">{{ data.value }}</span>

            </b-table>
          </b-row>
        </b-container>
      </div>


    ------------ Table.vue ---------------------------------------------

      <template src="./Table.html"></template>

      <script>
      import { FIELDS } from '../../services/constants'

      const favorites = []

      export default {
        computed: {
          items() {
            if (this.$store.getters.showFavorites) {
              this.$store.commit('SHOW_FAVORITES', false)
              return this.$store.getters.getFavorites
            }
            else if (this.$store.getters.getCategoryFiltered && this.$store.getters.getCategoryFiltered.length) {
              return this.$store.getters.getCategoryFiltered
            }
            else {
              this.$store.commit('SET_LOADING', false)
              return this.$store.getters.getTodaysPrograms
            }
          },
          fields() {
            return FIELDS
          },
          loading() {
            return this.$store.getters.getLoading
          },
        },
        created() {
          this.$store.dispatch('startStations')
          this.$store.dispatch('setLoading', true)
        },
        methods: {
          onRowClicked(item) {
            console.log('item = ', item)

            if (typeof item !== 'object') {
              for (let i = 0; i < favorites.length; i++) {
                if (favorites[i].id === item) {
                  favorites.splice(i, 1)
                }
              }
            }
            else {
              const record = {
                category: item.item.category,
                channel: item.item.channel,
                date: item.item.date,
                dateTimestamp: item.item.dateTimestamp,
                dayString: item.item.dayString,
                id: item.item.id,
                link: item.item.link,
                title: item.item.title,
                time: item.item.time,
                timestamp: item.item.timestamp,
                type: item.item.type,
              }
              favorites.push(record)
            }

            console.table(favorites, ['title'])
            console.log('favorites = ', favorites)

            this.$store.dispatch('addFavorites', favorites)
          }
        }
      }
      </script>

-------------------------------------------------------------------------------------------
125) bootstrap-vue - table i checkboksy (tvui): 2

      Programowe czekowanie czy odczekiwanie czekboksów jest nadal tajemnicą
      Dlatego lepiej zrezygnować z nich i zastąpić je dwuklikiem w rów:

       ------- Table.html -----------------------------------

        <b-table id="table"
                 data-test="table"
                 striped
                 hover
                 dark
                 bordered
                 @row-dblclicked="onRowClicked"
                 :items="items"
                 :fields="fields">

       ------- Table.vue -----------------------------------

        methods: {
          onRowClicked(item) {
            console.log('Tu onRowClicked: item = ', item)

-------------------------------------------------------------------------------------------
130) puppeteer - hello world

      https://www.aymen-loukil.com/en/blog-en/google-puppeteer-tutorial-with-examples/

      yarn add puppeteer

    -------------------------------------------------------

      const puppeteer = require('puppeteer');
        const options = {
        path: 'amazon-header.png',
        fullPage: false,
        clip: {
          x: 0,
          y: 0,
          width: 1280,
          height: 150
        }
      }

      puppeteer.launch().then(async browser => {
        const page = await browser.newPage()
        await page.setViewport({ width: 1280, height: 800 })
        await page.goto('https://www.amazon.com')
        await page.screenshot(options)
        await browser.close()
      })

-------------------------------------------------------------------------------------------
131) puppeteer i jest - hello world

      Tuba - End to End Testing with Google's Puppeteer and Jest

      a) yarn add faker jest jest-cli puppeteer

      b) do packet.json, sekcja scripts, dopisz:

          "test": "jest",
          "debug": "cross-env NODE_ENV=debug npm test"

      c) wbij poniższy plik

      d) yarn dev - odpalenie serwera vue-cli

      e) yarn debug - odpalenie papetira

    UWAGA !

      const debugging_mode = {
        ..
        devtools: false  // albo wywal tą linijkę
      }

      Obowiązują selektory css'owe:
        const result = await page.$eval('h1'     // <h1></h1>
        const result = await page.$eval('.dupa' // class='dupa'
        const result = await page.$eval('#dupa' // id='dupa'

        Dla max szybkości testów, ustaw headless na false,
        a slowMo na 0

    -------- App.test.js ---------------------------------

      const puppeteer = require('puppeteer')

      let browser, page

      function isDebugging() {
        const debugging_mode = {
          headless: true,
          slowMo: 0,
          devtools: false  // albo wywal tą linijkę
        }
        return process.env.NODE_ENV === 'debug' ? debugging_mode : {}
      }

      beforeAll( async () => {
        browser = await puppeteer.launch(isDebugging())
        page = await browser.newPage()
        await page.goto('http://localhost:8080')
      })

      afterAll( async () => { await browser.close() })

      describe('on page load', () => {
        test('h1 and h2 load correctly', async () => {
          const result = await page.$eval('h1', e => e.innerHTML)
          expect(result).toMatch(/^Counter/)
        })
      })

-------------------------------------------------------------------------------------------
132) puppeteer i jest - page.emulate

     beforeEach( async () => {
       browser = await puppeteer.launch(isDebugging())
       page = await browser.newPage()
       page.emulate({
         viewport: {
           width: document.documentElement.clientWidth,
           height: document.documentElement.clientHeight
         },
         userAgent: ''
       })
     })

-------------------------------------------------------------------------------------------
133) puppeteer i jest - 2 testy w 1

      Upchanie 2 testów w 1 srukturze test(..) daje szybsze ich wykonanie
      niż standardowe umieszczenie ich w osobnych testach

      test('h1 and h2 load correctly', async () => {
        await page.goto('http://localhost:8080')

        // Test #1
        const result = await page.$eval('h1', e => e.innerHTML)
        expect(result).toMatch(/^Counter/)

        // Test #2
        const result2 = await page.$eval('h2', e => e.innerHTML)
        expect(result2).toBe('Double Counter: 0')
      })

-------------------------------------------------------------------------------------------
134) puppeteer i jest - navbar

    Pliki App i Counter - jak w p. 84 lub 85
    Reszta pliku App.test.js - jak powyżej

    ------ Result.vue --------------------------------------

      <template>
        <div>
          <button @click='inc'>Inc</button>
          <button @click='dec'>Dec</button>

          <br><br>
            <h1>
              <ul class='navbar'>
                <li class='nav-li'>Headr</li>
                <li class='nav-li'>Left</li>
                <li class='nav-li'>Right</li>
                <li class='nav-li'>Foter</li>
              </ul>
            </h1>
        </div>
      </template>

      <script>
        export default {
          methods: {
            inc() {
              this.$store.dispatch('incCounter')
            },
            dec() {
              this.$store.dispatch('decCounter')
            }
          }
        }
      </script>

    ------ App.test.js --------------------------------------

      test('navbar loads correctly', async () => {
        const result = await page.$eval('.navbar', el => el ? true : false)
        const listItems = await page.$$('.nav-li')

        expect(result).toBe(true)
        expect(listItems.length).toBe(4)
      })

-------------------------------------------------------------------------------------------
135) puppeteer i jest - tagi data-id

     Ze względu na CSS modules, bezpieczniej od selektorów CSS'owych,
     używać jest tagów 'data-'.

     HTML5 pozwala na definiowanie ich dodając po myślniku cokolwiek,
     np data-testid

     Poniżej przykład zastosowania

    ------ Counter.vue -----------------------------------

      <ul data-testid="navbar">
        <li data-testid="navBarLi">Headr</li>
        <li data-testid="navBarLi">Left</li>
        <li data-testid="navBarLi">Right</li>
        <li data-testid="navBarLi">Foter</li>
      </ul>

    ------ App.test.js --------------------------------------

      test('navbar loads correctly', async () => {
        //const result = await page.$eval('.navbar', el => el ? true : false)
        const result = await page.$eval('[data-testid="navbar"]', el => el ? true : false)
        const listItems = await page.$$('[data-testid="navBarLi"]')

        expect(result).toBe(true)
        expect(listItems.length).toBe(4)
      })
-------------------------------------------------------------------------------------------
136) puppeteer i jest - login form

     Szkic testu login formy z punktu 110b)
     Nie wiem jak przetestować wyświetlenie alerta,
     zaznaczenie option boksa i select boksa

      const puppeteer = require('puppeteer')

      let browser, page

      function isDebugging() {
        const debugging_mode = {
          headless: false,
          slowMo: 50
        }
        return process.env.NODE_ENV === 'debug' ? debugging_mode : {}
      }

      beforeAll( async () => {
        browser = await puppeteer.launch(isDebugging())
        page = await browser.newPage()
        await page.goto('http://localhost:8080')
      })

      afterAll( async () => {
        await browser.close()
        console.log('brołziak zamknięty')
      })

      describe('on page load', () => {

        /* test('h1 loads correctly', async () => {
          const result = await page.$eval('h1', el => el.innerHTML)
          expect(result).toMatch(/^Counter/)
        }) */

        test('on click on submit button, login form shows alert correctly', async () => {
          await page.click('#email')
          await page.type('#email', 'kupa.siku@wp.pl')

          await page.click('#password')
          await page.type('#password', 'pacłort')

          // await page.click('#city')
          // await page.type('#city', 'Kraków')

          await page.click('#textarea')
          await page.type('#textarea', 'Jakieś cóś')

          await page.click('#call')
          await page.click('#mail')

          await page.click('#submit')
          await page.waitForSelector

        })
      })

-------------------------------------------------------------------------------------------
190) eslint - tips

     a) By w konsoli Problems prócz błędów eslinta,
        nie pojawiały się błędy spellcheckera, dodaj do Settings:

          "cSpell.diagnosticLevel": "Hint",

        By zlikwidować 3 kropeczki które zaznaczają teraz nieznane wyrazy:

            "editorHint.foreground": "#f000",

        https://stackoverflow.com/questions/50309834/vs-code-enable-inline-spell-checker-disable-spell-check-in-problems

      b) By zablokować działanie eslinta w obrębie całego pliku,
         na jego początku umieść:

          /* eslint-disable */

      c) Jak wyżej dla Code Spell Checkera, ale dla obszaru kodu :

          /* cSpell:disable */
          /* cSpell:enable */

      d) w nodzie (ani w bablu, najwyraźniej) nie działa destructuring assignment,
         mimo, że eslint go sugeruje.

            const showFavorites = this.$store.getters.showFavorites   // OK
            const { showFavorites } = this.$store.getters             // Nie działa jeszcze

         Trzeba zdisablwoać tą regułkę eslinta:
            'prefer-destructuring': 'off',

      e) wyłaczenie Prettiera
          i) wyłaczyłem extension Prettier

          ii) zakomentowałem w eslint.rc:
                module.exports = {
                env: { node: true },
                //extends: ['plugin:vue/recommended', '@vue/airbnb', 'prettier', 'plugin:prettier/recommended'],
                extends: ['plugin:vue/recommended', '@vue/airbnb'],
                //plugins: ['prettier'],

-------------------------------------------------------------------------------------------
191) eslint - konfiguracja

    a) vue create nowyProjekt // linting > eslint > sass-dart

    b) touch /.eslintignore:

        /build/
        /config/
        /dist/
        /*.js

    c) rename eslintrc.js na eslintrc.json i wklej poniższe

        {
          "env": {
            "browser": true,
            "es6": true,
            "node": true
          },
          "parserOptions": {
            "parser": "babel-eslint",
              "ecmaVersion": 2017,
              "sourceType": "module"
          },
          "extends": [
            "plugin:vue/recommended",
            "@vue/airbnb"
          ],
          "rules": {
            "array-bracket-spacing": 0,
            "arrow-parens": 0,
            "brace-style": ["error", "stroustrup"],
            "computed-property-spacing": 0,
            "comma-dangle": ["error", "only-multiline"],
            "consistent-return":"off",
            "func-call-spacing": 0,
            "indent": ["error", 2],
            "linebreak-style": 0,
            "max-len": [1, 120, 2],
            "no-console": 0,
            "no-multiple-empty-lines": [1, { "max": 1 }],
            "no-plusplus": 0,
            "no-spaced-func": 0,
            "no-whitespace-before-property": 0,
            "prefer-destructuring": 0,
            "semi": ["error", "never"],
            "space-in-parens": 0,
            "space-before-function-paren": 0,
            "spaced-comment": 0,
            "no-trailing-spaces": 2,
            "vue/html-self-closing": "never"
          }
        }

    e) vs code settings:

        "eslint.alwaysShowStatus": true,
        "eslint.autoFixOnSave": false,
        "eslint.enable": true,
        "eslint.packageManager": "yarn",
        "eslint.run": "onType",
        "vetur.validation.template": true,  // bo inaczej formatowanie ctrl+shift+f nie działa

        "eslint.validate": [
            {
              "language": "vue",
              "autoFix": true
            },
            {
              "language": "javascript",
              "autoFix": true
            }
        ],
-------------------------------------------------------------------------------------------
192) eslint - obsługa

      a) explorer (F1)
          Zielona kropka oznacza brak błędów (choć możliwe warningi)
          Cyferka po prawej mówi o ilości problemów (zielona - warn, czerwona - err)

      b) plik vue lub js
          F8 skacze po kolejnych błędach, wyświetlając ich treść i nazwę reguły

-------------------------------------------------------------------------------------------
193) esLint i prettier

      Kopia z js.txt - punktu 290) ESLint i Prettier w Vue

      a) yarn global add eslint

      b) yarn add eslint-plugin-vue eslint-config-prettier eslint-plugin-prettier

      c) vs code > zainstaluj pakiet ESlint

      d) vs code > zainstaluj pakiet Prettier - Code formatter

      e) vs code > Settings > wpisz: "editor.formatOnSave": true

      g) do package.json, dopisz:

          "eslint-check": "eslint --print-config .eslintrc.json | eslint-config-prettier-check"

      h) stwórz plik .prettier.json

          {
            "trailingComma": "es5",
            "tabWidth": 2,
            "printWidth": 200,
            "semi": false,
            "singleQuote": true,
            "trailingComma": "all",
            "bracketSpacing:": true,
            "arrowParens": "avoid",
            "htmlWhitespaceSensitivity": "strict",
            "endOfLine": "lf"
          }

      i) stwórz plik .eslintrc.js

          /* eslint-disable  */
          module.exports = {
            env: { node: true },
            extends: ['plugin:vue/recommended', '@vue/airbnb', 'prettier', 'plugin:prettier/recommended'],
            plugins: ['prettier'],
            root: true,
            rules: {
              'no-console': 0,
              'no-debugger': 'off',
              'array-bracket-spacing': 0,
              'array-callback-return': 'warn',
              'arrow-parens': 0,
              // 'brace-style': ['error', 'stroustrup', { allowSingleLine: true }],
              'computed-property-spacing': 0,
              // 'comma-dangle': ['error', 'only-multiline'],
              'consistent-return': 'off',
              'func-call-spacing': 0,
              'import/prefer-default-export': 'warn',
              // indent: ['error', 2],
              'linebreak-style': ['error', 'unix'],
              //'max-len': [1, 200, 1, { ignoreUrls: true, ignoreTrailingComments: true, ignoreTemplateLiterals: true }],
              'no-alert': 'off',
              // 'no-multiple-empty-lines': [1, { max: 1 }],
              'no-param-reassign': 'off',
              'no-plusplus': 0,
              'no-spaced-func': 0,
              'no-warning-comments': 'warn',
              'no-whitespace-before-property': 0,
              // 'no-trailing-spaces': 2,
              'prefer-destructuring': 'warn',
              'prefer-template': 'warn',
              'prettier/prettier': ['error'],
              // semi: ['error', 'never'],
              'space-in-parens': 0,
              'space-before-function-paren': 0,
              'spaced-comment': 0,
              //'vue/html-self-closing': 'never',
            },

            parserOptions: {
              parser: 'babel-eslint',
            },
          }

      j) odpal: eslint-check
          Wyświetli: 'The following rules are unnecessary or might conflict with Prettier'
          Zakomentuj konfliktujące się reguły

          Te, które rozpoczynają się od 'vue/' pochodzą od eslint-plugin-vue:
            vue/singleline-html-element-content-newline

            Zostaw je

-------------------------------------------------------------------------------------------
200) nuxt tips

      a) wyłaczenie eslinta
          zakomentuj sekcję '// Run ESLint on save' w nuxt.config.js
          Najlepiej go nie wybierać przy tworzeniu projektu z CLI
          a dopiero dodać ręcznie na jakimś etapie

      b) wyłaczenie prettiera
          wyciąłem go z package.json i eslint.config

      c) nie instaluj vuex'a, bo nuxt już go ma, a zainstalowany
         dodatkowo, stopuje start serwera


-------------------------------------------------------------------------------------------
201) nuxt tips - hello weird

      Egghead - Create a News App with Vue and Nuxt: Access router params ..

      a) yarn create nuxt-app nazwaProjektu (nie zaznaczaj ESlinta )

      b) yarn add vuex-persistedstate  (nie instaluj vue-router'a, ani vuex'a)

      c) w /components stwórz plik Table.vue jak w p. 400) vuetify - table

      d) w /pages/index.vue wklej

          <template>
            <Table></Table>
          </template>

          <script>
          import Table from '~/components/Table'

          export default {
            components: {
              Table
            }

          }
          </script>

          <style>
          </style>

      d) odpal serwer: yarn dev i sprawdź na chromie port 3000

      e) zmiana położenia folderów
          https://forum.vuejs.org/t/anyone-know-how-to-rename-move-a-nuxt-folder/44876

          Add the following to your nuxt.config.js:

          dir: {
            layouts: 'views/layouts',
            pages: 'views/pages',
          },

-------------------------------------------------------------------------------------------
202) nuxt - async (axios)

      Async musi być umieszczony w /pages.index.vue:

    ----------- /pages/index.vue ----------------------

      <template>
        <div>
          <h2>Pościaki</h2>
          <ul>
            <li v-for="(post, i) in posts">
              {{ i }}
              {{ post.body }}
            </li>
          </ul>
        </div>
      </template>

      <script>
        import axios from 'axios'

        export default {
          data() {
            return {
              posts: []
            }
          },
          mounted() {
            axios.get('https://jsonplaceholder.typicode.com/posts')
              .then(res => {
                console.log(res.data)
                this.posts = res.data
              })
              .catch(err => console.log('Erroras:', er))
          },
        }
      </script>



-------------------------------------------------------------------------------------------
203) nuxt - asyncData

    Do asynca, nuxt ma osobną sekcję: asyncData()
    Jest ona sklejana razem z data()
    Odpal poniższe, otwórz Vue dev toolsy > ikona Switch to Components >
    stań na Anonymous Component. Poniżej wyświetli ci się jej zawartość

    Jeśli w data() nic nie ma, można ją wywalić

    ----------- /pages/index.vue ----------------------

      <template>
        <div>
          <h2>Pościaki</h2>
          <ul>
            <li v-for="(post, i) in posts">
              <b>{{ i }}</b>
              {{ post.body }}
            </li>
          </ul>
        </div>
      </template>

      <script>
        import axios from 'axios'

        export default {
          asyncData() {
            return axios.get('https://jsonplaceholder.typicode.com/posts')
              .then(res => {
                return {
                  posts: res.data
                }
              })
              .catch(err => console.log('Erroras:', err))
          }
        }
      </script>

-------------------------------------------------------------------------------------------
204) nuxt - $axios

      $axios - to wrapper axiosa.
      Można się posługiwać zwykłym, ale ten ma przyjemniejszą składnię

      Do nuxt.config.js, wbij:

        axios: {
          baseURL: 'https://jsonplaceholder.typicode.com'
        },

      Dzięki temu, możesz użyć skróconej ścieżki:

        const posts = await $axios.$get('posts')

    ----------- /pages/index.vue ----------------------

    <template>
      <div>
        <h2>Pościaki</h2>
        <ul>
          <li v-for="(post, i) in posts">
            <b>{{ i }}</b>
            {{ post.body }}
          </li>
        </ul>
      </div>
    </template>

    <script>
      export default {
        data() {
          return {
            posts: []
          }
        },
        async asyncData({ $axios }) {
          const posts = await $axios.$get('https://jsonplaceholder.typicode.com/posts')
          console.log(posts)  // wyświetlą się najpierw w terminalu, bo to z serwera leci
          return { posts }
        }
      }
    </script>

-------------------------------------------------------------------------------------------
205) nuxt - helper

      Asynca trzeba robić w pages/index.vue, a do helpera wyrzucać obróbkę
      zwróconych danych

      --------- pages/index.vue -----------------------------------

        <template>
          <div>
            <h2>Pościaki</h2>
            <ul>
              <li v-for="(post, i) in posts">
                <b>{{ i }}</b>
                {{ post.body }}
              </li>
            </ul>
          </div>
        </template>

        <script>
          import { ajax } from '../mixins/ajax'

          export default {
            data() {
              return {
                posts: []
              }
            },
            async asyncData({ $axios }) {
              const posts = await $axios.$get('https://jsonplaceholder.typicode.com/posts')
              ajax(posts)
              return { posts }
            }
          }
        </script>

      --------- mixins/ajax.js -----------------------------------

        export const ajax = posts => {
          posts.map(el => {
            return el.body = 'DUPAS ! ' + el.body
          })
        }

-------------------------------------------------------------------------------------------
230) vuetify - tips

      1) skalowanie elementów css'em - pięknie zmniejsza rozmiar select boksa, a pewnie i wielu innych

          .compact-form {
            transform: scale(0.77, 1);   // x * 77%, y * 100%
            transform-origin: left;
          }

-------------------------------------------------------------------------------------------
231) vuetify - instalacja

      o) przy nowym projekcie:
          1) vue add vuetify

          2) App.vue
              <template>
                <router-view/

          3) router.js - dostosuj


      a) przy istniejacym:
          yarn add vuetify stylus stylus-loader style-loader css-loader -D

      b) main.js
          import Vuetify from 'vuetify'
          import 'vuetify/src/stylus/app.styl'
          import 'vuetify/dist/vuetify.min.css'

          Vue.use(Vuetify)

      c) main.styl
          @import '~vuetify/src/stylus/main'

      d) index.html
           jeśli yarn add material-design-icons-iconfont  nie działa, to:

          <head>
            <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons' rel="stylesheet">
          </head>


-------------------------------------------------------------------------------------------
232) vuetify - grid system

      https://vuetifyjs.com/en/framework/grid#api

      Grid system
        Vuetify has a 12 point flexbox-based, grid system.
        It contains 5 types of media breakpoints for specific screen sizes or orientations.

        The props for grid components are classes derived from their defined properties.
        This allows to specify these helper classes as props, while still providing the classes to be used anywhere.

      Usage
        v-container can be used for a center focused page, or given the fluid prop to extend its full width.
        v-layout is used for separating sections
        v-flex is contained within v-layout

        The structure of your layout will be as follows, v-container » v-layout » v-flex.
        Each part of the grid chain is a flex-box element.

        The final, v-flex, automatically sets its children to have flex: 1 1 auto.
        For convenience, these components automatically transform attributes into classes, allowing for:

        <v-layout pa-3 mb-2>    </v-layout>

          instead of

        <v-layout class="pa-3 mb-2">     </v-layout>.

        The only exception are data attributes which are left as-is.

-------------------------------------------------------------------------------------------
233) vuetify - sizes, margins and paddings

      vuetifyjs.com/en/framework/spacing

       Tak samo jak w bootstrap-vue, tylko doszło a=all

     1. Sizes

        <v-flex xs8 sm4 md2>  8 jednostek na monitorze extra small
                              4 na small
                              2 na medium

          Dlatego pisząc na komputerze, nie zobaczysz na ekranie zmiany
          majstrując xs czy sm. Zmieniaj md, a potem dostosuj pozostałe:
            sm = 2 * medium
            xs = 2 * small

          Extra small	  xs	small to large handset  < 600px
          tabletSmall	  sm	small to medium tablet    600px > < 960px
          laptopMedium	md	large tablet to laptop 	  960px > < 1264*
          desktopLarge	lg	desktop	                  1264 > < 1904px*
          extraLarge	  xl	4k and   ultra-wides	  > 1904px*

     2. Margins and paddings

          <v-app class="mx-0 my-1">

            m - applies margin
            p - applies padding

            t - *-top
            b - *-bottom
            l - *-left
            r - *-right
            x - both *-left and *-right
            y - both *-top and *-bottom
            a - the property in all directions

            auto - sets the spacing to auto
            0 - removes the spacing by setting it to 0
            1 - $spacer * .25
            2 - $spacer * .5
            3 - $spacer
            4 - $spacer * 1.5
            5 - $spacer * 3

-------------------------------------------------------------------------------------------
234) vuetify - align (flex), offsety, grow i shrink

      https://vuetifyjs.com/en/framework/grid#direction-and-align

        <v-layout align-start         justify-start     row fill-height> ... </v-layout>
                  align-center        justify-center
                  align-end           justify-end
                  align-space-around  justify-space-around
                  align-space-between justify-space-between

      xs10 offset-xs1
      xs7 offset-(xs5 | md2 | lg5)
      (xs12 | sm5 | md5) offset-(xs0 | lg2)

      <v-flex grow pa-1>
      <v-flex shrink pa-1>

-------------------------------------------------------------------------------------------
235) vuetify - import tylko wybranych komponentów

      https://vuetifyjs.com/en/framework/a-la-carte

      Po ustawieniu ok 20 komponentów, okazało się w chrome web toolsach że wynikowy
      pakiet app.js był 10% większy od poprzedniego

      Zastosowanie loadera niewiele pomogło.
      Wydaje się więc, że a la carte może mieć sens przy b małych projektach

      import Vue from 'vue'
      import App from './App.vue'

      import Vuetify, {
        VApp, // required
        VNavigationDrawer,
        VFooter,
        VToolbar,
        VFadeTransition
      } from 'vuetify/lib'

      import { Ripple } from 'vuetify/lib/directives'

      Vue.use(Vuetify, {
        components: {
          VApp,
          VNavigationDrawer,
          VFooter,
          VToolbar,
          VFadeTransition
        },
        directives: {
          Ripple
        }
      })

-------------------------------------------------------------------------------------------
236) vuetify - batony

    <v-btn color="success">Success</v-btn>
    <v-btn color="error">Error</v-btn>
    <v-btn color="warning">Warning</v-btn>
    <v-btn color="info">Info</v-btn>

-------------------------------------------------------------------------------------------
237 vuetify - kolory

       Kody kolorów:
         https://vuetifyjs.com/en/framework/colors#material-colors
         https://vuetifyjs.com/en/framework/theme#theme
         https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/stylus/settings/_colors.styl

       Rosnące numerki po darken przyciemniają tło:

        <div id="app">
          <v-app>
            <div class="purple darken-3 text-md-center">
              <span class="white--text">Lorem ipsum</span>
            </div>
          </v-app>
        </div>

        Kolory:
            amber
            blue
            blue
            blue-grey
            brown,
            cyan
            deep-orange
            deep-purple
            green
            green
            grey
            indigo
            light-blue
            light-green
            lime
            orange,
            orange,
            pink
            purple
            purple
            red
            teal
            yellow

-------------------------------------------------------------------------------------------
238) vuetify - fonty

      https://vuetifyjs.com/en/framework/typography#typography

    1. Font size

        .display-4   <h1>
        .display-3   <h2>
        .display-2   <h3>
        .display-1   <h4>

        .headline    <h5>
        .title       <h6>
        .subheading  supporting text

        .body-1      regular
        .body-2      additional weight
        .caption     smaller text

    2. Font weight

        .font-weight-thin    100
        .font-weight-light   300
        .font-weight-regular 400
        .font-weight-medium  500
        .font-weight-bold    700
        .font-weight-black   900

      .font-italic - Sets the font-style to italic

    3. Casing

        .text-capitalize
        .text-lowercase
        .text-none
        .text-uppercase

    4. Wrapping

        .text-no-wrap
        .text-truncate

-------------------------------------------------------------------------------------------
239) vuetify - modularyzacja

      Po wydzieleniu kawałków kodu do nowego komponentu, np 'Filter',
      trzeba oba pliki (.html i .vue) zaimportować do Base.vue i użyć w Base.html

      Problemy przy dzieleniu strony (np skillbill) na kawałki:

        a) nad górną ramką pozostaje minimalna biała krecha. Trzeba dodac styl:
            margin-top: 0px !important;

        b) batony tracą styl czcionki. Trzeba dodać styl:
            font-family: "Roboto";

-------------------------------------------------------------------------------------------
240) vuetify - select

      <v-select :items="skills"
                v-model="skill_1"
                @change="onSkill_1"
                label="Skill X1"
                standard
                class="filters"
                clearable
                dense>
      </v-select>

      onSkill_1(e) {
        console.log('%c onSkill_1 = ' + e, 'color: yellow')
      },

-------------------------------------------------------------------------------------------
241) vuetify - form

      -------- Form.vue -----------------------------------------

        <template src="./Form.html"></template>

        <script>
          export default {
            data: () => ({
              valid: false,
              firstname: '',
              lastname: '',
              nameRules: [
                v => !!v || 'Name is required',
                v => v.length <= 10 || 'Name must be less than 10 characters'
              ],
              email: '',
              emailRules: [
                v => !!v || 'E-mail is required',
                v => /.+@.+/.test(v) || 'E-mail must be valid'
              ]
            })
          }
        </script>

        <style scoped>

          .compact-form {
            transform: scale(1.5);
          }

        </style>

      -------- Form.html -----------------------------------------

        <v-form v-model="valid" >
          <v-container >
            <v-layout class="compact-form"  >

              <v-flex xs8 md2 class="mr-5">
                <v-text-field
                  v-model="first"
                  :rules="nameRules"
                  :counter="10"
                  label="First"
                  required>
                </v-text-field>
              </v-flex>

              <v-flex xs8 md2 class="mx-5">
                <v-text-field
                  v-model="last"
                  :rules="nameRules"
                  :counter="10"
                  label="Last"
                  required>
                </v-text-field>
              </v-flex>

              <v-flex xs8 md2 class="ml-5">
                <v-text-field
                  v-model="email"
                  :rules="emailRules"
                  label="E-mail"
                  required>
                </v-text-field>
              </v-flex>

          </v-layout>
          </v-container>
        </v-form>

-------------------------------------------------------------------------------------------
275) leaflet

      yarn add vue2-leaflet leaflet  (2.0.3) (1.4.0)

      --------- main.js ------------------------------------

      import Vue from 'vue'
      import VueRouter from 'vue-router'
      import { Icon } from 'leaflet'
      import L from 'leaflet'
      import 'leaflet/dist/leaflet.css'

      import App from './App';
      import { routes } from './routes'
      import store from './store'

      delete L.Icon.Default.prototype._getIconUrl;

      Icon.Default.mergeOptions({
        iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
        iconUrl: require('leaflet/dist/images/marker-icon.png'),
        shadowUrl: require('leaflet/dist/images/marker-shadow.png')
      })

      Vue.config.productionTip = false
      Vue.use(VueRouter)

      const router = new VueRouter({
        routes,
        mode: 'history'
      })

      new Vue({
        router,
        store,
        render: h => h(App)
      }).$mount('#app')

      --------- routes.js ------------------------------------

        import Map from './components/Map/Map'

        export const routes = [
          { path: '', component: Map },
          { path: '*', component: Map }
        ]

      --------- Map.vue ------------------------------------

        <template src="./Map.html"></template>

        <script>
        import { LMap, LTileLayer, LMarker } from 'vue2-leaflet';
        export default {
          name: 'example',
          components: {
            LMap,
            LTileLayer,
            LMarker
          },
          data () {
            return {
              zoom:13,
              center: L.latLng(52.170089, 21.033414),
              url:'http://{s}.tile.osm.org/{z}/{x}/{y}.png',
              attribution:'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
              marker: L.latLng(52.170089, 21.033414),
            }
          },
          methods: {
            mounted() {
              // setTimeout(function() { window.dispatchEvent(new Event('resize')) }, 250);
            }
          }
        }
        </script>


      --------- Map.html ------------------------------------

        <div>
          <l-map style="height: 1000px" :zoom="zoom" :center="center">
            <l-tile-layer :url="url" :attribution="attribution"></l-tile-layer>
            <l-marker :lat-lng="marker"></l-marker>
          </l-map>
        </div>

      --------- App.vue ------------------------------------

        <template>
          <router-view/>
        </template>

-------------------------------------------------------------------------------------------
279) deplojka - pre

      UWAGA !
        Zaczynając apkę, zamróź wersje pakietów (zdejmując karetkę ^ z numeru pakietu)
        To samo po kazdej instalacji nowego pakietu

      i) odpalić snyk wizard (lub snyk test)
      a) wyciąć logi i komentarze (snipek 'reg')
      b) przejrzeć i wyciąć puste linie
      c) eslint / prettier
      d) przetestować ręcznie
      e) przetestować cyprysiem
      f) package.json - przegrupować z dependencies do devDependencies, wyciąć zbędne
      g) zainstalować prerender-spa-plugin
      h) index.html: preload, preconnect, description i keywords
      i) dev tools > audit (lighthouse)
      j) deplojka na zeit now (show source - pokazuje prerendered linijki ?)
      k) fejk repo

-------------------------------------------------------------------------------------------
280) deplojka - serve (lokalna)

      i) yarn add global serve   // przy projekcie w vue, z katalogu głównego, odpal:
                                 // serve -s dist

      a) zrób plik a.json
          [
            {
              "shopName": "Biedronka",
              "city": "Warszawa",
              "address": "Krucza 50",
            },
            {
              "shopName": "Biedronka",
              "city": "Warszawa",
              "address": "Augustyna Kordeckiego 56/58",
            }
          ]

      b) odpal serve a.json

      c) chrome localhost:5000

-------------------------------------------------------------------------------------------
281) deplojka - security

      a) PaaS - platform as a service. Właściciel utrzymuje i uaktualnia pliki serwera
      b) npm  - (popularne) biblioteki są starannie przetestowane przez autora jak i community
      c) snyk - pakiet do sprawdzania czy pakiet jest bezpieczny
      d) tls  - bezpieczna odmiana ssl'a
      e) walidacja i sanityzacja - danych użyszkodnika po stronie klienta i serwera
      f) express helmet - jeśli można ustawiać własne nagłówki po stronie serwera

-------------------------------------------------------------------------------------------
282) deplojka - performance (lighthouse, code splitting / lazy loading, eslint-plugin-vue)

      Temu by można było wczytywać komponenty dopiero wtedy gdy są niezbędne (lazy loading),
      służy code splitting. W tym celu, import komponentu zastępuje się funkcją go zwracającą

    UWAGA !
      Po poniższym, apka startuje, ale select boksy są puste
      Po code splicie w routes.js, yarn build i serve -s dist,
      dublowane są SearchBar i Filter

      Z kolei po najpierw yarn build, a potem wrzuceniu code splita i yarn starcie na 8080
      dev toolsy zgłaszają błąd, że apka nie zgadza się z wygenerowaną przez serwer:

      'The client-side rendered virtual DOM tree is not matching server-rendered content.'

      Ale po deplojce na now, błąd nie jest wyswietlany
      Pewnie więc trzeba olać komunikat o błędzie

      routes

      // import Base from '../../components/Base/Base.vue'
      // import FAQ from '../../components/FAQ/FAQ.vue'

      const Base = () => import('./views/Base/Base.vue')
      const FAQ = () => import('./components/FAQ/FAQ.vue')

      export default [
        { path: '', component: Base },
        { path: '/faq', component: FAQ },
        { path: '*', component: Base }
      ]

      Można sprawdzić w dev toolsach (tab network), że prócz jednego pliku app.js,
      pojawią się jeszcze 2: 0.js, 1.js

      Problem w tym, że w przypadku tak małej apki jak moja i tak 95% kodu
      mieści się w app.js, więc zysk z szybszego wczytywania mniejszego pliku jest b mały

      A poza tym, wywalają się testy cyprysa, nawet po dodaniu dużego waita:

        cy.visit('http://localhost:8080').wait(3000)

-------------------------------------------------------------------------------------------
283) deplojka - prerender (SSR) i webpack-bundle-analyzer (vue.config.js)

      https://github.com/chrisvfritz/prerender-spa-plugin/issues/159
      https://github.com/chrisvfritz/prerender-spa-plugin/tree/a2b4de1001bdad53ac63f6400965a05331376440/examples/vue2-webpack-router

      Uboczna korzyść (prócz SEO) z prerenderingu, to możliwość odpalenia Chrome Lighthouse'a (tab Audit lub ctrl + shift + p)

      a) yarn add prerender-spa-plugin

      b) w index.html, do taga importujacego js, dodaj:
          data-server-rendered="true"

      c) do vue.config.js, wklej jak niżej

      d) yarn build

      e) serve -s dist


    ------- /public/index.html ---------------------------------------

      <div id="app" data-server-rendered="true"></div>

    ------- vue.config.js ---------------------------------------

      const path = require('path')
      const PrerenderSpaPlugin = require('prerender-spa-plugin')
      const Renderer = PrerenderSpaPlugin.PuppeteerRenderer
      // const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin

      module.exports = {
        configureWebpack: config => {
          if (process.env.NODE_ENV !== 'production') return

          return {
            plugins: [
              // new BundleAnalyzerPlugin({
              //   analyzerMode: 'server',
              //   generateStatsFile: true,
              //   mode: 'production',
              //   openAnalyzer: false
              // }),
              new PrerenderSpaPlugin(
                path.resolve(__dirname, 'dist'),
                [ '/', '/about' ],
                new Renderer({
                  headless: true,
                  renderAfterDocumentEvent: 'render-event'
                }),
              )
            ]
          }
        }
      }


-------------------------------------------------------------------------------------------
284) deplojka - preload, preconnect, build --modern

      https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect

      a) preload - wcześniejsze załadowanie pliku niż podpowiada przegladarce jej heurystyka
                   (priorytet - patrz tab Network w dev toolsach)
                   Typowy usecase - js, css, fonty

                   <link rel="preload" as="script" href="super-important.js">
                   <link rel="preload" as="style" href="critical.css">
                   <link rel="preload" as="font" crossorigin="crossorigin" type="font/woff2" href="myfont.woff2">

      b) preconnect - uprzedzenie przegladarki, że za chwilę apka będzie coś ciągnęła z remote serwera
                      niech więc już nawiąże połączenie
                      Typowy usecase - jsony, nieznane jeszcze z nazwy obrazki

      c) dns-prefetch - unlike above 2, dont try to make something critical happen faster
                        Instead, it tries to make something non-critical happen earlier
                        Predicts what the user might be doing next, and prepare for it, such as retrieving the first
                        product details page in a list of results, or retrieving the next page in paginated content.

                        <link rel=dns-prefetch href='//fonts.googleapis.com'>

      d) build --modern - tworzy 2 buildy: lżejszy dla nowych i z polyfilami dla starych przeglądarek
                          Dodaj do index.html <script type="module"></script>

      ------ index.html -----------------------

        <link rel="preconnect" href="https://api.mlab.com">
        <link rel="preconnect" href="https://randomuser.me">


-------------------------------------------------------------------------------------------
285) deplojka - SEO (index.html)

      a) <meta name="description"
      b) <meta name="keywords"
      c) <meta name="viewport"

      Unikalne id w tagach html

      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta name="description" content="Matching developers skills with a project requirements and booking their calendars">
          <meta name="keywords" content="developers, projects, calendar, assignemnt, matching, crud, table, selection, resourcing, skills, requirements">
          <meta charset="utf-8" />
          <meta http-equiv=X-UA-Compatible content="IE=edge">
          <meta name=viewport content="width=device-width,initial-scale=1">
          <link rel="icon" href="../src/assets/favicon-32.png" type="image/png" />
          <link href='https://fonts.googleapis.com/css?family=Roboto:400|Material+Icons' rel="stylesheet">
          <link rel="preconnect" href="https://api.mlab.com">
          <link rel="preconnect" href="https://randomuser.me">
          <link rel="dns-prefetch" href='//fonts.googleapis.com'>
          <title>SkillBill</title>
        </head>
        <body>
          <div id="app" data-server-rendered="true"></div>
        </body>
      </html>

      <style>
        body {
          background: #46494c;
        }
      </style>

-------------------------------------------------------------------------------------------
286) deplojka - accessibility

    html lang, semantic tags, (aria-)label, alt, title, kontrast, font 15+

    0) <html lang='en'>

    1) semantic html5 tags
        footer, nav, main, article, section, aside, footer

    2) label

        Elementy które musza mieć label (a jak label nie poprawia wyniku lighthouse'a, to aria-label)

        a) input
        b) textarea
        b) checkboxes
        c) <input type="radio">
        d) <select>

    3 <image alt= '..'

    4) aria-label - labelka do batona 'x' zamykajacego modala lub okno

    5) title

    6) kontrast tekst - tło

      Tekst musi mieć odpowiedni kontrast do tła (jest plugin do chroma; ratio na normę AA = 4.5, AAA = 9)
      Czasami pomaga ustawienie fonta przez bold / strong

    7) eslint-plugin-vue-a11y

    8) vue-axe

    9) stylelint-a11y

-------------------------------------------------------------------------------------------
287) deplojka - lighthouse, coverage i webpack-bundle-analyzer, deps, fejk repo

  a) dev tools > audit (lighthouse) > run .. - naprawiaj to co zaraportuje, np:
      1) do index.html dodaj preload / preconnect / prefetch

  b) dev tools > ctrl + shift + p > wpisz: 'coverage' > Instrument coverage
      Na razie nie ma narzędzi do tree shakingu (webpackowy słabo działa, jak widać)
      PurgeCSS nie działa z vue

  c) yarn build --report // odpala webpack-bundle-analyzera na localhost:8888

  d) package.json   // przegrupuje dependencies vs devDependencies

  e) odkomentuj sekcję webpack bundle analyzer w vue.config.js (patrz p.283):
       yarn build --report

     Odpala to serwer z obrazkiem jakie pakiety ile miejsca zabierają w bundlu

     Ponieważ dodaje to parenaście sekund do zwykłego builda,
     więc warto to puścić dopiero pod koniec projektu

  f) fejk repo - pogrupowanie komitów, nadanie im dobrych tytułów i przeniesienie
     do innego repo na githubie - patrz plik git.txt p.323

-------------------------------------------------------------------------------------------
290) deplojka zeit-now hello world

      a) zainstaluj instalkę now desktop

      b) zarejestruj się

      c) now login (email)

      d) zrób plik a.json
          [
            {
              "shopName": "Biedronka",
              "city": "Warszawa",
              "address": "Krucza 50",
            },
            {
              "shopName": "Biedronka",
              "city": "Warszawa",
              "address": "Augustyna Kordeckiego 56/58",
            }
          ]

      e) odpal now

      f) chrome localhost:5000 wyświetli ww jsona

-------------------------------------------------------------------------------------------
291) deplojka zeit-now apki vue - old

      https://github.com/vuejs/vue-cli/pull/4232  // vue-cli 4

     Add a now.json file to your project root:

     {
       "name": "my-example-app",
       "version": 2,
       "builds": [
         { "src": "dist/**", "use": "@now/static"}
       ],
       "routes": [
         { "src": "/(.*)", "dest": "dist/$1" }
       ],
       "alias": "vue-example"
     }
     Adding a deployment script in package.json:

     "deploy": "npm run build && now --target production"

-------------------------------------------------------------------------------------------
292) deplojka zeit-now apki vue - new

    Nie potrzeba tworzyć now.json'a

    UWAGA !
      Plik dist/api/jakisplik.js trzeba za każdym razem dodać z palca.
      Dodanie go wewnątrz /src nie spowoduje skopiowania go do /dist (po odpaleniu yarn build)

    a) uaktualnij now-cli do 16.1.1
    b) yarn build
    c) cd dist
    d) mkdir api

    e) touch jakisplik.js:

        module.exports = (req, res) => {
          res.json({ hello: 'world' })
        }

    f) now

    g) gdy wyświetli się:
         https://dist-nnt3iym1e.now.sh [v2] [1s]
         > Ready! Deployed to https://dist.nabu13.now.sh

       .. odpal pierwszy z nich (bo z tajemniczych przyczyn, drugi nie działa):

    h) https://dist-nnt3iym1e.now.sh/api/jakisplik

-------------------------------------------------------------------------------------------
294) deplojka - firebase hosting

      Więcej - node.txt p. 340 - 343

      a) otwórz konsolę webową i stwórz nowy projekt
          console.firebase.google.com > np 'sfir11'

      b) yarn global add firebase-tools

      c) firebase login

      d) firebase init > Hosting > 'sfir11' > 'dist' zamiast 'public'

      e) firebase serve  // odpala lokalny server na porcie 5000

      f) firebase deploy  // odpala apkę na serwerze FB i daje linkę - nazwaApki.firebaseapp.com


-------------------------------------------------------------------------------------------
300) http - axios

      <template>
        <div>
          <h1>Quote</h1>
          <h2>{{ status }}</h2>
        </div>
      </template>

      <script>
        import axios from 'axios'

        export default {
          created() {
            this.loadQuote()
          },
          data() {
            return {
              status: 'Loading ..'
            }
          },
          methods: {
            loadQuote() {
              this.status = 'Loading ..'

              axios.get('https://ron-swanson-quotes.herokuapp.com/v2/quotes')
                .then(res => {
                  console.log(res)
                  this.status = res.data[0]
                })
                .catch((err) => console.log(err))
            }
          }
        }
      </script>

-------------------------------------------------------------------------------------------
301) .gitignore

      Uczyń .gitignore widocznym w explorerze:

        Settings > User Settings

          "files.exclude": {
            "**/.gitignore": false
          (...)

     -----------------------
      .DS_Store
      node_modules

      # local env files
      .env.local
      .env.*.local

      # Log files
      npm-debug.log*
      yarn-debug.log*
      yarn-error.log*

      .vscode

      /dist
      package-lock.json

-------------------------------------------------------------------------------------------
302) css - background image

      By jako tło wypełniał cały ekran i stał w miejscu mimo scrollowania ekranu
      (tak jak w apce Siopo / koszyk2 = sklepy w pobliżu domu)

      background: url('./src/assets/blur_7_dark_low_brightness_70procent.jpg') center center fixed;
      background-size: cover;

      Obrazek ma rodziałkę 1920 na 1320 (idealnie 1920 na 1080)
      Robiony gimpem
      Gausian Blur Size X = Size Y = 7
      Dark
      Low brightness
      jpeg kompresja 70%
      wynikowy rozmiat 120 kB


-------------------------------------------------------------------------------------------
303) nextTick

      https://012.vuejs.org/guide/best-practices.html

      this.$nextTick(() => {
        $1
      })

-------------------------------------------------------------------------------------------
304) Uncaught SyntaxError: Unexpected token <

    Chrome wyrzucał taki błąd ale w niczym to nie przeszkadzało
    Do czasu jak odpaliłem cypressa. Nie chciał ruszyć, powołując się na niego

    Rozw:
      Wycięcie z public/index.html, linii:
        <script src="/dist/build.js"></script>

-------------------------------------------------------------------------------------------
305) zeit - headers

    Sprawdza się je albo z taba Network chrome dev toolsów,
    albo komendą curl -sI http://...

    Problem w tym, że nie działa ustawianie (now.json):

      "headers": [
        {
          "source": "**/*.@(jpg|jpeg|gif|png)",
          "headers": [{
            "key": "cache-control",
            "value": "max-age=7200"
          }]
        }
      ]


    curl -sI https://dist-ytthflemrv.now.sh/ | egrep -i 'access-control-allow-origin|cache-control'

      cache-control: s-maxage=86400
      access-control-allow-origin: *

    curl -sI https://dist-ytthflemrv.now.sh/

      HTTP/2 200
      date: Fri, 15 Mar 2019 14:14:27 GMT
      content-type: text/html; charset=utf-8
      content-length: 59437
      last-modified: Fri, 15 Mar 2019 00:01:44 GMT
      content-disposition: inline; filename="index.html"
      etag: W/"4ff593ef161d6bab0f001a86df880e703849088e"
      cache-control: s-maxage=86400
      access-control-allow-origin: *
      x-now-trace: bru1
      server: now
      now: 1
      x-now-cache: HIT
      x-now-id: dx4x8-1552659267175-ONP5FsoGDJWRhoWu0qKk0tET
      accept-ranges: bytes

-------------------------------------------------------------------------------------------
306) instant prototyping

    a) yarn global add @vue/cli-service-global

    b) w pustym katalogiu, stwórz dowolną sfc (single file component): 1.vue

    c) odpal vue serve 1.vue - odpali się localhost:8080 z tym komponentem

-------------------------------------------------------------------------------------------
307) razzle

      https://github.com/jaredpalmer/razzle

      a) yarn add razzle-plugin-vue

      b) razzle.config.js

          module.exports = {
            plugins: ['vue'],
          }

-------------------------------------------------------------------------------------------
310) apka wioturillo

      a) załóż konto na cron-job.org
      b) klik w CronJobs > Create cronjob > wklej 1-go z poniższych urli > co np 5 minut
      c) zrób endpointa na firebase functions
      d) ma on odpalać poniższy skrypt, a wyniki sejwować w firebase firestorze

      e) zrób apkę w vue + vuetify (table), pokazującą weturilki w układzie:
          Adres  Teraz  5 minut temu  10 minut temu  za 5 minut za 10 minut za 20 minut  GMaps

      f) apka ma działać realtime (onSnapshot)

      g) docelowo, ma pokazywać mapę w leaflecie

      h) ma przewidywać ilość rowerów, na podstawie danych za ostatni tydzień

      Pakiet micro umożliwia odpalenie lokalnego serwera now, by sprawdzić jak apka chodzi,
      przed wysłaniem jej na serwer

      yarn add micro axios xml2js

    ----------- package.json ----------------------------------------------

      {
        "name": "sfir11",
        "version": "1.0.0",
        "main": "index.js",
        "license": "MIT",
        "dependencies": {
          "axios": "^0.18.0",
          "micro": "^9.3.3",
          "xml2js": "^0.4.19"
        },
        "scripts": {
          "start": "micro"
        }
      }

    ----------- now.json ----------------------------------------------

      {
        "version": 2,
        "name": "wetu",
        "builds": [{ "src": "index.js", "use": "@now/node" }]
      }

    ----------- app.js ----------------------------------------------

      const axios = require('axios')
      const parseString = require('xml2js').parseString;

      const url = 'http://gdzieturilo.pl/s/?action=nextbikeXML&v=PL'

      module.exports = async (request, response) => {
        await axios.get(url)
          .then(res => {
            parseString(res.data, (err, result) => {
              if (err) console.log('Erorek: ', err)

              const city = result.markers.country[0].city[0].place
              const stations = city.map(el => [ el.$.name, el.$.bikes, el.$.lat, el.$.lng ])

              response.end(JSON.stringify(stations))
            })
        })
        .catch(err => {
          response.end('Erroras: ' + err)
        })
      }

-------------------------------------------------------------------------------------------
311) apka wioturillo - prosty wykres

     yarn chart.js vue-chartkick

     a) Po wybraniu z dropdowna nazwy stacji, metoda watch kumpo Search,
        wysyła dispatcha 'findStation'

     b) Akcja store'a odpala funkcję ajaxFindStation

     c) funkcja ta woła funkcję chartPoints z pliku helpers

     d) w niej wydłubywana jest tablica w formacie jaki chce dostać wykres

     e) i przesyłana jest ona do stora komitem ADD_CHART_POINTS

     f) store ustawia state.chartPoints i gettera getChartPoints

     g) nasłuchuje go metoda metoda chart, metody computed, pliku Table.vue


    ------- main.js -----------------------------------------

      import VueChartkick from 'vue-chartkick'
      import Chart from 'chart.js'

      Vue.use(VueChartkick, {adapter: Chart})


    ------- Table.html -----------------------------------------

       <line-chart :data="chart"></line-chart>

    ------- Table.vue -----------------------------------------

        computed: {
          chart() {
            return this.$store.getters.getChartPoints
          },

    ------- Search.vue -----------------------------------------

      watch:{
        findStation(station, oldStation) {
          this.$store.dispatch('findStation', station)
        }
      },

    ------- store.js -----------------------------------------

      import { findStation } from './services/helper'

      export default new Vuex.Store({
        state: {
          chartPoints: {}
        },
        getters: {
          getChartPoints(state) {
            return state.chartPoints
          },
        },
        mutations: {
          ADD_CHART_POINTS(state, chartPoints) {
            state.chartPoints = chartPoints
          }
        },
        actions: {
          findStation(context, station) {
            ajaxFindStation(context, station)  //
          },
        }

      })

    ------- ajax.js -----------------------------------------

      export const ajaxFindStation = async (context, station) => {

        axios.get(url)
          .then((res) => {
            chartPoints(context, res.data)
            context.commit('FIND_STATION', res.data)
          })
          .catch(err => console.log('Eror: ', err))
      }

    ------- helper.js -----------------------------------------

      export const chartPoints = (context, stationArray) => {
        const chartPoints = {}
        stationArray.sort ((a, b) => b.timestamp - a.timestamp)

        stationArray.map(el => {
          const time = "'" + el.time + "'"
          chartPoints[time] = +el.bikes
        })
        context.commit('ADD_CHART_POINTS', chartPoints)
      }

_________________________________________________________________________________________________________
312) local state vs vuex

    a) jeśli potrzebna jest komunikacja między sibling komponentami - vuex
    b) jeśli stan kompenentu ustawiany jest z różnych miejsc w apce - vuex

_________________________________________________________________________________________________________
313) vee-validate - helloWorld

      baianat.github.io/vee-validate/

      a) yarn add vee-validate

      b) main.js:
          import VeeValidate from 'vee-validate'
          Vue.use(VeeValidate)

    ------- Kumpo.vue --------------------------------------------------

      <template src = './Kumpo.html'> </template>

      <script>
        export default {
          methods: {
            submit() {
              this.$validator.validateAll()
                .then(res => console.log(res))
                .catch(err => console.log('Erorek: ', err))
            }
          }
        }
      </script>

    ------- Kumpo.html --------------------------------------------------

      <div>
        <form @submit.prevent.stop="submit">

          <div>Email:
            <input name="email" v-validate="'required|email'" />
            <div v-show="errors.has('email')">{{ errors.first('email')}}</div>
          </div>

          <div>&nbsp;</div>

          <div> Age:
            <input type="number" name="age" v-validate="'required|min_value:5|max_value: 10'"/>
            <div v-show="errors.has('age')">{{ errors.first('age')}}</div>
          </div>

          <div>&nbsp;</div>

          <input type="submit" value="Submit">

        </form>

      </div>

    ------- main.js --------------------------------------------------

      import Vue from 'vue'
      import VeeValidate from 'vee-validate'
      import App from './App.vue'
      import router from './router'
      import store from './store'

      Vue.use(VeeValidate)

      Vue.config.productionTip = false

      new Vue({
        router,
        store,
        render: h => h(App)
      }).$mount('#app')

_________________________________________________________________________________________________________
314) vee-validate - bundle size

      Ponieważ vee waży 30 kB gzipped, można wygenerować odchudzoną wersję,
      dodając tylko te funkcje, których używamy. Dla kumpo z punktu wyżej:

      Dla ww projektu, zmniejszyło to gzipped vee z 32 kB do 16 kB = 1/4 paczki

    ------------------------------------------------------------------

      import Vue from 'vue'
      // import VeeValidate from 'vee-validate'
      import { Validator, install as VeeValidate } from 'vee-validate/dist/vee-validate.minimal.esm.js'
      import { required, min_value, max_value, email, decimal } from 'vee-validate/dist/rules.esm.js'
      import veeEn from 'vee-validate/dist/locale/en'

      import App from './App.vue'
      import router from './router'
      import store from './store'

      Validator.extend('required', required)
      Validator.extend('min_value', min_value)
      Validator.extend('max_value', max_value)
      Validator.extend('decimal', decimal)
      Validator.extend('required', required)
      Validator.extend('email', email)
      Validator.localize('en', veeEn)

      Vue.use(VeeValidate)
_________________________________________________________________________________________________________
315) eslint: Unexpected token <

      a) yarn add babel-eslint

      b) do .eslintrc, wstaw:
          {
            "parserOptions": {
              "ecmaVersion": 7
            },

            "env": {
              "es6": true
            },

            "parser": "babel-eslint"
          }


_________________________________________________________________________________________________________
328) typescript - tips

      a) opcjonalny argument funkcji
          .. oznacza się dodając '?' na końcu nazwy:
            function sum(x: number, y: number, z?: number)



_________________________________________________________________________________________________________
329) typescript - instalacja


      a) npm i -g typescript tslint

      b) zainstaluj extensions vs coda: TSLint i TSLint Vue

      c)  tsc --init

          tsconfig.json
            {
              "compilerOptions": {
                "target": "es6",
                "module": "commonjs",
                "outDir": "out",
                "sourceMap": true
              }
            }

      d) tslint.json
          {
            "extends": "tslint:recommended",
            "rules": {
              "array-type": false,
              "no-consecutive-blank-lines": [true, 1],
              "no-console": false,
              "object-literal-sort-keys": false,
              "semicolon": [true, "never"],
              "trailing-comma": [true, "never"],
              "quotemark": [true, "single"]
            }
          }

      e) ts-node-dev
          lepsza alternatywa tsc + nodedemon
            npm i -g ts-node-dev
            tsnd --clear --respawn *.ts
            Podpiąłem pod 'o' w .bashrc
            Teraz gdy odpalę 'o', ilekroć zrobię zmianę w pliku .ts, terminal pokaże mi wynik
            Jak plik będzie działał ok, wtedy odpal 'tsc'

      f) tsc + nodemon
          w 1-szym oknie terminala odpal: tsc --watch
          w drugim (ew w katalogu ./out): nodemon ./plik.js

_________________________________________________________________________________________________________
330) typescript - hello world

      https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html

      a) npm install -g typescript tslint

      b) utwórz plik wywal3.ts:

          function greeter(person: string) {
            return "Hello 2, " + person
          }

          let user = 'Tom'
          // let user = [0, 1, 2]

          console.log(greeter(user))
          // console.log(greeter()

      c) odpal tsc wywal3.ts i sprawdź czy utworzony został wywal3.js

      d) zmień ww plik odkomentowując ww linie i zobacz jakie errory dostaniesz

      e) ostronie używaj komendy, bo czasem się wywala
          tsc wywal3.ts && node wywal3.js

_________________________________________________________________________________________________________
331) typescript - interfejs: funkcja

      Interfejs opisuje strukturę obiektu, który ma być podany jako argument do funkcji

      interface Person {
        firstName: string
        lastName: string
      }

      function greeter(person: Person) {
        return "Hello, " + person.firstName + " " + person.lastName
      }

      let user = { firstName: "Jane", lastName: "Kane" }

      console.log(greeter(user))

_________________________________________________________________________________________________________
332) typescript - interfejs: object literal

      interface IPerson {
        first: string,
        last: string,
        sayHi: () => string
      }

      const customer: IPerson = {
        first: 'Tom',
        last: 'Hanks',
        sayHi: (): string => 'Hi Im ' + customer.first
      }

      console.log(customer.first)
      console.log(customer.last)
      console.log(customer.sayHi())


_________________________________________________________________________________________________________
333) typescript - interfejs: multi

      Obiekt może korzystać z wielu interfejsów.

      a) | (or)
        Man | Pig oznacza, że obj musi mieć:
          a) wszystkie propertki Mana i ew jakieś z Pig, lub ..
          b) wszystkie propertki Piga i ew jakieś z Man

        interface Man {
          legs: number,
          brain: boolean
        }

        interface Pig {
          name: string,
          weight: number
        }

        const obj: Man | Pig = {
          // legs: 2,
          // brain: true,
          weight: 200,
          // name: 'jon',
          brain: true
        }

        console.log(obj)

      b) & (and)
        Man & Pig oznacza, że obj musi mieć wszystkie propertki obu interfejsów

_________________________________________________________________________________________________________
334) typescript - type

      Rzecz analogiczna do interfejsu
      Type jest depryknięty na rzecz interfejsu

      type person = { first: string }

      const x: person = { first: 'Dollna' }
      console.log(x.first)
_________________________________________________________________________________________________________
335) typescript - class

    class Student {
      private fullName: string

      constructor(public firstName: string, public middleInitial: string, public lastName: string) {
        this.fullName = firstName + " " + middleInitial + " " + lastName
      }
    }

    interface Person {
      firstName: string
      lastName: string
    }

    function greeter(person: Person) {
      return "Hello, " + person.firstName + " " + person.lastName
    }

    let user = new Student("Jane", "M.", "User")

    console.log(greeter(user))
_________________________________________________________________________________________________________
336) typescript - type inferrence

      let x = 5
      x = 'dupa' // wywali błąd Type "dupa" is not assignable to type 'number'.

      By to przeszło, trzeba dodać typ any:

      let x: any = 5
      x = 'dupa'

_________________________________________________________________________________________________________
337) typescript - funkcja: argumenty

      TS elegancko załatwia sprawdzanie typu parametru funkcji.

      Zamiast tradycyjnego:
        if (typeof x !== 'number')
      ..można:
        function sum(x: number)

      Pełna wersja:

      ---------------------------------------------------------------------------

        function sum(x, y, z = 0) {
          if (typeof x !== 'number') throw new Error('Błąd typu dla x')
          if (typeof y !== 'number') throw new Error('Błąd typu dla y')
          if (typeof z !== 'number') throw new Error('Błąd typu dla z')

          return x + y + z
        }

      ... lepiej ts-owe:

      ---------------------------------------------------------------------------

        function sum(x: number, y: number, z: number = 0) {
          return x + y + z
        }

        console.log('sum(1, 2, 3):', sum(1, 2, 3))
        console.log('sum(1, 2):', sum(1, 2))

_________________________________________________________________________________________________________
338) typescript - funkcja: zwracane wartości

      Podawanie typu zwracanej wartości nie jest obowiązkowe,
       gdyż kompilator ją sobie określi po 1-szym wykonaniu, ale warto dopisać

      function add(x: number, y: number): number {
        return x + y
      }

      function add(name: string): void {
        console.log('Hello ' + name)
      }

_________________________________________________________________________________________________________
339) typescript - rest i spread

      function sum(...nums: number[]) {
        return Math.max(...nums)
      }

      console.log(sum(1, 2, 3, '4'))

_________________________________________________________________________________________________________
340) typescript - union

      Można określić 2 dopuszczalne typy. Rozdziela się je pipe'm

      const arr1: (number | boolean) = false

      const arr2: (boolean | number)[] = [true, false, 1]

      function sum(x: string | number[]) {
        console.log('x:', x)
      }

      // sum([2,4])   // [ 2, 4 ]

      sum(true)      // err


_________________________________________________________________________________________________________
350) typescript - class memeber ordering (tslint)

      https://palantir.github.io/tslint/rules/member-ordering/

      @Prop
      zmienne (public / private)
      get
      set
      metody (protected / private)

_________________________________________________________________________________________________________
341) typescript -



_________________________________________________________________________________________________________
342) typescript -



_________________________________________________________________________________________________________
343) typescript -



_________________________________________________________________________________________________________
344) typescript -





